
Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008590  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08008760  08008760  00018760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008814  08008814  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800881c  0800881c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800881c  0800881c  0001881c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a4  20000080  080088a4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004324  080088a4  00024324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c3c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a20  00000000  00000000  00042cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00047710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  00048ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289ea  00000000  00000000  0004a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002088e  00000000  00000000  00072f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1cfe  00000000  00000000  000937b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001754b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006728  00000000  00000000  00175508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008748 	.word	0x08008748

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008748 	.word	0x08008748

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <_ZN9actuators7BLHelisC1E17TIM_HandleTypeDef>:
#include "blhelis.hpp"
#include "../state/state.hpp"

namespace actuators{

BLHelis::BLHelis(TIM_HandleTypeDef htim8){
 8000514:	b084      	sub	sp, #16
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	f107 0014 	add.w	r0, r7, #20
 8000522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->timer = &htim8;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f107 0214 	add.w	r2, r7, #20
 800052c:	601a      	str	r2, [r3, #0]
	this->Init_Motors();
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f808 	bl	8000544 <_ZN9actuators7BLHelis11Init_MotorsEv>
}
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000540:	b004      	add	sp, #16
 8000542:	4770      	bx	lr

08000544 <_ZN9actuators7BLHelis11Init_MotorsEv>:

void BLHelis::Init_Motors(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(this->timer);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f004 fb67 	bl	8004c24 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_1);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f004 fc93 	bl	8004e88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_2);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2104      	movs	r1, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f004 fc8d 	bl	8004e88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_3);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2108      	movs	r1, #8
 8000574:	4618      	mov	r0, r3
 8000576:	f004 fc87 	bl	8004e88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_4);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	210c      	movs	r1, #12
 8000580:	4618      	mov	r0, r3
 8000582:	f004 fc81 	bl	8004e88 <HAL_TIM_PWM_Start>
	static uint16_t mc1_l = MOTOR_1MS;
	static uint16_t mc1_h = MOTOR_13MS;
	static uint16_t mc1 = 0;
	static uint16_t step_count = 1000;
	static uint8_t delay = 10;
	float step = (mc1_h - mc1_l) / step_count;
 8000586:	4b4d      	ldr	r3, [pc, #308]	; (80006bc <_ZN9actuators7BLHelis11Init_MotorsEv+0x178>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	4a4c      	ldr	r2, [pc, #304]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 8000594:	8812      	ldrh	r2, [r2, #0]
 8000596:	fb93 f3f2 	sdiv	r3, r3, r2
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	edc7 7a04 	vstr	s15, [r7, #16]

	motor_sp msp;

	//delay for motor startup????
	//HAL_Delay(10000);
	for(uint16_t i = 0; i < (step_count/2); i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	82fb      	strh	r3, [r7, #22]
 80005aa:	4b46      	ldr	r3, [pc, #280]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	085b      	lsrs	r3, r3, #1
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	8afa      	ldrh	r2, [r7, #22]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d22c      	bcs.n	8000612 <_ZN9actuators7BLHelis11Init_MotorsEv+0xce>
		mc1 = mc1_l + i * (int)step;
 80005b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80005bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005c0:	ee17 3a90 	vmov	r3, s15
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	8afa      	ldrh	r2, [r7, #22]
 80005c8:	fb12 f303 	smulbb	r3, r2, r3
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005d8:	801a      	strh	r2, [r3, #0]
		msp = {mc1, mc1, mc1, mc1};
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005dc:	8818      	ldrh	r0, [r3, #0]
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e0:	8819      	ldrh	r1, [r3, #0]
 80005e2:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	8138      	strh	r0, [r7, #8]
 80005ec:	8179      	strh	r1, [r7, #10]
 80005ee:	81ba      	strh	r2, [r7, #12]
 80005f0:	81fb      	strh	r3, [r7, #14]
		this->Update_Motor_SP(msp);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f8f8 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
		HAL_Delay(delay);
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <_ZN9actuators7BLHelis11Init_MotorsEv+0x188>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fe4b 	bl	80022a0 <HAL_Delay>
	for(uint16_t i = 0; i < (step_count/2); i++){
 800060a:	8afb      	ldrh	r3, [r7, #22]
 800060c:	3301      	adds	r3, #1
 800060e:	82fb      	strh	r3, [r7, #22]
 8000610:	e7cb      	b.n	80005aa <_ZN9actuators7BLHelis11Init_MotorsEv+0x66>
	}
	for(uint16_t i = 0; i < (step_count/2); i++){
 8000612:	2300      	movs	r3, #0
 8000614:	82bb      	strh	r3, [r7, #20]
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	085b      	lsrs	r3, r3, #1
 800061c:	b29b      	uxth	r3, r3
 800061e:	8aba      	ldrh	r2, [r7, #20]
 8000620:	429a      	cmp	r2, r3
 8000622:	d22c      	bcs.n	800067e <_ZN9actuators7BLHelis11Init_MotorsEv+0x13a>
		mc1 = mc1_h - i * (int)step;
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <_ZN9actuators7BLHelis11Init_MotorsEv+0x178>)
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	edd7 7a04 	vldr	s15, [r7, #16]
 800062c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000630:	ee17 3a90 	vmov	r3, s15
 8000634:	b29b      	uxth	r3, r3
 8000636:	8ab9      	ldrh	r1, [r7, #20]
 8000638:	fb11 f303 	smulbb	r3, r1, r3
 800063c:	b29b      	uxth	r3, r3
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000644:	801a      	strh	r2, [r3, #0]
		msp = {mc1, mc1, mc1, mc1};
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000648:	8818      	ldrh	r0, [r3, #0]
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 800064c:	8819      	ldrh	r1, [r3, #0]
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000650:	881a      	ldrh	r2, [r3, #0]
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	8138      	strh	r0, [r7, #8]
 8000658:	8179      	strh	r1, [r7, #10]
 800065a:	81ba      	strh	r2, [r7, #12]
 800065c:	81fb      	strh	r3, [r7, #14]
		this->Update_Motor_SP(msp);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f8c2 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
		HAL_Delay(delay);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <_ZN9actuators7BLHelis11Init_MotorsEv+0x188>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fe15 	bl	80022a0 <HAL_Delay>
	for(uint16_t i = 0; i < (step_count/2); i++){
 8000676:	8abb      	ldrh	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	82bb      	strh	r3, [r7, #20]
 800067c:	e7cb      	b.n	8000616 <_ZN9actuators7BLHelis11Init_MotorsEv+0xd2>
	}
	mc1 = mc1_l;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000684:	801a      	strh	r2, [r3, #0]
	msp = {mc1, mc1, mc1, mc1};
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000688:	8818      	ldrh	r0, [r3, #0]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 800068c:	8819      	ldrh	r1, [r3, #0]
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000690:	881a      	ldrh	r2, [r3, #0]
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	8138      	strh	r0, [r7, #8]
 8000698:	8179      	strh	r1, [r7, #10]
 800069a:	81ba      	strh	r2, [r7, #12]
 800069c:	81fb      	strh	r3, [r7, #14]
	this->Update_Motor_SP(msp);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f8a2 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
	HAL_Delay(2000);
 80006ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006b0:	f001 fdf6 	bl	80022a0 <HAL_Delay>
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000002 	.word	0x20000002
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000004 	.word	0x20000004
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	20000006 	.word	0x20000006

080006d0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE>:

void BLHelis::actuateMotors(state::QuadControlActions& ac){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]

	static uint16_t m1_sp, m2_sp, m3_sp, m4_sp;

	//mix the controller output
	m1_sp = ac.u1 + ac.u2 + ac.u3 + ac.u4;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	ed93 7a00 	vldr	s14, [r3]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80006e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80006f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000702:	ee17 3a90 	vmov	r3, s15
 8000706:	b29a      	uxth	r2, r3
 8000708:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x110>)
 800070a:	801a      	strh	r2, [r3, #0]
	m2_sp = ac.u1 - ac.u2 + ac.u3 - ac.u4;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	ed93 7a00 	vldr	s14, [r3]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	edd3 7a01 	vldr	s15, [r3, #4]
 8000718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	edd3 7a03 	vldr	s15, [r3, #12]
 800072c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000734:	ee17 3a90 	vmov	r3, s15
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x114>)
 800073c:	801a      	strh	r2, [r3, #0]
	m3_sp = ac.u1 + ac.u2 - ac.u3 - ac.u4;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	ed93 7a00 	vldr	s14, [r3]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	edd3 7a01 	vldr	s15, [r3, #4]
 800074a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	edd3 7a02 	vldr	s15, [r3, #8]
 8000754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	edd3 7a03 	vldr	s15, [r3, #12]
 800075e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	ee17 3a90 	vmov	r3, s15
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x118>)
 800076e:	801a      	strh	r2, [r3, #0]
	m4_sp = ac.u1 - ac.u2 - ac.u3 + ac.u4;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	ed93 7a00 	vldr	s14, [r3]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edd3 7a01 	vldr	s15, [r3, #4]
 800077c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	edd3 7a02 	vldr	s15, [r3, #8]
 8000786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000798:	ee17 3a90 	vmov	r3, s15
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x11c>)
 80007a0:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_1, m1_sp);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x110>)
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_2, m2_sp);
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x114>)
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_3, m3_sp);
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x118>)
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_4, m4_sp);
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x11c>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000009e 	.word	0x2000009e
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	200000a2 	.word	0x200000a2
 80007ec:	200000a4 	.word	0x200000a4

080007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>:
	this->Update_Motor_SP(msp);
	HAL_Delay(2000);

}

void BLHelis::Update_Motor_SP(motor_sp msp){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	e883 0006 	stmia.w	r3, {r1, r2}
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_1, msp.m1_sp);
 80007fe:	88ba      	ldrh	r2, [r7, #4]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_2, msp.m2_sp);
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_3, msp.m3_sp);
 8000812:	893a      	ldrh	r2, [r7, #8]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_4, msp.m4_sp);
 800081c:	897a      	ldrh	r2, [r7, #10]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_ZN7control2PIC1Effff>:
#include "../state/trajectories.hpp"
#include "../model/models.hpp"

namespace control{

PI::PI(float sp, float dt, float Kp, float Ki){
 8000832:	b480      	push	{r7}
 8000834:	b087      	sub	sp, #28
 8000836:	af00      	add	r7, sp, #0
 8000838:	6178      	str	r0, [r7, #20]
 800083a:	ed87 0a04 	vstr	s0, [r7, #16]
 800083e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000842:	ed87 1a02 	vstr	s2, [r7, #8]
 8000846:	edc7 1a01 	vstr	s3, [r7, #4]
		this->setpoint = sp;
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	601a      	str	r2, [r3, #0]
		this->dt = dt;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	605a      	str	r2, [r3, #4]
		this->Kp = Kp;
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	609a      	str	r2, [r3, #8]
		this->Ki = Ki;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	60da      	str	r2, [r3, #12]
}
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	4618      	mov	r0, r3
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_ZN7control2PI10calcOutputEf>:

float PI::calcOutput(float stateEstimate){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	ed87 0a00 	vstr	s0, [r7]
		static float error = 0;
		static float ierror = 0;

		error = this->setpoint - stateEstimate;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	ed93 7a00 	vldr	s14, [r3]
 8000882:	edd7 7a00 	vldr	s15, [r7]
 8000886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <_ZN7control2PI10calcOutputEf+0xa8>)
 800088c:	edc3 7a00 	vstr	s15, [r3]
		ierror += this->dt * error;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	ed93 7a01 	vldr	s14, [r3, #4]
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <_ZN7control2PI10calcOutputEf+0xa8>)
 8000898:	edd3 7a00 	vldr	s15, [r3]
 800089c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <_ZN7control2PI10calcOutputEf+0xac>)
 80008a2:	edd3 7a00 	vldr	s15, [r3]
 80008a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <_ZN7control2PI10calcOutputEf+0xac>)
 80008ac:	edc3 7a00 	vstr	s15, [r3]
		if(ierror > 10){
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <_ZN7control2PI10calcOutputEf+0xac>)
 80008b2:	edd3 7a00 	vldr	s15, [r3]
 80008b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80008ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	dd03      	ble.n	80008cc <_ZN7control2PI10calcOutputEf+0x5c>
			ierror = 10;
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <_ZN7control2PI10calcOutputEf+0xac>)
 80008c6:	4a16      	ldr	r2, [pc, #88]	; (8000920 <_ZN7control2PI10calcOutputEf+0xb0>)
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e00c      	b.n	80008e6 <_ZN7control2PI10calcOutputEf+0x76>
		}
		else if(ierror < -10){
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <_ZN7control2PI10calcOutputEf+0xac>)
 80008ce:	edd3 7a00 	vldr	s15, [r3]
 80008d2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80008d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008de:	d502      	bpl.n	80008e6 <_ZN7control2PI10calcOutputEf+0x76>
			ierror = -10;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <_ZN7control2PI10calcOutputEf+0xac>)
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <_ZN7control2PI10calcOutputEf+0xb4>)
 80008e4:	601a      	str	r2, [r3, #0]
		}
		return (this->Kp * error + this->Ki * ierror);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <_ZN7control2PI10calcOutputEf+0xa8>)
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <_ZN7control2PI10calcOutputEf+0xac>)
 80008fe:	edd3 7a00 	vldr	s15, [r3]
 8000902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000906:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800090a:	eeb0 0a67 	vmov.f32	s0, s15
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200000a8 	.word	0x200000a8
 800091c:	200000ac 	.word	0x200000ac
 8000920:	41200000 	.word	0x41200000
 8000924:	c1200000 	.word	0xc1200000

08000928 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <vApplicationGetIdleTaskMemory+0x2c>)
 8000938:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <vApplicationGetIdleTaskMemory+0x30>)
 800093e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200000b0 	.word	0x200000b0
 8000958:	20000164 	.word	0x20000164

0800095c <_Z4waiti>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void wait(int millis){
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	int start_time = counter;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <_Z4waiti+0x2c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
	while(counter - start_time < millis);
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <_Z4waiti+0x2c>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dd00      	ble.n	800097a <_Z4waiti+0x1e>
 8000978:	e7f7      	b.n	800096a <_Z4waiti+0xe>
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000528 	.word	0x20000528

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	b0cf      	sub	sp, #316	; 0x13c
 8000990:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
  counter = 0;
 8000992:	4b8b      	ldr	r3, [pc, #556]	; (8000bc0 <main+0x234>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f001 fc40 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f924 	bl	8000be8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f000 fb7a 	bl	8001098 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80009a4:	f000 fb4a 	bl	800103c <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80009a8:	f000 f9b8 	bl	8000d1c <_ZL12MX_I2C1_Initv>
  MX_SPI2_Init();
 80009ac:	f000 f9ea 	bl	8000d84 <_ZL12MX_SPI2_Initv>
  MX_TIM8_Init();
 80009b0:	f000 fa24 	bl	8000dfc <_ZL12MX_TIM8_Initv>
  MX_UART4_Init();
 80009b4:	f000 fb14 	bl	8000fe0 <_ZL13MX_UART4_Initv>




  //system state variable
  enum System_State sys_state = INIT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

  //calibration flags
  bool imu_config_flag, imu_calib_flag = false;
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee

  /* USER CODE END 2 */

  //required devices
  sensors::BNO055 imu(hi2c1);
 80009c4:	4c7f      	ldr	r4, [pc, #508]	; (8000bc4 <main+0x238>)
 80009c6:	f107 058c 	add.w	r5, r7, #140	; 0x8c
 80009ca:	4668      	mov	r0, sp
 80009cc:	f104 030c 	add.w	r3, r4, #12
 80009d0:	2248      	movs	r2, #72	; 0x48
 80009d2:	4619      	mov	r1, r3
 80009d4:	f007 fde0 	bl	8008598 <memcpy>
 80009d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80009dc:	4628      	mov	r0, r5
 80009de:	f000 fecf 	bl	8001780 <_ZN7sensors6BNO055C1E17I2C_HandleTypeDef>

  //shared state and controller variables
  state::QuadStateVector sharedState;
  state::QuadControlActions sharedOutput;

  sensorArgs.state = &sharedState;
 80009e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  controllerArgs.state = &sharedState;
 80009e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ec:	677b      	str	r3, [r7, #116]	; 0x74
  controllerArgs.output = &sharedOutput;
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	67bb      	str	r3, [r7, #120]	; 0x78
  actuatorArgs.output = &sharedOutput;
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	66bb      	str	r3, [r7, #104]	; 0x68

    /* USER CODE BEGIN 3 */



	  switch(sys_state){
 80009fa:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80009fe:	2b07      	cmp	r3, #7
 8000a00:	d8fb      	bhi.n	80009fa <main+0x6e>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <main+0x7c>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a29 	.word	0x08000a29
 8000a0c:	08000a51 	.word	0x08000a51
 8000a10:	08000a83 	.word	0x08000a83
 8000a14:	08000aab 	.word	0x08000aab
 8000a18:	08000aef 	.word	0x08000aef
 8000a1c:	08000af7 	.word	0x08000af7
 8000a20:	08000aff 	.word	0x08000aff
 8000a24:	08000b07 	.word	0x08000b07

	  	  case INIT:
	  	  	  {

	  	  		  imu_config_flag = imu.configSensor();
 8000a28:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fec1 	bl	80017b4 <_ZN7sensors6BNO05512configSensorEv>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
	  	  		  sensorArgs.imu = &imu;
 8000a38:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a3c:	663b      	str	r3, [r7, #96]	; 0x60

	  	  		  if(imu_config_flag){
 8000a3e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f000 80b8 	beq.w	8000bb8 <main+0x22c>
	  	  			  sys_state = IMU_CALIB_INIT;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  	  		  }
	  	  	  }
	  		  break;
 8000a4e:	e0b3      	b.n	8000bb8 <main+0x22c>

	  	  case IMU_CALIB_INIT:
	  	  	  {
			  	  //CODE FOR CALIBRATING THE SENSOR
	  		  	  imu_calib_flag = imu.Read_IMU_Calib_Status();
 8000a50:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fed1 	bl	80017fc <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
	  		  	  bool test = imu.Read_Calib_Params();
 8000a60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fef5 	bl	8001854 <_ZN7sensors6BNO05517Read_Calib_ParamsEv>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	  		  	  if(imu_calib_flag){
 8000a70:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	f000 80a1 	beq.w	8000bbc <main+0x230>

	  			  	  sys_state = IMU_CALIB_DONE;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  		  	  }
	  	  	  }
	  		  break;
 8000a80:	e09c      	b.n	8000bbc <main+0x230>
//	  		  break;

	  	  case IMU_CALIB_DONE:
	  	  	  {
	  		  	  //blink an LED, transistion to RTOS
			  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a82:	2120      	movs	r1, #32
 8000a84:	4850      	ldr	r0, [pc, #320]	; (8000bc8 <main+0x23c>)
 8000a86:	f001 fed6 	bl	8002836 <HAL_GPIO_TogglePin>
			  	  //HAL_Delay(1000);
			  	  wait(1000);
 8000a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8e:	f7ff ff65 	bl	800095c <_Z4waiti>
			  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a92:	2120      	movs	r1, #32
 8000a94:	484c      	ldr	r0, [pc, #304]	; (8000bc8 <main+0x23c>)
 8000a96:	f001 fece 	bl	8002836 <HAL_GPIO_TogglePin>
			  	  wait(1000);
 8000a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a9e:	f7ff ff5d 	bl	800095c <_Z4waiti>
			  	  sys_state = MOTOR_INIT;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  	  	  }
	  		  break;
 8000aa8:	e089      	b.n	8000bbe <main+0x232>

	  	  case MOTOR_INIT:
	  	  	  {
	  	  		  osStatus stat = osDelay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f005 fc21 	bl	80062f4 <osDelay>
 8000ab2:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	  	  		  actuators::BLHelis motors(htim8);
 8000ab6:	4e45      	ldr	r6, [pc, #276]	; (8000bcc <main+0x240>)
 8000ab8:	f107 0c18 	add.w	ip, r7, #24
 8000abc:	466d      	mov	r5, sp
 8000abe:	f106 040c 	add.w	r4, r6, #12
 8000ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ace:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ad2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000ad6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000ada:	4660      	mov	r0, ip
 8000adc:	f7ff fd1a 	bl	8000514 <_ZN9actuators7BLHelisC1E17TIM_HandleTypeDef>
	  	  		  actuatorArgs.motors = &motors;
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
	  	  		  //BLHeli_Start(); ?
	  	  		  //BLHeli_Arm(); ?
	  	  		  sys_state = MOTOR_INIT_DONE;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  	  	  }
	  		  break;
 8000aec:	e067      	b.n	8000bbe <main+0x232>

	  	  case MOTOR_INIT_DONE:
	  	  	  {
	  		  	  sys_state = COMMS_INIT;
 8000aee:	2305      	movs	r3, #5
 8000af0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  	  	  }
	  	  	  break;
 8000af4:	e063      	b.n	8000bbe <main+0x232>

	  	  case COMMS_INIT:
	  	  	  {
	  	  		  //communications::NRF24 comms(hspi2);
	  	  		  sys_state = COMMS_INIT_DONE;
 8000af6:	2306      	movs	r3, #6
 8000af8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  	  	  }
	  	  	  break;
 8000afc:	e05f      	b.n	8000bbe <main+0x232>
////	  	  			  HAL_Delay(100);
////	  	  			  if(comms.Payload_Available()){
////	  	  				  comms.Read_Payload();
////	  	  			  }
////	  	  		  }
	  	  		  sys_state = RTOS;
 8000afe:	2307      	movs	r3, #7
 8000b00:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	  	  	  }
	  	  	  break;
 8000b04:	e05b      	b.n	8000bbe <main+0x232>
	  	  	  {

	  	  		  //osKernelInitialize();

	  	  		  //create the mutexes
	  	  		  SemaphoreHandle_t xSharedStateMutex = xSemaphoreCreateBinary();
 8000b06:	2203      	movs	r2, #3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f005 fd22 	bl	8006554 <xQueueGenericCreate>
 8000b10:	4603      	mov	r3, r0
 8000b12:	617b      	str	r3, [r7, #20]
	  	  		  SemaphoreHandle_t xSharedOutputMutex = xSemaphoreCreateBinary();
 8000b14:	2203      	movs	r2, #3
 8000b16:	2100      	movs	r1, #0
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f005 fd1b 	bl	8006554 <xQueueGenericCreate>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	613b      	str	r3, [r7, #16]

	  	  		  //open them
	  	  		  xSemaphoreGive(xSharedStateMutex);
 8000b22:	6978      	ldr	r0, [r7, #20]
 8000b24:	2300      	movs	r3, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f005 fd6d 	bl	8006608 <xQueueGenericSend>
	  	  		  xSemaphoreGive(xSharedOutputMutex);
 8000b2e:	6938      	ldr	r0, [r7, #16]
 8000b30:	2300      	movs	r3, #0
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	f005 fd67 	bl	8006608 <xQueueGenericSend>

	  	  		  controllerArgs.pxSharedOutputMutex = &xSharedOutputMutex;
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  	  		  controllerArgs.pxSharedStateMutex = &xSharedStateMutex;
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	67fb      	str	r3, [r7, #124]	; 0x7c
	  	  		  sensorArgs.pxSharedStateMutex = &xSharedStateMutex;
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	667b      	str	r3, [r7, #100]	; 0x64
	  	  		  actuatorArgs.pxSharedOutputMutex = &xSharedOutputMutex;
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	673b      	str	r3, [r7, #112]	; 0x70
	  	  		  TaskHandle_t xControllerThreadHandle;

	  	  		  BaseType_t xRet;

	  	  		  //create all tasks
	  	  		  xRet = xTaskCreate(threads::sensorThread,
 8000b54:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	9301      	str	r3, [sp, #4]
 8000b5e:	2306      	movs	r3, #6
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	4613      	mov	r3, r2
 8000b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b68:	4919      	ldr	r1, [pc, #100]	; (8000bd0 <main+0x244>)
 8000b6a:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <main+0x248>)
 8000b6c:	f006 f8b5 	bl	8006cda <xTaskCreate>
 8000b70:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	  	  							256,
	  	  							(void*)&sensorArgs,
	  	  							configMAX_PRIORITIES-1,
	  	  							&xSensorThreadHandle);

	  	  		  xRet = xTaskCreate(threads::controllerThread,
 8000b74:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4613      	mov	r3, r2
 8000b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b86:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <main+0x24c>)
 8000b88:	4814      	ldr	r0, [pc, #80]	; (8000bdc <main+0x250>)
 8000b8a:	f006 f8a6 	bl	8006cda <xTaskCreate>
 8000b8e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
									  256,
									  (void*)&controllerArgs,
									  configMAX_PRIORITIES-1,
									  &xControllerThreadHandle);

	  	  		 xRet = xTaskCreate(threads::actuatorThread,
 8000b92:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	490e      	ldr	r1, [pc, #56]	; (8000be0 <main+0x254>)
 8000ba8:	480e      	ldr	r0, [pc, #56]	; (8000be4 <main+0x258>)
 8000baa:	f006 f896 	bl	8006cda <xTaskCreate>
 8000bae:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	  	  							(void*)&actuatorArgs,
									configMAX_PRIORITIES-1,
	  	  							&xActuatorThreadHandle);

	  	  		 //yield to the RTOS
	  	  		 vTaskStartScheduler();
 8000bb2:	f006 fa91 	bl	80070d8 <vTaskStartScheduler>
//		  			  for(int i = 0; i < 10; i++){
//		  				  	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//		  				  	HAL_Delay(500);
//		  			  }

				  }break;
 8000bb6:	e002      	b.n	8000bbe <main+0x232>
	  		  break;
 8000bb8:	bf00      	nop
 8000bba:	e71e      	b.n	80009fa <main+0x6e>
	  		  break;
 8000bbc:	bf00      	nop



	  		  //Kernel_Initialize();

	  }
 8000bbe:	e71c      	b.n	80009fa <main+0x6e>
 8000bc0:	20000528 	.word	0x20000528
 8000bc4:	20000364 	.word	0x20000364
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	20000410 	.word	0x20000410
 8000bd0:	08008760 	.word	0x08008760
 8000bd4:	08002145 	.word	0x08002145
 8000bd8:	08008770 	.word	0x08008770
 8000bdc:	08001fc5 	.word	0x08001fc5
 8000be0:	08008784 	.word	0x08008784
 8000be4:	08001f5d 	.word	0x08001f5d

08000be8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b0ac      	sub	sp, #176	; 0xb0
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bf2:	2234      	movs	r2, #52	; 0x34
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f007 fcdc 	bl	80085b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	225c      	movs	r2, #92	; 0x5c
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f007 fccd 	bl	80085b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <_Z18SystemClock_Configv+0x12c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a3c      	ldr	r2, [pc, #240]	; (8000d14 <_Z18SystemClock_Configv+0x12c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <_Z18SystemClock_Configv+0x12c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <_Z18SystemClock_Configv+0x130>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c42:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <_Z18SystemClock_Configv+0x130>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <_Z18SystemClock_Configv+0x130>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c56:	2301      	movs	r3, #1
 8000c58:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c70:	2308      	movs	r3, #8
 8000c72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c76:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c84:	2307      	movs	r3, #7
 8000c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fc4f 	bl	8004538 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	bf14      	ite	ne
 8000ca0:	2301      	movne	r3, #1
 8000ca2:	2300      	moveq	r3, #0
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8000caa:	f000 faa7 	bl	80011fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cae:	230f      	movs	r3, #15
 8000cb0:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 fd8e 	bl	80037ec <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	bf14      	ite	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	2300      	moveq	r3, #0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8000ce0:	f000 fa8c 	bl	80011fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000cea:	2300      	movs	r3, #0
 8000cec:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fec6 	bl	8003a84 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf14      	ite	ne
 8000cfe:	2301      	movne	r3, #1
 8000d00:	2300      	moveq	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <_Z18SystemClock_Configv+0x124>
  {
    Error_Handler();
 8000d08:	f000 fa78 	bl	80011fc <Error_Handler>
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	37b0      	adds	r7, #176	; 0xb0
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <_ZL12MX_I2C1_Initv+0x60>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <_ZL12MX_I2C1_Initv+0x64>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <_ZL12MX_I2C1_Initv+0x5c>)
 8000d5a:	f001 fd87 	bl	800286c <HAL_I2C_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000d6e:	f000 fa45 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000364 	.word	0x20000364
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	00061a80 	.word	0x00061a80

08000d84 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <_ZL12MX_SPI2_Initv+0x74>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <_ZL12MX_SPI2_Initv+0x70>)
 8000dd6:	f003 fe4d 	bl	8004a74 <HAL_SPI_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	bf14      	ite	ne
 8000de0:	2301      	movne	r3, #1
 8000de2:	2300      	moveq	r3, #0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8000dea:	f000 fa07 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200003b8 	.word	0x200003b8
 8000df8:	40003800 	.word	0x40003800

08000dfc <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b096      	sub	sp, #88	; 0x58
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	615a      	str	r2, [r3, #20]
 8000e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2220      	movs	r2, #32
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f007 fbbd 	bl	80085b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e3a:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e3c:	4a67      	ldr	r2, [pc, #412]	; (8000fdc <_ZL12MX_TIM8_Initv+0x1e0>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 26;
 8000e40:	4b65      	ldr	r3, [pc, #404]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e42:	221a      	movs	r2, #26
 8000e44:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b64      	ldr	r3, [pc, #400]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 62418;
 8000e4c:	4b62      	ldr	r3, [pc, #392]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e4e:	f24f 32d2 	movw	r2, #62418	; 0xf3d2
 8000e52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e5a:	4b5f      	ldr	r3, [pc, #380]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e66:	485c      	ldr	r0, [pc, #368]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e68:	f003 fe8d 	bl	8004b86 <HAL_TIM_Base_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	bf14      	ite	ne
 8000e72:	2301      	movne	r3, #1
 8000e74:	2300      	moveq	r3, #0
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 8000e7c:	f000 f9be 	bl	80011fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4852      	ldr	r0, [pc, #328]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000e8e:	f004 fa8d 	bl	80053ac <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 8000ea2:	f000 f9ab 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000ea6:	484c      	ldr	r0, [pc, #304]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000ea8:	f003 ff94 	bl	8004dd4 <HAL_TIM_PWM_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bf14      	ite	ne
 8000eb2:	2301      	movne	r3, #1
 8000eb4:	2300      	moveq	r3, #0
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 8000ebc:	f000 f99e 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4842      	ldr	r0, [pc, #264]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000ed0:	f004 fe6c 	bl	8005bac <HAL_TIMEx_MasterConfigSynchronization>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	bf14      	ite	ne
 8000eda:	2301      	movne	r3, #1
 8000edc:	2300      	moveq	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 8000ee4:	f000 f98a 	bl	80011fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee8:	2360      	movs	r3, #96	; 0x60
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4832      	ldr	r0, [pc, #200]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000f0e:	f004 f98b 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	bf14      	ite	ne
 8000f18:	2301      	movne	r3, #1
 8000f1a:	2300      	moveq	r3, #0
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <_ZL12MX_TIM8_Initv+0x12a>
  {
    Error_Handler();
 8000f22:	f000 f96b 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	482a      	ldr	r0, [pc, #168]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000f30:	f004 f97a 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf14      	ite	ne
 8000f3a:	2301      	movne	r3, #1
 8000f3c:	2300      	moveq	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <_ZL12MX_TIM8_Initv+0x14c>
  {
    Error_Handler();
 8000f44:	f000 f95a 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4821      	ldr	r0, [pc, #132]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000f52:	f004 f969 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <_ZL12MX_TIM8_Initv+0x16e>
  {
    Error_Handler();
 8000f66:	f000 f949 	bl	80011fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	220c      	movs	r2, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000f74:	f004 f958 	bl	8005228 <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	bf14      	ite	ne
 8000f7e:	2301      	movne	r3, #1
 8000f80:	2300      	moveq	r3, #0
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <_ZL12MX_TIM8_Initv+0x190>
  {
    Error_Handler();
 8000f88:	f000 f938 	bl	80011fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000fb0:	f004 fe78 	bl	8005ca4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZL12MX_TIM8_Initv+0x1cc>
  {
    Error_Handler();
 8000fc4:	f000 f91a 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <_ZL12MX_TIM8_Initv+0x1dc>)
 8000fca:	f000 fa47 	bl	800145c <HAL_TIM_MspPostInit>

}
 8000fce:	bf00      	nop
 8000fd0:	3758      	adds	r7, #88	; 0x58
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000410 	.word	0x20000410
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <_ZL13MX_UART4_Initv+0x58>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001016:	4807      	ldr	r0, [pc, #28]	; (8001034 <_ZL13MX_UART4_Initv+0x54>)
 8001018:	f004 feaa 	bl	8005d70 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf14      	ite	ne
 8001022:	2301      	movne	r3, #1
 8001024:	2300      	moveq	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800102c:	f000 f8e6 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200004a0 	.word	0x200004a0
 8001038:	40004c00 	.word	0x40004c00

0800103c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001074:	f004 fe7c 	bl	8005d70 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	bf14      	ite	ne
 800107e:	2301      	movne	r3, #1
 8001080:	2300      	moveq	r3, #0
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001088:	f000 f8b8 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200004e4 	.word	0x200004e4
 8001094:	40004400 	.word	0x40004400

08001098 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a3d      	ldr	r2, [pc, #244]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b37      	ldr	r3, [pc, #220]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a36      	ldr	r2, [pc, #216]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <_ZL12MX_GPIO_Initv+0x114>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	4823      	ldr	r0, [pc, #140]	; (80011b0 <_ZL12MX_GPIO_Initv+0x118>)
 8001124:	f001 fb6e 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800112e:	4821      	ldr	r0, [pc, #132]	; (80011b4 <_ZL12MX_GPIO_Initv+0x11c>)
 8001130:	f001 fb68 	bl	8002804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800113a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	481b      	ldr	r0, [pc, #108]	; (80011b8 <_ZL12MX_GPIO_Initv+0x120>)
 800114c:	f001 f9ae 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001150:	2320      	movs	r3, #32
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <_ZL12MX_GPIO_Initv+0x118>)
 8001168:	f001 f9a0 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_RX_DR_Pin */
  GPIO_InitStruct.Pin = NRF24_RX_DR_Pin;
 800116c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_RX_DR_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <_ZL12MX_GPIO_Initv+0x118>)
 8001182:	f001 f993 	bl	80024ac <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 8001186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <_ZL12MX_GPIO_Initv+0x11c>)
 80011a0:	f001 f984 	bl	80024ac <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800

080011bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM10){
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d104      	bne.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  counter++;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80011d6:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 80011e2:	f001 f83d 	bl	8002260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40014400 	.word	0x40014400
 80011f4:	20000528 	.word	0x20000528
 80011f8:	40001000 	.word	0x40001000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	e7fe      	b.n	8001204 <Error_Handler+0x8>
	...

08001208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_MspInit+0x54>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <HAL_MspInit+0x54>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x54>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_MspInit+0x54>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_MspInit+0x54>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	; 0x40
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_MspInit+0x54>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	210f      	movs	r1, #15
 800124a:	f06f 0001 	mvn.w	r0, #1
 800124e:	f001 f903 	bl	8002458 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_I2C_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12b      	bne.n	80012da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129e:	23c0      	movs	r3, #192	; 0xc0
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a2:	2312      	movs	r3, #18
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ae:	2304      	movs	r3, #4
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <HAL_I2C_MspInit+0x8c>)
 80012ba:	f001 f8f7 	bl	80024ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 80012c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_I2C_MspInit+0x88>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40005400 	.word	0x40005400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020400 	.word	0x40020400

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <HAL_SPI_MspInit+0xe0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d15a      	bne.n	80013c8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a2e      	ldr	r2, [pc, #184]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a20      	ldr	r2, [pc, #128]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_SPI_MspInit+0xe4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001366:	2302      	movs	r3, #2
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001376:	2307      	movs	r3, #7
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4815      	ldr	r0, [pc, #84]	; (80013d8 <HAL_SPI_MspInit+0xe8>)
 8001382:	f001 f893 	bl	80024ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001386:	2304      	movs	r3, #4
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001396:	2305      	movs	r3, #5
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <HAL_SPI_MspInit+0xe8>)
 80013a2:	f001 f883 	bl	80024ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013b8:	2305      	movs	r3, #5
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_SPI_MspInit+0xec>)
 80013c4:	f001 f872 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40003800 	.word	0x40003800
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_TIM_Base_MspInit+0x70>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d10e      	bne.n	8001410 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_TIM_Base_MspInit+0x74>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a16      	ldr	r2, [pc, #88]	; (8001454 <HAL_TIM_Base_MspInit+0x74>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_TIM_Base_MspInit+0x74>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800140e:	e01a      	b.n	8001446 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_TIM_Base_MspInit+0x78>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d115      	bne.n	8001446 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_TIM_Base_MspInit+0x74>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_TIM_Base_MspInit+0x74>)
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_TIM_Base_MspInit+0x74>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	2019      	movs	r0, #25
 800143c:	f001 f80c 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001440:	2019      	movs	r0, #25
 8001442:	f001 f825 	bl	8002490 <HAL_NVIC_EnableIRQ>
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40010400 	.word	0x40010400
 8001454:	40023800 	.word	0x40023800
 8001458:	40014400 	.word	0x40014400

0800145c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <HAL_TIM_MspPostInit+0x68>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d11e      	bne.n	80014bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_TIM_MspPostInit+0x6c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_TIM_MspPostInit+0x6c>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_TIM_MspPostInit+0x6c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800149a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800149e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80014ac:	2303      	movs	r3, #3
 80014ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_TIM_MspPostInit+0x70>)
 80014b8:	f000 fff8 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40010400 	.word	0x40010400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800

080014d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	; 0x30
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a41      	ldr	r2, [pc, #260]	; (80015f4 <HAL_UART_MspInit+0x124>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d14b      	bne.n	800158a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <HAL_UART_MspInit+0x128>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <HAL_UART_MspInit+0x128>)
 80014fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_UART_MspInit+0x128>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <HAL_UART_MspInit+0x128>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <HAL_UART_MspInit+0x128>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_UART_MspInit+0x128>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b32      	ldr	r3, [pc, #200]	; (80015f8 <HAL_UART_MspInit+0x128>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <HAL_UART_MspInit+0x128>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_UART_MspInit+0x128>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001556:	2308      	movs	r3, #8
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4619      	mov	r1, r3
 8001560:	4826      	ldr	r0, [pc, #152]	; (80015fc <HAL_UART_MspInit+0x12c>)
 8001562:	f000 ffa3 	bl	80024ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001578:	2308      	movs	r3, #8
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	481f      	ldr	r0, [pc, #124]	; (8001600 <HAL_UART_MspInit+0x130>)
 8001584:	f000 ff92 	bl	80024ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001588:	e030      	b.n	80015ec <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_UART_MspInit+0x134>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d12b      	bne.n	80015ec <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_UART_MspInit+0x128>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <HAL_UART_MspInit+0x128>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_UART_MspInit+0x128>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_UART_MspInit+0x128>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a0f      	ldr	r2, [pc, #60]	; (80015f8 <HAL_UART_MspInit+0x128>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <HAL_UART_MspInit+0x128>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015cc:	230c      	movs	r3, #12
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015dc:	2307      	movs	r3, #7
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_UART_MspInit+0x12c>)
 80015e8:	f000 ff60 	bl	80024ac <HAL_GPIO_Init>
}
 80015ec:	bf00      	nop
 80015ee:	3730      	adds	r7, #48	; 0x30
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40004c00 	.word	0x40004c00
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020800 	.word	0x40020800
 8001604:	40004400 	.word	0x40004400

08001608 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <HAL_InitTick+0xe4>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a32      	ldr	r2, [pc, #200]	; (80016ec <HAL_InitTick+0xe4>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_InitTick+0xe4>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001634:	f107 0210 	add.w	r2, r7, #16
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f002 f9ee 	bl	8003a20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	2b00      	cmp	r3, #0
 800164c:	d103      	bne.n	8001656 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800164e:	f002 f9bf 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8001652:	6378      	str	r0, [r7, #52]	; 0x34
 8001654:	e004      	b.n	8001660 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001656:	f002 f9bb 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <HAL_InitTick+0xe8>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	3b01      	subs	r3, #1
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <HAL_InitTick+0xec>)
 8001670:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <HAL_InitTick+0xf0>)
 8001672:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001674:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_InitTick+0xec>)
 8001676:	f240 32e7 	movw	r2, #999	; 0x3e7
 800167a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_InitTick+0xec>)
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_InitTick+0xec>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_InitTick+0xec>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_InitTick+0xec>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001694:	4817      	ldr	r0, [pc, #92]	; (80016f4 <HAL_InitTick+0xec>)
 8001696:	f003 fa76 	bl	8004b86 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11b      	bne.n	80016e0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016a8:	4812      	ldr	r0, [pc, #72]	; (80016f4 <HAL_InitTick+0xec>)
 80016aa:	f003 fb23 	bl	8004cf4 <HAL_TIM_Base_Start_IT>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016bc:	2036      	movs	r0, #54	; 0x36
 80016be:	f000 fee7 	bl	8002490 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d808      	bhi.n	80016da <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	2036      	movs	r0, #54	; 0x36
 80016ce:	f000 fec3 	bl	8002458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0xf4>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e002      	b.n	80016e0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3738      	adds	r7, #56	; 0x38
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40023800 	.word	0x40023800
 80016f0:	431bde83 	.word	0x431bde83
 80016f4:	2000052c 	.word	0x2000052c
 80016f8:	40001000 	.word	0x40001000
 80016fc:	20000010 	.word	0x20000010

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <MemManage_Handler+0x4>

08001712 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <BusFault_Handler+0x4>

08001718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <UsageFault_Handler+0x4>

0800171e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001732:	f003 fc71 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000458 	.word	0x20000458

08001740 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM6_DAC_IRQHandler+0x10>)
 8001746:	f003 fc67 	bl	8005018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000052c 	.word	0x2000052c

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <SystemInit+0x28>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <SystemInit+0x28>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <SystemInit+0x28>)
 800176a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800176e:	609a      	str	r2, [r3, #8]
#endif
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <_ZN7sensors6BNO055C1E17I2C_HandleTypeDef>:
#include "bno055.hpp"
#include "../state/state.hpp"

namespace sensors{

BNO055::BNO055(I2C_HandleTypeDef hi2c1){
 8001780:	b084      	sub	sp, #16
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	f107 0014 	add.w	r0, r7, #20
 800178e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->i2c = hi2c1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	2254      	movs	r2, #84	; 0x54
 800179c:	4619      	mov	r1, r3
 800179e:	f006 fefb 	bl	8008598 <memcpy>
}
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ae:	b004      	add	sp, #16
 80017b0:	4770      	bx	lr
	...

080017b4 <_ZN7sensors6BNO05512configSensorEv>:

bool BNO055::configSensor(void){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	6078      	str	r0, [r7, #4]

	static uint8_t op_mode = IMU_OP_MODE;

	HAL_StatusTypeDef hal_status = HAL_I2C_Mem_Write(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_CONFIG_R, I2C_MEMADD_SIZE_8BIT, &op_mode, I2C_MEMADD_SIZE_8BIT, (uint32_t)1000);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	2301      	movs	r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <_ZN7sensors6BNO05512configSensorEv+0x44>)
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	223d      	movs	r2, #61	; 0x3d
 80017d0:	2150      	movs	r1, #80	; 0x50
 80017d2:	f001 f98f 	bl	8002af4 <HAL_I2C_Mem_Write>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]


	if(hal_status == HAL_BUSY){
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d106      	bne.n	80017ee <_ZN7sensors6BNO05512configSensorEv+0x3a>

		//i2c dead lock, BNO055 is holding the bus
		this->I2C1_ClearBusyFlagErratum(&(this->i2c));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fa9b 	bl	8001d20 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef>
		return false;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <_ZN7sensors6BNO05512configSensorEv+0x3c>
	}

	//add in a delay to allow for the sensor to properly switch operating modes
	//HAL_Delay(100);

	return true;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000000c 	.word	0x2000000c

080017fc <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv>:

bool BNO055::Read_IMU_Calib_Status(void){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
	static uint16_t calib_stat_address = 0x35;
	static uint8_t IMU_full_calib = 0x3C;
	static uint8_t calib;
	static HAL_StatusTypeDef hal_status;

	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_CALIB_STAT_R, I2C_MEMADD_SIZE_8BIT, &calib, I2C_MEMADD_SIZE_8BIT, (uint32_t)1000000);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x4c>)
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x50>)
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	2235      	movs	r2, #53	; 0x35
 8001816:	2150      	movs	r1, #80	; 0x50
 8001818:	f001 fa66 	bl	8002ce8 <HAL_I2C_Mem_Read>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x54>)
 8001822:	701a      	strb	r2, [r3, #0]

	if(hal_status != HAL_OK){
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x54>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x34>

		return false;
 800182c:	2300      	movs	r3, #0
 800182e:	e006      	b.n	800183e <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x42>

	}
	else{

		//value of 3C means full calibration
		if(calib == IMU_FULL_CALIB){
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x50>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b3c      	cmp	r3, #60	; 0x3c
 8001836:	d101      	bne.n	800183c <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x40>

			return true;
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x42>

		}
		else{

			return false;
 800183c:	2300      	movs	r3, #0

		}
	}

}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	000f4240 	.word	0x000f4240
 800184c:	20000574 	.word	0x20000574
 8001850:	20000575 	.word	0x20000575

08001854 <_ZN7sensors6BNO05517Read_Calib_ParamsEv>:
	}

}


bool BNO055::Read_Calib_Params(void){
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af04      	add	r7, sp, #16
 800185a:	6078      	str	r0, [r7, #4]
	static uint8_t axo_lsb, axo_msb, ayo_lsb, ayo_msb, azo_lsb, azo_msb;
	static uint8_t gxo_lsb, gxo_msb, gyo_lsb, gyo_msb, gzo_lsb, gzo_msb;
	static HAL_StatusTypeDef hal_status;


	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_X_LSB_R, I2C_MEMADD_SIZE_8BIT, &axo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	2319      	movs	r3, #25
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	4b87      	ldr	r3, [pc, #540]	; (8001a84 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x230>)
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2301      	movs	r3, #1
 800186c:	2255      	movs	r2, #85	; 0x55
 800186e:	2150      	movs	r1, #80	; 0x50
 8001870:	f001 fa3a 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	4b83      	ldr	r3, [pc, #524]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 800187a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_X_MSB_R, I2C_MEMADD_SIZE_8BIT, &axo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	2319      	movs	r3, #25
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2301      	movs	r3, #1
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x238>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	2256      	movs	r2, #86	; 0x56
 800188e:	2150      	movs	r1, #80	; 0x50
 8001890:	f001 fa2a 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	4b7b      	ldr	r3, [pc, #492]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 800189a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Y_LSB_R, I2C_MEMADD_SIZE_8BIT, &ayo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	2319      	movs	r3, #25
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x23c>)
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2301      	movs	r3, #1
 80018ac:	2257      	movs	r2, #87	; 0x57
 80018ae:	2150      	movs	r1, #80	; 0x50
 80018b0:	f001 fa1a 	bl	8002ce8 <HAL_I2C_Mem_Read>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 80018ba:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Y_MSB_R, I2C_MEMADD_SIZE_8BIT, &ayo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	2319      	movs	r3, #25
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2301      	movs	r3, #1
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x240>)
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	2258      	movs	r2, #88	; 0x58
 80018ce:	2150      	movs	r1, #80	; 0x50
 80018d0:	f001 fa0a 	bl	8002ce8 <HAL_I2C_Mem_Read>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b6b      	ldr	r3, [pc, #428]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 80018da:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Z_LSB_R, I2C_MEMADD_SIZE_8BIT, &azo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	2319      	movs	r3, #25
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2301      	movs	r3, #1
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x244>)
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2301      	movs	r3, #1
 80018ec:	2259      	movs	r2, #89	; 0x59
 80018ee:	2150      	movs	r1, #80	; 0x50
 80018f0:	f001 f9fa 	bl	8002ce8 <HAL_I2C_Mem_Read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 80018fa:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Z_MSB_R, I2C_MEMADD_SIZE_8BIT, &azo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	2319      	movs	r3, #25
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	2301      	movs	r3, #1
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x248>)
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	2260      	movs	r2, #96	; 0x60
 800190e:	2150      	movs	r1, #80	; 0x50
 8001910:	f001 f9ea 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 800191a:	701a      	strb	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_X_LSB_R, I2C_MEMADD_SIZE_8BIT, &gxo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	2319      	movs	r3, #25
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	4b5e      	ldr	r3, [pc, #376]	; (8001aa0 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2261      	movs	r2, #97	; 0x61
 800192e:	2150      	movs	r1, #80	; 0x50
 8001930:	f001 f9da 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 800193a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_X_MSB_R, I2C_MEMADD_SIZE_8BIT, &gxo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	2319      	movs	r3, #25
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	2301      	movs	r3, #1
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x250>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2301      	movs	r3, #1
 800194c:	2262      	movs	r2, #98	; 0x62
 800194e:	2150      	movs	r1, #80	; 0x50
 8001950:	f001 f9ca 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 800195a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Y_LSB_R, I2C_MEMADD_SIZE_8BIT, &gyo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	2319      	movs	r3, #25
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	2301      	movs	r3, #1
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x254>)
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2301      	movs	r3, #1
 800196c:	2263      	movs	r2, #99	; 0x63
 800196e:	2150      	movs	r1, #80	; 0x50
 8001970:	f001 f9ba 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001974:	4603      	mov	r3, r0
 8001976:	461a      	mov	r2, r3
 8001978:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 800197a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Y_MSB_R, I2C_MEMADD_SIZE_8BIT, &gyo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	2319      	movs	r3, #25
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	2301      	movs	r3, #1
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x258>)
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	2264      	movs	r2, #100	; 0x64
 800198e:	2150      	movs	r1, #80	; 0x50
 8001990:	f001 f9aa 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 800199a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Z_LSB_R, I2C_MEMADD_SIZE_8BIT, &gzo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	2319      	movs	r3, #25
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x25c>)
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2301      	movs	r3, #1
 80019ac:	2265      	movs	r2, #101	; 0x65
 80019ae:	2150      	movs	r1, #80	; 0x50
 80019b0:	f001 f99a 	bl	8002ce8 <HAL_I2C_Mem_Read>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 80019ba:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Z_MSB_R, I2C_MEMADD_SIZE_8BIT, &gzo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	2319      	movs	r3, #25
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	2301      	movs	r3, #1
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x260>)
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	2266      	movs	r2, #102	; 0x66
 80019ce:	2150      	movs	r1, #80	; 0x50
 80019d0:	f001 f98a 	bl	8002ce8 <HAL_I2C_Mem_Read>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 80019da:	701a      	strb	r2, [r3, #0]

	uint16_t axo = (axo_msb << 8) | axo_lsb;
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x238>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x230>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	83fb      	strh	r3, [r7, #30]
	uint16_t ayo = (ayo_msb << 8) | ayo_lsb;
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x240>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x23c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	83bb      	strh	r3, [r7, #28]
	uint16_t azo = (azo_msb << 8) | azo_lsb;
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x248>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	b21a      	sxth	r2, r3
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x244>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	837b      	strh	r3, [r7, #26]

	uint16_t gxo = (gxo_msb << 8) | gxo_lsb;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x250>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	833b      	strh	r3, [r7, #24]
	uint16_t gyo = (gyo_msb << 8) | gyo_lsb;
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x258>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x254>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	82fb      	strh	r3, [r7, #22]
	uint16_t gzo = (gzo_msb << 8) | gzo_lsb;
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x260>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x25c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	82bb      	strh	r3, [r7, #20]

	uint16_t offsets[6];
	offsets[0] = axo;
 8001a54:	8bfb      	ldrh	r3, [r7, #30]
 8001a56:	813b      	strh	r3, [r7, #8]
	offsets[1] = ayo;
 8001a58:	8bbb      	ldrh	r3, [r7, #28]
 8001a5a:	817b      	strh	r3, [r7, #10]
	offsets[2] = azo;
 8001a5c:	8b7b      	ldrh	r3, [r7, #26]
 8001a5e:	81bb      	strh	r3, [r7, #12]
	offsets[3] = gxo;
 8001a60:	8b3b      	ldrh	r3, [r7, #24]
 8001a62:	81fb      	strh	r3, [r7, #14]
	offsets[4] = gyo;
 8001a64:	8afb      	ldrh	r3, [r7, #22]
 8001a66:	823b      	strh	r3, [r7, #16]
	offsets[5] = gzo;
 8001a68:	8abb      	ldrh	r3, [r7, #20]
 8001a6a:	827b      	strh	r3, [r7, #18]


	if(hal_status != HAL_OK){
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x234>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x224>
		return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x226>
	}
	else{
		return true;
 8001a78:	2301      	movs	r3, #1
	}

}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3720      	adds	r7, #32
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000576 	.word	0x20000576
 8001a88:	20000582 	.word	0x20000582
 8001a8c:	20000577 	.word	0x20000577
 8001a90:	20000578 	.word	0x20000578
 8001a94:	20000579 	.word	0x20000579
 8001a98:	2000057a 	.word	0x2000057a
 8001a9c:	2000057b 	.word	0x2000057b
 8001aa0:	2000057c 	.word	0x2000057c
 8001aa4:	2000057d 	.word	0x2000057d
 8001aa8:	2000057e 	.word	0x2000057e
 8001aac:	2000057f 	.word	0x2000057f
 8001ab0:	20000580 	.word	0x20000580
 8001ab4:	20000581 	.word	0x20000581

08001ab8 <_ZN7sensors6BNO0557readIMUEv>:

state::QuadStateVector& BNO055::readIMU(void){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af04      	add	r7, sp, #16
 8001abe:	6078      	str	r0, [r7, #4]
	static uint8_t gx_lsb, gx_msb, gy_lsb, gy_msb, gz_lsb, gz_msb;

	static state::QuadStateVector sample_i = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	static HAL_StatusTypeDef hal_status;

	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_X_LSB_R, 1, &ax_lsb, 1, 25);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	2319      	movs	r3, #25
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	4b87      	ldr	r3, [pc, #540]	; (8001ce8 <_ZN7sensors6BNO0557readIMUEv+0x230>)
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	2150      	movs	r1, #80	; 0x50
 8001ad4:	f001 f908 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b83      	ldr	r3, [pc, #524]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001ade:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_X_MSB_R, 1, &ax_msb, 1, 25);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	2319      	movs	r3, #25
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <_ZN7sensors6BNO0557readIMUEv+0x238>)
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2301      	movs	r3, #1
 8001af0:	2209      	movs	r2, #9
 8001af2:	2150      	movs	r1, #80	; 0x50
 8001af4:	f001 f8f8 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001afe:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Y_LSB_R, 1, &ay_lsb, 1, 25);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	2319      	movs	r3, #25
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	4b7a      	ldr	r3, [pc, #488]	; (8001cf4 <_ZN7sensors6BNO0557readIMUEv+0x23c>)
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	220a      	movs	r2, #10
 8001b12:	2150      	movs	r1, #80	; 0x50
 8001b14:	f001 f8e8 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001b1e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Y_MSB_R, 1, &ay_msb, 1, 25);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	2319      	movs	r3, #25
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	2301      	movs	r3, #1
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <_ZN7sensors6BNO0557readIMUEv+0x240>)
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	220b      	movs	r2, #11
 8001b32:	2150      	movs	r1, #80	; 0x50
 8001b34:	f001 f8d8 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001b3e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Z_LSB_R, 1, &az_lsb, 1, 25);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	2319      	movs	r3, #25
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	4b6c      	ldr	r3, [pc, #432]	; (8001cfc <_ZN7sensors6BNO0557readIMUEv+0x244>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	220c      	movs	r2, #12
 8001b52:	2150      	movs	r1, #80	; 0x50
 8001b54:	f001 f8c8 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001b5e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Z_MSB_R, 1, &az_msb, 1, 25);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	2319      	movs	r3, #25
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <_ZN7sensors6BNO0557readIMUEv+0x248>)
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	220d      	movs	r2, #13
 8001b72:	2150      	movs	r1, #80	; 0x50
 8001b74:	f001 f8b8 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001b7e:	701a      	strb	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_X_LSB_R, 1, &gx_lsb, 1, 25);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	2319      	movs	r3, #25
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	2301      	movs	r3, #1
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2214      	movs	r2, #20
 8001b92:	2150      	movs	r1, #80	; 0x50
 8001b94:	f001 f8a8 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001b9e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_X_MSB_R, 1, &gx_msb, 1, 25);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	2319      	movs	r3, #25
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <_ZN7sensors6BNO0557readIMUEv+0x250>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2215      	movs	r2, #21
 8001bb2:	2150      	movs	r1, #80	; 0x50
 8001bb4:	f001 f898 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001bbe:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Y_LSB_R, 1, &gy_lsb, 1, 25);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	2319      	movs	r3, #25
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <_ZN7sensors6BNO0557readIMUEv+0x254>)
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2216      	movs	r2, #22
 8001bd2:	2150      	movs	r1, #80	; 0x50
 8001bd4:	f001 f888 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b43      	ldr	r3, [pc, #268]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001bde:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Y_MSB_R, 1, &gy_msb, 1, 25);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	2319      	movs	r3, #25
 8001be4:	9302      	str	r3, [sp, #8]
 8001be6:	2301      	movs	r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <_ZN7sensors6BNO0557readIMUEv+0x258>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	2217      	movs	r2, #23
 8001bf2:	2150      	movs	r1, #80	; 0x50
 8001bf4:	f001 f878 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001bfe:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Z_LSB_R, 1, &gz_lsb, 1, 25);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	2319      	movs	r3, #25
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <_ZN7sensors6BNO0557readIMUEv+0x25c>)
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	2218      	movs	r2, #24
 8001c12:	2150      	movs	r1, #80	; 0x50
 8001c14:	f001 f868 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b33      	ldr	r3, [pc, #204]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001c1e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read(&(this->i2c), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Z_MSB_R, 1, &gz_msb, 1, 25);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	2319      	movs	r3, #25
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	2301      	movs	r3, #1
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <_ZN7sensors6BNO0557readIMUEv+0x260>)
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2219      	movs	r2, #25
 8001c32:	2150      	movs	r1, #80	; 0x50
 8001c34:	f001 f858 	bl	8002ce8 <HAL_I2C_Mem_Read>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <_ZN7sensors6BNO0557readIMUEv+0x234>)
 8001c3e:	701a      	strb	r2, [r3, #0]

	sample_i.dx = ((ax_msb << 8) | ax_lsb);
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <_ZN7sensors6BNO0557readIMUEv+0x238>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <_ZN7sensors6BNO0557readIMUEv+0x230>)
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	ee07 3a90 	vmov	s15, r3
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001c56:	edc3 7a07 	vstr	s15, [r3, #28]
	sample_i.dy = ((ay_msb << 8) | ay_lsb);
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <_ZN7sensors6BNO0557readIMUEv+0x240>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <_ZN7sensors6BNO0557readIMUEv+0x23c>)
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	ee07 3a90 	vmov	s15, r3
 8001c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6e:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001c70:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	sample_i.dz = ((az_msb << 8) | az_lsb);
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <_ZN7sensors6BNO0557readIMUEv+0x248>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <_ZN7sensors6BNO0557readIMUEv+0x244>)
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001c8a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	sample_i.dpsi = ((gx_msb << 8) | gx_lsb);
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <_ZN7sensors6BNO0557readIMUEv+0x250>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001ca4:	edc3 7a05 	vstr	s15, [r3, #20]
	sample_i.dtheta = ((gy_msb << 8) | gy_lsb);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <_ZN7sensors6BNO0557readIMUEv+0x258>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <_ZN7sensors6BNO0557readIMUEv+0x254>)
 8001cb0:	7812      	ldrb	r2, [r2, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001cbe:	edc3 7a03 	vstr	s15, [r3, #12]
	sample_i.dphi = ((gz_msb << 8) | gz_lsb);
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_ZN7sensors6BNO0557readIMUEv+0x260>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <_ZN7sensors6BNO0557readIMUEv+0x25c>)
 8001cca:	7812      	ldrb	r2, [r2, #0]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	ee07 3a90 	vmov	s15, r3
 8001cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001cd8:	edc3 7a01 	vstr	s15, [r3, #4]

	return sample_i;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <_ZN7sensors6BNO0557readIMUEv+0x264>)

}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000583 	.word	0x20000583
 8001cec:	200005c0 	.word	0x200005c0
 8001cf0:	20000584 	.word	0x20000584
 8001cf4:	20000585 	.word	0x20000585
 8001cf8:	20000586 	.word	0x20000586
 8001cfc:	20000587 	.word	0x20000587
 8001d00:	20000588 	.word	0x20000588
 8001d04:	20000589 	.word	0x20000589
 8001d08:	2000058a 	.word	0x2000058a
 8001d0c:	2000058b 	.word	0x2000058b
 8001d10:	2000058c 	.word	0x2000058c
 8001d14:	2000058d 	.word	0x2000058d
 8001d18:	2000058e 	.word	0x2000058e
 8001d1c:	20000590 	.word	0x20000590

08001d20 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef>:
//}


//FROM https://electronics.stackexchange.com/questions/351972/hal-i2c-hangs-cannot-be-solved-with-standard-routine-use-to-unlock-i2c/351977
void BNO055::I2C1_ClearBusyFlagErratum(I2C_HandleTypeDef *instance)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct;
    int timeout =100;
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	623b      	str	r3, [r7, #32]
    int timeout_cnt=0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24

    // 1. Clear PE bit.
    instance->Instance->CR1 &= ~(0x0001);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 8001d42:	2311      	movs	r3, #17
 8001d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 8001d46:	2304      	movs	r3, #4
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
 8001d52:	2340      	movs	r3, #64	; 0x40
 8001d54:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	487e      	ldr	r0, [pc, #504]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001d5e:	f000 fba5 	bl	80024ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	487c      	ldr	r0, [pc, #496]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001d68:	f000 fd4c 	bl	8002804 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin          = I2C1_SDA_PIN;
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8001d70:	f107 030c 	add.w	r3, r7, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4878      	ldr	r0, [pc, #480]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001d78:	f000 fb98 	bl	80024ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	4875      	ldr	r0, [pc, #468]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001d82:	f000 fd3f 	bl	8002804 <HAL_GPIO_WritePin>


    // 3. Check SCL and SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	4873      	ldr	r0, [pc, #460]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001d8a:	f000 fd23 	bl	80027d4 <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d008      	beq.n	8001db0 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x90>
    {
        timeout_cnt++;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3301      	adds	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f300 80c6 	bgt.w	8001f3a <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x21a>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8001dae:	e7ea      	b.n	8001d86 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x66>
            return;
    }

    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	4869      	ldr	r0, [pc, #420]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001db4:	f000 fd0e 	bl	80027d4 <HAL_GPIO_ReadPin>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	bf14      	ite	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	2300      	moveq	r3, #0
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0xd0>
    {
        //Move clock to release I2C
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	4862      	ldr	r0, [pc, #392]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001dce:	f000 fd19 	bl	8002804 <HAL_GPIO_WritePin>
        asm("nop");
 8001dd2:	bf00      	nop
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	485f      	ldr	r0, [pc, #380]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001dda:	f000 fd13 	bl	8002804 <HAL_GPIO_WritePin>

        timeout_cnt++;
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	3301      	adds	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	f300 80a8 	bgt.w	8001f3e <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x21e>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8001dee:	e7df      	b.n	8001db0 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x90>
            return;
    }

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	4858      	ldr	r0, [pc, #352]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001df6:	f000 fd05 	bl	8002804 <HAL_GPIO_WritePin>

    //  5. Check SDA Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	4856      	ldr	r0, [pc, #344]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001dfe:	f000 fce9 	bl	80027d4 <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d008      	beq.n	8001e24 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x104>
    {
        timeout_cnt++;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	3301      	adds	r3, #1
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8001e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f300 8090 	bgt.w	8001f42 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x222>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8001e22:	e7ea      	b.n	8001dfa <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0xda>
            return;
    }

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2140      	movs	r1, #64	; 0x40
 8001e28:	484b      	ldr	r0, [pc, #300]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001e2a:	f000 fceb 	bl	8002804 <HAL_GPIO_WritePin>

    //  7. Check SCL Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8001e2e:	2140      	movs	r1, #64	; 0x40
 8001e30:	4849      	ldr	r0, [pc, #292]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001e32:	f000 fccf 	bl	80027d4 <HAL_GPIO_ReadPin>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x136>
    {
        timeout_cnt++;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8001e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dc78      	bgt.n	8001f46 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x226>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8001e54:	e7eb      	b.n	8001e2e <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x10e>
            return;
    }

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2140      	movs	r1, #64	; 0x40
 8001e5a:	483f      	ldr	r0, [pc, #252]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001e5c:	f000 fcd2 	bl	8002804 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8001e60:	2140      	movs	r1, #64	; 0x40
 8001e62:	483d      	ldr	r0, [pc, #244]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001e64:	f000 fcb6 	bl	80027d4 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x168>
    {
        timeout_cnt++;
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dc61      	bgt.n	8001f4a <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x22a>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8001e86:	e7eb      	b.n	8001e60 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x140>
            return;
    }

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	4832      	ldr	r0, [pc, #200]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001e8e:	f000 fcb9 	bl	8002804 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	4830      	ldr	r0, [pc, #192]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001e96:	f000 fc9d 	bl	80027d4 <HAL_GPIO_ReadPin>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x19a>
    {
        timeout_cnt++;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	3301      	adds	r3, #1
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dc4a      	bgt.n	8001f4e <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x22e>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8001eb8:	e7eb      	b.n	8001e92 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x172>
            return;
    }

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	61fb      	str	r3, [r7, #28]

    GPIO_InitStruct.Pin = I2C1_SCL_PIN;
 8001eca:	2340      	movs	r3, #64	; 0x40
 8001ecc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4820      	ldr	r0, [pc, #128]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001ed6:	f000 fae9 	bl	80024ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_PIN;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	481c      	ldr	r0, [pc, #112]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001ee6:	f000 fae1 	bl	80024ac <HAL_GPIO_Init>

    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	481a      	ldr	r0, [pc, #104]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001ef0:	f000 fc88 	bl	8002804 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	4817      	ldr	r0, [pc, #92]	; (8001f58 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x238>)
 8001efa:	f000 fc83 	bl	8002804 <HAL_GPIO_WritePin>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 |= 0x8000;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f0c:	601a      	str	r2, [r3, #0]

    asm("nop");
 8001f0e:	bf00      	nop

    // 14. Clear SWRST bit in I2Cx_CR1 register.
    instance->Instance->CR1 &= ~0x8000;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f1e:	601a      	str	r2, [r3, #0]

    asm("nop");
 8001f20:	bf00      	nop

    // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
    instance->Instance->CR1 |= 0x0001;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    // Call initialization function.
    HAL_I2C_Init(instance);
 8001f32:	6838      	ldr	r0, [r7, #0]
 8001f34:	f000 fc9a 	bl	800286c <HAL_I2C_Init>
 8001f38:	e00a      	b.n	8001f50 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x230>
            return;
 8001f3a:	bf00      	nop
 8001f3c:	e008      	b.n	8001f50 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x230>
            return;
 8001f3e:	bf00      	nop
 8001f40:	e006      	b.n	8001f50 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x230>
            return;
 8001f42:	bf00      	nop
 8001f44:	e004      	b.n	8001f50 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x230>
            return;
 8001f46:	bf00      	nop
 8001f48:	e002      	b.n	8001f50 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x230>
            return;
 8001f4a:	bf00      	nop
 8001f4c:	e000      	b.n	8001f50 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEP17I2C_HandleTypeDef+0x230>
            return;
 8001f4e:	bf00      	nop
}
 8001f50:	3728      	adds	r7, #40	; 0x28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020400 	.word	0x40020400

08001f5c <_ZN7threads14actuatorThreadEPv>:
#include "actuatorthread.hpp"

namespace threads{


void actuatorThread(void* pvParameters){
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b08d      	sub	sp, #52	; 0x34
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

	state::QuadControlActions* globalOutputRef = ((actuatorThreadArgs*)pvParameters)->output;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	actuators::BLHelis* motorsRef = ((actuatorThreadArgs*)pvParameters)->motors;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	state::QuadControlActions localOutput;
	SemaphoreHandle_t xSharedOutputMutex = *(((actuatorThreadArgs*)pvParameters)->pxSharedOutputMutex);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
	const TickType_t xFrequency = 1000; //scheduler is running at 1Khz, this thread will be able to run at that freq too
 8001f78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7c:	623b      	str	r3, [r7, #32]
	TickType_t xLastWakeTime;

	while(1){

		xLastWakeTime = xTaskGetTickCount();
 8001f7e:	f005 f9bf 	bl	8007300 <xTaskGetTickCount>
 8001f82:	4603      	mov	r3, r0
 8001f84:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 fff0 	bl	8006f74 <vTaskDelayUntil>

		//get measurement
		xSemaphoreTake(xSharedOutputMutex, (TickType_t)0);
 8001f94:	2100      	movs	r1, #0
 8001f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f98:	f004 fc34 	bl	8006804 <xQueueSemaphoreTake>
		localOutput = *globalOutputRef; //copy the output into local var then release
 8001f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9e:	f107 0410 	add.w	r4, r7, #16
 8001fa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedOutputMutex);
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb0:	f004 fb2a 	bl	8006608 <xQueueGenericSend>

		motorsRef->actuateMotors(localOutput);
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fbc:	f7fe fb88 	bl	80006d0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE>
		xLastWakeTime = xTaskGetTickCount();
 8001fc0:	e7dd      	b.n	8001f7e <_ZN7threads14actuatorThreadEPv+0x22>
	...

08001fc4 <_ZN7threads16controllerThreadEPv>:

#include "controllerthread.hpp"

namespace threads{

void controllerThread(void* pvParameters){
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b0a8      	sub	sp, #160	; 0xa0
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]


	control::PI thrustController = control::PI(0, 0.1, 10, 2);
 8001fcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fd0:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001fd4:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001fd8:	eddf 0a58 	vldr	s1, [pc, #352]	; 800213c <_ZN7threads16controllerThreadEPv+0x178>
 8001fdc:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8002140 <_ZN7threads16controllerThreadEPv+0x17c>
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fc26 	bl	8000832 <_ZN7control2PIC1Effff>
	control::PI yawController = control::PI(0, 0.1, 10, 2);
 8001fe6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fea:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001fee:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001ff2:	eddf 0a52 	vldr	s1, [pc, #328]	; 800213c <_ZN7threads16controllerThreadEPv+0x178>
 8001ff6:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8002140 <_ZN7threads16controllerThreadEPv+0x17c>
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fc19 	bl	8000832 <_ZN7control2PIC1Effff>
	control::PI rollController = control::PI(0, 0.1, 10, 2);
 8002000:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002004:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002008:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800200c:	eddf 0a4b 	vldr	s1, [pc, #300]	; 800213c <_ZN7threads16controllerThreadEPv+0x178>
 8002010:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8002140 <_ZN7threads16controllerThreadEPv+0x17c>
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fc0c 	bl	8000832 <_ZN7control2PIC1Effff>
	control::PI pitchController = control::PI(0, 0.1, 10, 2);
 800201a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800201e:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002022:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8002026:	eddf 0a45 	vldr	s1, [pc, #276]	; 800213c <_ZN7threads16controllerThreadEPv+0x178>
 800202a:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8002140 <_ZN7threads16controllerThreadEPv+0x17c>
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fbff 	bl	8000832 <_ZN7control2PIC1Effff>
	state::QuadStateVector localState;
	state::QuadControlActions localOutput;
	state::QuadStateVector* globalStateRef = ((controllerThreadArgs*)pvParameters)->state;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	state::QuadControlActions* globalOutputRef = ((controllerThreadArgs*)pvParameters)->output;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	SemaphoreHandle_t xSharedStateMutex = *(((controllerThreadArgs*)pvParameters)->pxSharedStateMutex);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	SemaphoreHandle_t xSharedOutputMutex = *(((controllerThreadArgs*)pvParameters)->pxSharedOutputMutex);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const TickType_t xFrequency = 1000;
 8002058:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800205c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	TickType_t xLastWakeTime;

	while(1){
		xLastWakeTime = xTaskGetTickCount();
 8002060:	f005 f94e 	bl	8007300 <xTaskGetTickCount>
 8002064:	4603      	mov	r3, r0
 8002066:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks than instantly returns
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002070:	4618      	mov	r0, r3
 8002072:	f004 ff7f 	bl	8006f74 <vTaskDelayUntil>

		xSemaphoreTake(xSharedStateMutex, (TickType_t) 0); //nonblocking
 8002076:	2100      	movs	r1, #0
 8002078:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800207c:	f004 fbc2 	bl	8006804 <xQueueSemaphoreTake>
		localState = *globalStateRef;
 8002080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002084:	f107 041c 	add.w	r4, r7, #28
 8002088:	461d      	mov	r5, r3
 800208a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800208c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002092:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedStateMutex);
 800209a:	2300      	movs	r3, #0
 800209c:	2200      	movs	r2, #0
 800209e:	2100      	movs	r1, #0
 80020a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80020a4:	f004 fab0 	bl	8006608 <xQueueGenericSend>


		localOutput.u1 = thrustController.calcOutput(localState.z);
 80020a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020b0:	eeb0 0a67 	vmov.f32	s0, s15
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fbdb 	bl	8000870 <_ZN7control2PI10calcOutputEf>
 80020ba:	eef0 7a40 	vmov.f32	s15, s0
 80020be:	edc7 7a03 	vstr	s15, [r7, #12]
		localOutput.u2 = rollController.calcOutput(localState.psi);
 80020c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020ca:	eeb0 0a67 	vmov.f32	s0, s15
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fbce 	bl	8000870 <_ZN7control2PI10calcOutputEf>
 80020d4:	eef0 7a40 	vmov.f32	s15, s0
 80020d8:	edc7 7a04 	vstr	s15, [r7, #16]
		localOutput.u3 = pitchController.calcOutput(localState.theta);
 80020dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80020e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fbc1 	bl	8000870 <_ZN7control2PI10calcOutputEf>
 80020ee:	eef0 7a40 	vmov.f32	s15, s0
 80020f2:	edc7 7a05 	vstr	s15, [r7, #20]
		localOutput.u4 = yawController.calcOutput(localState.phi);
 80020f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fbb4 	bl	8000870 <_ZN7control2PI10calcOutputEf>
 8002108:	eef0 7a40 	vmov.f32	s15, s0
 800210c:	edc7 7a06 	vstr	s15, [r7, #24]

		xSemaphoreTake(xSharedOutputMutex, (TickType_t) 0);
 8002110:	2100      	movs	r1, #0
 8002112:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002116:	f004 fb75 	bl	8006804 <xQueueSemaphoreTake>
		*globalOutputRef = localOutput;
 800211a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800211e:	461c      	mov	r4, r3
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedOutputMutex);
 800212a:	2300      	movs	r3, #0
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002134:	f004 fa68 	bl	8006608 <xQueueGenericSend>
		xLastWakeTime = xTaskGetTickCount();
 8002138:	e792      	b.n	8002060 <_ZN7threads16controllerThreadEPv+0x9c>
 800213a:	bf00      	nop
 800213c:	3dcccccd 	.word	0x3dcccccd
 8002140:	00000000 	.word	0x00000000

08002144 <_ZN7threads12sensorThreadEPv>:
#include "FreeRTOS.h"

namespace threads{


void sensorThread(void* pvParameters){
 8002144:	b5b0      	push	{r4, r5, r7, lr}
 8002146:	b094      	sub	sp, #80	; 0x50
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

	state::QuadStateVector localState;
	state::QuadStateVector* globalStateRef = ((sensorThreadArgs*)pvParameters)->state;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	64fb      	str	r3, [r7, #76]	; 0x4c
	sensors::BNO055* imuRef = ((sensorThreadArgs*)pvParameters)->imu;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	64bb      	str	r3, [r7, #72]	; 0x48
	SemaphoreHandle_t xSharedStateMutex = *(((sensorThreadArgs*)pvParameters)->pxSharedStateMutex);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	647b      	str	r3, [r7, #68]	; 0x44
	const TickType_t xFrequency = 1000; //scheduler is running at 1Khz, this thread will be able to run at that freq too
 8002160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
	TickType_t xLastWakeTime;


	while(1){

		xLastWakeTime = xTaskGetTickCount();
 8002166:	f005 f8cb 	bl	8007300 <xTaskGetTickCount>
 800216a:	4603      	mov	r3, r0
 800216c:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fefc 	bl	8006f74 <vTaskDelayUntil>


		localState = imuRef->readIMU();
 800217c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800217e:	f7ff fc9b 	bl	8001ab8 <_ZN7sensors6BNO0557readIMUEv>
 8002182:	4603      	mov	r3, r0
 8002184:	f107 0410 	add.w	r4, r7, #16
 8002188:	461d      	mov	r5, r3
 800218a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002192:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		xSemaphoreTake(xSharedStateMutex, (TickType_t) 0);
 800219a:	2100      	movs	r1, #0
 800219c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800219e:	f004 fb31 	bl	8006804 <xQueueSemaphoreTake>
		*globalStateRef = localState;
 80021a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a4:	461d      	mov	r5, r3
 80021a6:	f107 0410 	add.w	r4, r7, #16
 80021aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedStateMutex);
 80021ba:	2300      	movs	r3, #0
 80021bc:	2200      	movs	r2, #0
 80021be:	2100      	movs	r1, #0
 80021c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80021c2:	f004 fa21 	bl	8006608 <xQueueGenericSend>
		xLastWakeTime = xTaskGetTickCount();
 80021c6:	e7ce      	b.n	8002166 <_ZN7threads12sensorThreadEPv+0x22>

080021c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80021cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80021ce:	e003      	b.n	80021d8 <LoopCopyDataInit>

080021d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80021d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80021d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80021d6:	3104      	adds	r1, #4

080021d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80021dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80021de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80021e0:	d3f6      	bcc.n	80021d0 <CopyDataInit>
  ldr  r2, =_sbss
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80021e4:	e002      	b.n	80021ec <LoopFillZerobss>

080021e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80021e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80021e8:	f842 3b04 	str.w	r3, [r2], #4

080021ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80021ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80021f0:	d3f9      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021f2:	f7ff faaf 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f006 f9a9 	bl	800854c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fa:	f7fe fbc7 	bl	800098c <main>
  bx  lr    
 80021fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002200:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002204:	08008824 	.word	0x08008824
  ldr  r0, =_sdata
 8002208:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800220c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002210:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002214:	20004324 	.word	0x20004324

08002218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_Init+0x40>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_Init+0x40>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_Init+0x40>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 f8fc 	bl	8002442 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	200f      	movs	r0, #15
 800224c:	f7ff f9dc 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7fe ffda 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000014 	.word	0x20000014
 8002284:	200005c4 	.word	0x200005c4

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	200005c4 	.word	0x200005c4

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ffee 	bl	8002288 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022c6:	bf00      	nop
 80022c8:	f7ff ffde 	bl	8002288 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000014 	.word	0x20000014

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	; (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	; (8002384 <__NVIC_EnableIRQ+0x38>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff4c 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246a:	f7ff ff61 	bl	8002330 <__NVIC_GetPriorityGrouping>
 800246e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	6978      	ldr	r0, [r7, #20]
 8002476:	f7ff ffb1 	bl	80023dc <NVIC_EncodePriority>
 800247a:	4602      	mov	r2, r0
 800247c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff80 	bl	8002388 <__NVIC_SetPriority>
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff54 	bl	800234c <__NVIC_EnableIRQ>
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	e165      	b.n	8002794 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f040 8154 	bne.w	800278e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d005      	beq.n	80024fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d130      	bne.n	8002560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	2203      	movs	r2, #3
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 0201 	and.w	r2, r3, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b03      	cmp	r3, #3
 800256a:	d017      	beq.n	800259c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d123      	bne.n	80025f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	08da      	lsrs	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3208      	adds	r2, #8
 80025b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3208      	adds	r2, #8
 80025ea:	69b9      	ldr	r1, [r7, #24]
 80025ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0203 	and.w	r2, r3, #3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80ae 	beq.w	800278e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a5c      	ldr	r2, [pc, #368]	; (80027ac <HAL_GPIO_Init+0x300>)
 800263c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
 8002642:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <HAL_GPIO_Init+0x300>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264e:	4a58      	ldr	r2, [pc, #352]	; (80027b0 <HAL_GPIO_Init+0x304>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_GPIO_Init+0x308>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d025      	beq.n	80026c6 <HAL_GPIO_Init+0x21a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4e      	ldr	r2, [pc, #312]	; (80027b8 <HAL_GPIO_Init+0x30c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01f      	beq.n	80026c2 <HAL_GPIO_Init+0x216>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4d      	ldr	r2, [pc, #308]	; (80027bc <HAL_GPIO_Init+0x310>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d019      	beq.n	80026be <HAL_GPIO_Init+0x212>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4c      	ldr	r2, [pc, #304]	; (80027c0 <HAL_GPIO_Init+0x314>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_GPIO_Init+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4b      	ldr	r2, [pc, #300]	; (80027c4 <HAL_GPIO_Init+0x318>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00d      	beq.n	80026b6 <HAL_GPIO_Init+0x20a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4a      	ldr	r2, [pc, #296]	; (80027c8 <HAL_GPIO_Init+0x31c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <HAL_GPIO_Init+0x206>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a49      	ldr	r2, [pc, #292]	; (80027cc <HAL_GPIO_Init+0x320>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_Init+0x202>
 80026aa:	2306      	movs	r3, #6
 80026ac:	e00c      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026ae:	2307      	movs	r3, #7
 80026b0:	e00a      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026b2:	2305      	movs	r3, #5
 80026b4:	e008      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026b6:	2304      	movs	r3, #4
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026ba:	2303      	movs	r3, #3
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x21c>
 80026c6:	2300      	movs	r3, #0
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	f002 0203 	and.w	r2, r2, #3
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	4093      	lsls	r3, r2
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d8:	4935      	ldr	r1, [pc, #212]	; (80027b0 <HAL_GPIO_Init+0x304>)
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3302      	adds	r3, #2
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <HAL_GPIO_Init+0x324>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270a:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <HAL_GPIO_Init+0x324>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002710:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <HAL_GPIO_Init+0x324>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002734:	4a26      	ldr	r2, [pc, #152]	; (80027d0 <HAL_GPIO_Init+0x324>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <HAL_GPIO_Init+0x324>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275e:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <HAL_GPIO_Init+0x324>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <HAL_GPIO_Init+0x324>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_GPIO_Init+0x324>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3301      	adds	r3, #1
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b0f      	cmp	r3, #15
 8002798:	f67f ae96 	bls.w	80024c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3724      	adds	r7, #36	; 0x24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40013800 	.word	0x40013800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40021400 	.word	0x40021400
 80027cc:	40021800 	.word	0x40021800
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
 8002810:	4613      	mov	r3, r2
 8002812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002814:	787b      	ldrb	r3, [r7, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800281a:	887a      	ldrh	r2, [r7, #2]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002820:	e003      	b.n	800282a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002822:	887b      	ldrh	r3, [r7, #2]
 8002824:	041a      	lsls	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	619a      	str	r2, [r3, #24]
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002848:	887a      	ldrh	r2, [r7, #2]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	041a      	lsls	r2, r3, #16
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43d9      	mvns	r1, r3
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	400b      	ands	r3, r1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	619a      	str	r2, [r3, #24]
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e12b      	b.n	8002ad6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fce4 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2224      	movs	r2, #36	; 0x24
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028d0:	f001 f87e 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 80028d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a81      	ldr	r2, [pc, #516]	; (8002ae0 <HAL_I2C_Init+0x274>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d807      	bhi.n	80028f0 <HAL_I2C_Init+0x84>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a80      	ldr	r2, [pc, #512]	; (8002ae4 <HAL_I2C_Init+0x278>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	bf94      	ite	ls
 80028e8:	2301      	movls	r3, #1
 80028ea:	2300      	movhi	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e006      	b.n	80028fe <HAL_I2C_Init+0x92>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4a7d      	ldr	r2, [pc, #500]	; (8002ae8 <HAL_I2C_Init+0x27c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	bf94      	ite	ls
 80028f8:	2301      	movls	r3, #1
 80028fa:	2300      	movhi	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e0e7      	b.n	8002ad6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a78      	ldr	r2, [pc, #480]	; (8002aec <HAL_I2C_Init+0x280>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0c9b      	lsrs	r3, r3, #18
 8002910:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a6a      	ldr	r2, [pc, #424]	; (8002ae0 <HAL_I2C_Init+0x274>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d802      	bhi.n	8002940 <HAL_I2C_Init+0xd4>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	3301      	adds	r3, #1
 800293e:	e009      	b.n	8002954 <HAL_I2C_Init+0xe8>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <HAL_I2C_Init+0x284>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	3301      	adds	r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	430b      	orrs	r3, r1
 800295a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002966:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	495c      	ldr	r1, [pc, #368]	; (8002ae0 <HAL_I2C_Init+0x274>)
 8002970:	428b      	cmp	r3, r1
 8002972:	d819      	bhi.n	80029a8 <HAL_I2C_Init+0x13c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e59      	subs	r1, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002982:	1c59      	adds	r1, r3, #1
 8002984:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002988:	400b      	ands	r3, r1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_I2C_Init+0x138>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1e59      	subs	r1, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fbb1 f3f3 	udiv	r3, r1, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a2:	e051      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 80029a4:	2304      	movs	r3, #4
 80029a6:	e04f      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d111      	bne.n	80029d4 <HAL_I2C_Init+0x168>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e012      	b.n	80029fa <HAL_I2C_Init+0x18e>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1e58      	subs	r0, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	0099      	lsls	r1, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_I2C_Init+0x196>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e022      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10e      	bne.n	8002a28 <HAL_I2C_Init+0x1bc>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	1e58      	subs	r0, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	460b      	mov	r3, r1
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	440b      	add	r3, r1
 8002a18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a26:	e00f      	b.n	8002a48 <HAL_I2C_Init+0x1dc>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	6809      	ldr	r1, [r1, #0]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6911      	ldr	r1, [r2, #16]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68d2      	ldr	r2, [r2, #12]
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	000186a0 	.word	0x000186a0
 8002ae4:	001e847f 	.word	0x001e847f
 8002ae8:	003d08ff 	.word	0x003d08ff
 8002aec:	431bde83 	.word	0x431bde83
 8002af0:	10624dd3 	.word	0x10624dd3

08002af4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	460b      	mov	r3, r1
 8002b08:	813b      	strh	r3, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b0e:	f7ff fbbb 	bl	8002288 <HAL_GetTick>
 8002b12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	f040 80d9 	bne.w	8002cd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2319      	movs	r3, #25
 8002b28:	2201      	movs	r2, #1
 8002b2a:	496d      	ldr	r1, [pc, #436]	; (8002ce0 <HAL_I2C_Mem_Write+0x1ec>)
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fc7f 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0cc      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2C_Mem_Write+0x56>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0c5      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d007      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2221      	movs	r2, #33	; 0x21
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a3a      	ldr	r2, [r7, #32]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4a4d      	ldr	r2, [pc, #308]	; (8002ce4 <HAL_I2C_Mem_Write+0x1f0>)
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb2:	88f8      	ldrh	r0, [r7, #6]
 8002bb4:	893a      	ldrh	r2, [r7, #8]
 8002bb6:	8979      	ldrh	r1, [r7, #10]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fab6 	bl	8003134 <I2C_RequestMemoryWrite>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d052      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e081      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fd00 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d107      	bne.n	8002bfa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06b      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d11b      	bne.n	8002c74 <HAL_I2C_Mem_Write+0x180>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1aa      	bne.n	8002bd2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fcec 	bl	800365e <I2C_WaitOnBTFFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d107      	bne.n	8002ca4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e016      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
  }
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	00100002 	.word	0x00100002
 8002ce4:	ffff0000 	.word	0xffff0000

08002ce8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d02:	f7ff fac1 	bl	8002288 <HAL_GetTick>
 8002d06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	f040 8208 	bne.w	8003126 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2319      	movs	r3, #25
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	497b      	ldr	r1, [pc, #492]	; (8002f0c <HAL_I2C_Mem_Read+0x224>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fb85 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e1fb      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x56>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e1f4      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d007      	beq.n	8002d64 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2222      	movs	r2, #34	; 0x22
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a5b      	ldr	r2, [pc, #364]	; (8002f10 <HAL_I2C_Mem_Read+0x228>)
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002da6:	88f8      	ldrh	r0, [r7, #6]
 8002da8:	893a      	ldrh	r2, [r7, #8]
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4603      	mov	r3, r0
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fa52 	bl	8003260 <I2C_RequestMemoryRead>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e1b0      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d113      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	623b      	str	r3, [r7, #32]
 8002de2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	e184      	b.n	8003100 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d11b      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e164      	b.n	8003100 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d11b      	bne.n	8002e76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	e144      	b.n	8003100 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e8c:	e138      	b.n	8003100 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	f200 80f1 	bhi.w	800307a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d123      	bne.n	8002ee8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fc1b 	bl	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e139      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ee6:	e10b      	b.n	8003100 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d14e      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4906      	ldr	r1, [pc, #24]	; (8002f14 <HAL_I2C_Mem_Read+0x22c>)
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fa98 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e10e      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
 8002f0a:	bf00      	nop
 8002f0c:	00100002 	.word	0x00100002
 8002f10:	ffff0000 	.word	0xffff0000
 8002f14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f8c:	e0b8      	b.n	8003100 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	2200      	movs	r2, #0
 8002f96:	4966      	ldr	r1, [pc, #408]	; (8003130 <HAL_I2C_Mem_Read+0x448>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fa49 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0bf      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	494f      	ldr	r1, [pc, #316]	; (8003130 <HAL_I2C_Mem_Read+0x448>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fa1b 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e091      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691a      	ldr	r2, [r3, #16]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003078:	e042      	b.n	8003100 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fb2e 	bl	80036e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e04c      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d118      	bne.n	8003100 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f aec2 	bne.w	8002e8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003126:	2302      	movs	r3, #2
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	00010004 	.word	0x00010004

08003134 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	817b      	strh	r3, [r7, #10]
 8003146:	460b      	mov	r3, r1
 8003148:	813b      	strh	r3, [r7, #8]
 800314a:	4613      	mov	r3, r2
 800314c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	2200      	movs	r2, #0
 8003166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f960 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d103      	bne.n	800318e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e05f      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	6a3a      	ldr	r2, [r7, #32]
 80031a6:	492d      	ldr	r1, [pc, #180]	; (800325c <I2C_RequestMemoryWrite+0x128>)
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f998 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e04c      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	6a39      	ldr	r1, [r7, #32]
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa02 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d107      	bne.n	80031f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e02b      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003200:	893b      	ldrh	r3, [r7, #8]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	e021      	b.n	8003250 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800320c:	893b      	ldrh	r3, [r7, #8]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b29b      	uxth	r3, r3
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	6a39      	ldr	r1, [r7, #32]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f9dc 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2b04      	cmp	r3, #4
 8003230:	d107      	bne.n	8003242 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e005      	b.n	8003252 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003246:	893b      	ldrh	r3, [r7, #8]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	00010002 	.word	0x00010002

08003260 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	4608      	mov	r0, r1
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	4603      	mov	r3, r0
 8003270:	817b      	strh	r3, [r7, #10]
 8003272:	460b      	mov	r3, r1
 8003274:	813b      	strh	r3, [r7, #8]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003288:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8c2 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c0:	d103      	bne.n	80032ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0aa      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	4952      	ldr	r1, [pc, #328]	; (800342c <I2C_RequestMemoryRead+0x1cc>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f8fa 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e097      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f964 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b04      	cmp	r3, #4
 8003320:	d107      	bne.n	8003332 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e076      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e021      	b.n	800338c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 f93e 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e050      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338e:	6a39      	ldr	r1, [r7, #32]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f923 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d107      	bne.n	80033b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e035      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f82b 	bl	8003430 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ee:	d103      	bne.n	80033f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e013      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	6a3a      	ldr	r2, [r7, #32]
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <I2C_RequestMemoryRead+0x1cc>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f863 	bl	80034de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	00010002 	.word	0x00010002

08003430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003440:	e025      	b.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d021      	beq.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe ff1d 	bl	8002288 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e023      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10d      	bne.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	e00c      	b.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4013      	ands	r3, r2
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bf0c      	ite	eq
 80034c6:	2301      	moveq	r3, #1
 80034c8:	2300      	movne	r3, #0
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d0b6      	beq.n	8003442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ec:	e051      	b.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fc:	d123      	bne.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003516:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f043 0204 	orr.w	r2, r3, #4
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e046      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d021      	beq.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fe fe9b 	bl	8002288 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f043 0220 	orr.w	r2, r3, #32
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e020      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10c      	bne.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e00b      	b.n	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	43da      	mvns	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d18d      	bne.n	80034ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e8:	e02d      	b.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f8ce 	bl	800378c <I2C_IsAcknowledgeFailed>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e02d      	b.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d021      	beq.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7fe fe41 	bl	8002288 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d116      	bne.n	8003646 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f043 0220 	orr.w	r2, r3, #32
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e007      	b.n	8003656 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d1ca      	bne.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800366a:	e02d      	b.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f88d 	bl	800378c <I2C_IsAcknowledgeFailed>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e02d      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d021      	beq.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fe fe00 	bl	8002288 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d116      	bne.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d1ca      	bne.n	800366c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036ec:	e042      	b.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d119      	bne.n	8003730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0210 	mvn.w	r2, #16
 8003704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e029      	b.n	8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003730:	f7fe fdaa 	bl	8002288 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	429a      	cmp	r2, r3
 800373e:	d302      	bcc.n	8003746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d116      	bne.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e007      	b.n	8003784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d1b5      	bne.n	80036ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a2:	d11b      	bne.n	80037dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	f043 0204 	orr.w	r2, r3, #4
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0cc      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b68      	ldr	r3, [pc, #416]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d90c      	bls.n	8003828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b65      	ldr	r3, [pc, #404]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a58      	ldr	r2, [pc, #352]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a52      	ldr	r2, [pc, #328]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d119      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b3f      	ldr	r3, [pc, #252]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e067      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4934      	ldr	r1, [pc, #208]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fe fcd4 	bl	8002288 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fe fcd0 	bl	8002288 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e04f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d20c      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003972:	f000 fbb1 	bl	80040d8 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	490a      	ldr	r1, [pc, #40]	; (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fe38 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800879c 	.word	0x0800879c
 80039b0:	20000008 	.word	0x20000008
 80039b4:	20000010 	.word	0x20000010

080039b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_RCC_GetHCLKFreq+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000008 	.word	0x20000008

080039d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 80039d8:	4602      	mov	r2, r0
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	080087ac 	.word	0x080087ac

080039f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039fc:	f7ff ffdc 	bl	80039b8 <HAL_RCC_GetHCLKFreq>
 8003a00:	4602      	mov	r2, r0
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	0b5b      	lsrs	r3, r3, #13
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	4903      	ldr	r1, [pc, #12]	; (8003a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	080087ac 	.word	0x080087ac

08003a20 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	220f      	movs	r2, #15
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_GetClockConfig+0x5c>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0203 	and.w	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	; (8003a7c <HAL_RCC_GetClockConfig+0x5c>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <HAL_RCC_GetClockConfig+0x5c>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_GetClockConfig+0x5c>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	08db      	lsrs	r3, r3, #3
 8003a5a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a62:	4b07      	ldr	r3, [pc, #28]	; (8003a80 <HAL_RCC_GetClockConfig+0x60>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	601a      	str	r2, [r3, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40023c00 	.word	0x40023c00

08003a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d010      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003abc:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	496c      	ldr	r1, [pc, #432]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003ada:	2301      	movs	r3, #1
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d010      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003aea:	4b64      	ldr	r3, [pc, #400]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af8:	4960      	ldr	r1, [pc, #384]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d017      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b18:	4b58      	ldr	r3, [pc, #352]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	4955      	ldr	r1, [pc, #340]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b36:	d101      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003b44:	2301      	movs	r3, #1
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d017      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b54:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b62:	4946      	ldr	r1, [pc, #280]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b72:	d101      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003b74:	2301      	movs	r3, #1
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003b80:	2301      	movs	r3, #1
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 808a 	beq.w	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	4b39      	ldr	r3, [pc, #228]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bae:	4b34      	ldr	r3, [pc, #208]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a33      	ldr	r2, [pc, #204]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bba:	f7fe fb65 	bl	8002288 <HAL_GetTick>
 8003bbe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7fe fb61 	bl	8002288 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e278      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bd4:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be0:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02f      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	6a3a      	ldr	r2, [r7, #32]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d028      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c06:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c08:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c14:	4a19      	ldr	r2, [pc, #100]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d114      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c26:	f7fe fb2f 	bl	8002288 <HAL_GetTick>
 8003c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fe fb2b 	bl	8002288 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e240      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5c:	d114      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	4902      	ldr	r1, [pc, #8]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]
 8003c78:	e00c      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470e40 	.word	0x42470e40
 8003c88:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a49      	ldr	r2, [pc, #292]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca0:	4944      	ldr	r1, [pc, #272]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003cba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	4937      	ldr	r1, [pc, #220]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cea:	4b32      	ldr	r3, [pc, #200]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	492e      	ldr	r1, [pc, #184]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d011      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d0c:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d12:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	4926      	ldr	r1, [pc, #152]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	491a      	ldr	r1, [pc, #104]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d011      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d64:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	4911      	ldr	r1, [pc, #68]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d005      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d90:	f040 80ff 	bne.w	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d9a:	f7fe fa75 	bl	8002288 <HAL_GetTick>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003da0:	e00e      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003da2:	f7fe fa71 	bl	8002288 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d907      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e188      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	424711e0 	.word	0x424711e0
 8003dbc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dc0:	4b7e      	ldr	r3, [pc, #504]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ea      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d028      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d124      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003df4:	4b71      	ldr	r3, [pc, #452]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfa:	0c1b      	lsrs	r3, r3, #16
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	3301      	adds	r3, #1
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e06:	4b6d      	ldr	r3, [pc, #436]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	0e1b      	lsrs	r3, r3, #24
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	019b      	lsls	r3, r3, #6
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	4961      	ldr	r1, [pc, #388]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d035      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e68:	d130      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e6a:	4b54      	ldr	r3, [pc, #336]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e82:	0f1b      	lsrs	r3, r3, #28
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	019b      	lsls	r3, r3, #6
 8003e94:	431a      	orrs	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	071b      	lsls	r3, r3, #28
 8003eac:	4943      	ldr	r1, [pc, #268]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003eb4:	4b41      	ldr	r3, [pc, #260]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eba:	f023 021f 	bic.w	r2, r3, #31
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	493d      	ldr	r1, [pc, #244]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d029      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee0:	d124      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ee2:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ef4:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efa:	0f1b      	lsrs	r3, r3, #28
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	019b      	lsls	r3, r3, #6
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	3b01      	subs	r3, #1
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	071b      	lsls	r3, r3, #28
 8003f24:	4925      	ldr	r1, [pc, #148]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4917      	ldr	r1, [pc, #92]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f66:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6c:	f7fe f98c 	bl	8002288 <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f74:	f7fe f988 	bl	8002288 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e09f      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f86:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	f040 8095 	bne.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fa0:	f7fe f972 	bl	8002288 <HAL_GetTick>
 8003fa4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fa6:	e00f      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003fa8:	f7fe f96e 	bl	8002288 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d908      	bls.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e085      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	42470068 	.word	0x42470068
 8003fc4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fc8:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fd4:	d0e8      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0304 	and.w	r3, r3, #4
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02b      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d127      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003ffe:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	3301      	adds	r3, #1
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	431a      	orrs	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	4928      	ldr	r1, [pc, #160]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004034:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800403a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	3b01      	subs	r3, #1
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	4922      	ldr	r1, [pc, #136]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01d      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004062:	d118      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004064:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406a:	0e1b      	lsrs	r3, r3, #24
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	019b      	lsls	r3, r3, #6
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	4910      	ldr	r1, [pc, #64]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800409c:	f7fe f8f4 	bl	8002288 <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80040a4:	f7fe f8f0 	bl	8002288 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e007      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c2:	d1ef      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3730      	adds	r7, #48	; 0x30
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	42470070 	.word	0x42470070

080040d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040dc:	b0ae      	sub	sp, #184	; 0xb8
 80040de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040fe:	4bcb      	ldr	r3, [pc, #812]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b0c      	cmp	r3, #12
 8004108:	f200 8206 	bhi.w	8004518 <HAL_RCC_GetSysClockFreq+0x440>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <HAL_RCC_GetSysClockFreq+0x3c>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004149 	.word	0x08004149
 8004118:	08004519 	.word	0x08004519
 800411c:	08004519 	.word	0x08004519
 8004120:	08004519 	.word	0x08004519
 8004124:	08004151 	.word	0x08004151
 8004128:	08004519 	.word	0x08004519
 800412c:	08004519 	.word	0x08004519
 8004130:	08004519 	.word	0x08004519
 8004134:	08004159 	.word	0x08004159
 8004138:	08004519 	.word	0x08004519
 800413c:	08004519 	.word	0x08004519
 8004140:	08004519 	.word	0x08004519
 8004144:	08004349 	.word	0x08004349
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4bb9      	ldr	r3, [pc, #740]	; (8004430 <HAL_RCC_GetSysClockFreq+0x358>)
 800414a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800414e:	e1e7      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004150:	4bb8      	ldr	r3, [pc, #736]	; (8004434 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004156:	e1e3      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004158:	4bb4      	ldr	r3, [pc, #720]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004164:	4bb1      	ldr	r3, [pc, #708]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d071      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004170:	4bae      	ldr	r3, [pc, #696]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800417c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004188:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004192:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004196:	4622      	mov	r2, r4
 8004198:	462b      	mov	r3, r5
 800419a:	f04f 0000 	mov.w	r0, #0
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	0159      	lsls	r1, r3, #5
 80041a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041a8:	0150      	lsls	r0, r2, #5
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4621      	mov	r1, r4
 80041b0:	1a51      	subs	r1, r2, r1
 80041b2:	6439      	str	r1, [r7, #64]	; 0x40
 80041b4:	4629      	mov	r1, r5
 80041b6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ba:	647b      	str	r3, [r7, #68]	; 0x44
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80041c8:	4649      	mov	r1, r9
 80041ca:	018b      	lsls	r3, r1, #6
 80041cc:	4641      	mov	r1, r8
 80041ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d2:	4641      	mov	r1, r8
 80041d4:	018a      	lsls	r2, r1, #6
 80041d6:	4641      	mov	r1, r8
 80041d8:	1a51      	subs	r1, r2, r1
 80041da:	63b9      	str	r1, [r7, #56]	; 0x38
 80041dc:	4649      	mov	r1, r9
 80041de:	eb63 0301 	sbc.w	r3, r3, r1
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80041f0:	4649      	mov	r1, r9
 80041f2:	00cb      	lsls	r3, r1, #3
 80041f4:	4641      	mov	r1, r8
 80041f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fa:	4641      	mov	r1, r8
 80041fc:	00ca      	lsls	r2, r1, #3
 80041fe:	4610      	mov	r0, r2
 8004200:	4619      	mov	r1, r3
 8004202:	4603      	mov	r3, r0
 8004204:	4622      	mov	r2, r4
 8004206:	189b      	adds	r3, r3, r2
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 800420a:	462b      	mov	r3, r5
 800420c:	460a      	mov	r2, r1
 800420e:	eb42 0303 	adc.w	r3, r2, r3
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004220:	4629      	mov	r1, r5
 8004222:	024b      	lsls	r3, r1, #9
 8004224:	4621      	mov	r1, r4
 8004226:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800422a:	4621      	mov	r1, r4
 800422c:	024a      	lsls	r2, r1, #9
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004236:	2200      	movs	r2, #0
 8004238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800423c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004240:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004244:	f7fb ffe4 	bl	8000210 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4613      	mov	r3, r2
 800424e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004252:	e067      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004254:	4b75      	ldr	r3, [pc, #468]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	099b      	lsrs	r3, r3, #6
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004260:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426c:	67bb      	str	r3, [r7, #120]	; 0x78
 800426e:	2300      	movs	r3, #0
 8004270:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004272:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004276:	4622      	mov	r2, r4
 8004278:	462b      	mov	r3, r5
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	0159      	lsls	r1, r3, #5
 8004284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004288:	0150      	lsls	r0, r2, #5
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4621      	mov	r1, r4
 8004290:	1a51      	subs	r1, r2, r1
 8004292:	62b9      	str	r1, [r7, #40]	; 0x28
 8004294:	4629      	mov	r1, r5
 8004296:	eb63 0301 	sbc.w	r3, r3, r1
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80042a8:	4649      	mov	r1, r9
 80042aa:	018b      	lsls	r3, r1, #6
 80042ac:	4641      	mov	r1, r8
 80042ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042b2:	4641      	mov	r1, r8
 80042b4:	018a      	lsls	r2, r1, #6
 80042b6:	4641      	mov	r1, r8
 80042b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80042bc:	4649      	mov	r1, r9
 80042be:	eb63 0b01 	sbc.w	fp, r3, r1
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d6:	4692      	mov	sl, r2
 80042d8:	469b      	mov	fp, r3
 80042da:	4623      	mov	r3, r4
 80042dc:	eb1a 0303 	adds.w	r3, sl, r3
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	462b      	mov	r3, r5
 80042e4:	eb4b 0303 	adc.w	r3, fp, r3
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80042f6:	4629      	mov	r1, r5
 80042f8:	028b      	lsls	r3, r1, #10
 80042fa:	4621      	mov	r1, r4
 80042fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004300:	4621      	mov	r1, r4
 8004302:	028a      	lsls	r2, r1, #10
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800430c:	2200      	movs	r2, #0
 800430e:	673b      	str	r3, [r7, #112]	; 0x70
 8004310:	677a      	str	r2, [r7, #116]	; 0x74
 8004312:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004316:	f7fb ff7b 	bl	8000210 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4613      	mov	r3, r2
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004324:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800433a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004346:	e0eb      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004348:	4b38      	ldr	r3, [pc, #224]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004354:	4b35      	ldr	r3, [pc, #212]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d06b      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004360:	4b32      	ldr	r3, [pc, #200]	; (800442c <HAL_RCC_GetSysClockFreq+0x354>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	2200      	movs	r2, #0
 8004368:	66bb      	str	r3, [r7, #104]	; 0x68
 800436a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800436c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800436e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004372:	663b      	str	r3, [r7, #96]	; 0x60
 8004374:	2300      	movs	r3, #0
 8004376:	667b      	str	r3, [r7, #100]	; 0x64
 8004378:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800437c:	4622      	mov	r2, r4
 800437e:	462b      	mov	r3, r5
 8004380:	f04f 0000 	mov.w	r0, #0
 8004384:	f04f 0100 	mov.w	r1, #0
 8004388:	0159      	lsls	r1, r3, #5
 800438a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800438e:	0150      	lsls	r0, r2, #5
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4621      	mov	r1, r4
 8004396:	1a51      	subs	r1, r2, r1
 8004398:	61b9      	str	r1, [r7, #24]
 800439a:	4629      	mov	r1, r5
 800439c:	eb63 0301 	sbc.w	r3, r3, r1
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80043ae:	4659      	mov	r1, fp
 80043b0:	018b      	lsls	r3, r1, #6
 80043b2:	4651      	mov	r1, sl
 80043b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043b8:	4651      	mov	r1, sl
 80043ba:	018a      	lsls	r2, r1, #6
 80043bc:	4651      	mov	r1, sl
 80043be:	ebb2 0801 	subs.w	r8, r2, r1
 80043c2:	4659      	mov	r1, fp
 80043c4:	eb63 0901 	sbc.w	r9, r3, r1
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043dc:	4690      	mov	r8, r2
 80043de:	4699      	mov	r9, r3
 80043e0:	4623      	mov	r3, r4
 80043e2:	eb18 0303 	adds.w	r3, r8, r3
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	462b      	mov	r3, r5
 80043ea:	eb49 0303 	adc.w	r3, r9, r3
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80043fc:	4629      	mov	r1, r5
 80043fe:	024b      	lsls	r3, r1, #9
 8004400:	4621      	mov	r1, r4
 8004402:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004406:	4621      	mov	r1, r4
 8004408:	024a      	lsls	r2, r1, #9
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004412:	2200      	movs	r2, #0
 8004414:	65bb      	str	r3, [r7, #88]	; 0x58
 8004416:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004418:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800441c:	f7fb fef8 	bl	8000210 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800442a:	e065      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x420>
 800442c:	40023800 	.word	0x40023800
 8004430:	00f42400 	.word	0x00f42400
 8004434:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004438:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <HAL_RCC_GetSysClockFreq+0x458>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	2200      	movs	r2, #0
 8004440:	4618      	mov	r0, r3
 8004442:	4611      	mov	r1, r2
 8004444:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004448:	653b      	str	r3, [r7, #80]	; 0x50
 800444a:	2300      	movs	r3, #0
 800444c:	657b      	str	r3, [r7, #84]	; 0x54
 800444e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004452:	4642      	mov	r2, r8
 8004454:	464b      	mov	r3, r9
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	0159      	lsls	r1, r3, #5
 8004460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004464:	0150      	lsls	r0, r2, #5
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4641      	mov	r1, r8
 800446c:	1a51      	subs	r1, r2, r1
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	4649      	mov	r1, r9
 8004472:	eb63 0301 	sbc.w	r3, r3, r1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004484:	4659      	mov	r1, fp
 8004486:	018b      	lsls	r3, r1, #6
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800448e:	4651      	mov	r1, sl
 8004490:	018a      	lsls	r2, r1, #6
 8004492:	4651      	mov	r1, sl
 8004494:	1a54      	subs	r4, r2, r1
 8004496:	4659      	mov	r1, fp
 8004498:	eb63 0501 	sbc.w	r5, r3, r1
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	00eb      	lsls	r3, r5, #3
 80044a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044aa:	00e2      	lsls	r2, r4, #3
 80044ac:	4614      	mov	r4, r2
 80044ae:	461d      	mov	r5, r3
 80044b0:	4643      	mov	r3, r8
 80044b2:	18e3      	adds	r3, r4, r3
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	464b      	mov	r3, r9
 80044b8:	eb45 0303 	adc.w	r3, r5, r3
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ca:	4629      	mov	r1, r5
 80044cc:	028b      	lsls	r3, r1, #10
 80044ce:	4621      	mov	r1, r4
 80044d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044d4:	4621      	mov	r1, r4
 80044d6:	028a      	lsls	r2, r1, #10
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044e0:	2200      	movs	r2, #0
 80044e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80044e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044ea:	f7fb fe91 	bl	8000210 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4613      	mov	r3, r2
 80044f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <HAL_RCC_GetSysClockFreq+0x458>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0f1b      	lsrs	r3, r3, #28
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800450a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004516:	e003      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCC_GetSysClockFreq+0x45c>)
 800451a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800451e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004524:	4618      	mov	r0, r3
 8004526:	37b8      	adds	r7, #184	; 0xb8
 8004528:	46bd      	mov	sp, r7
 800452a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	00f42400 	.word	0x00f42400

08004538 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e28d      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 8083 	beq.w	800465e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004558:	4b94      	ldr	r3, [pc, #592]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b04      	cmp	r3, #4
 8004562:	d019      	beq.n	8004598 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004564:	4b91      	ldr	r3, [pc, #580]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800456c:	2b08      	cmp	r3, #8
 800456e:	d106      	bne.n	800457e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004570:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457c:	d00c      	beq.n	8004598 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b8b      	ldr	r3, [pc, #556]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d112      	bne.n	80045b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b88      	ldr	r3, [pc, #544]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004596:	d10b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	4b84      	ldr	r3, [pc, #528]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05b      	beq.n	800465c <HAL_RCC_OscConfig+0x124>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d157      	bne.n	800465c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e25a      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x90>
 80045ba:	4b7c      	ldr	r3, [pc, #496]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a7b      	ldr	r2, [pc, #492]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xcc>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0xb4>
 80045d2:	4b76      	ldr	r3, [pc, #472]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a75      	ldr	r2, [pc, #468]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b73      	ldr	r3, [pc, #460]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a72      	ldr	r2, [pc, #456]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xcc>
 80045ec:	4b6f      	ldr	r3, [pc, #444]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6e      	ldr	r2, [pc, #440]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a6b      	ldr	r2, [pc, #428]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fe3c 	bl	8002288 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fe38 	bl	8002288 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e21f      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b61      	ldr	r3, [pc, #388]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xdc>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd fe28 	bl	8002288 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd fe24 	bl	8002288 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e20b      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	4b57      	ldr	r3, [pc, #348]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x104>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d06f      	beq.n	800474a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800466a:	4b50      	ldr	r3, [pc, #320]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b00      	cmp	r3, #0
 8004674:	d017      	beq.n	80046a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004676:	4b4d      	ldr	r3, [pc, #308]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d105      	bne.n	800468e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004682:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b47      	ldr	r3, [pc, #284]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d11c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469a:	4b44      	ldr	r3, [pc, #272]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a6:	4b41      	ldr	r3, [pc, #260]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_RCC_OscConfig+0x186>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d001      	beq.n	80046be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e1d3      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046be:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4937      	ldr	r1, [pc, #220]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	e03a      	b.n	800474a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046dc:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCC_OscConfig+0x278>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fd fdd1 	bl	8002288 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ea:	f7fd fdcd 	bl	8002288 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e1b4      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4925      	ldr	r1, [pc, #148]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004718:	4313      	orrs	r3, r2
 800471a:	600b      	str	r3, [r1, #0]
 800471c:	e015      	b.n	800474a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471e:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCC_OscConfig+0x278>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fdb0 	bl	8002288 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472c:	f7fd fdac 	bl	8002288 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e193      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d036      	beq.n	80047c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x27c>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fd90 	bl	8002288 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800476c:	f7fd fd8c 	bl	8002288 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e173      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_OscConfig+0x274>)
 8004780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x234>
 800478a:	e01b      	b.n	80047c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <HAL_RCC_OscConfig+0x27c>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fd79 	bl	8002288 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	e00e      	b.n	80047b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479a:	f7fd fd75 	bl	8002288 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d907      	bls.n	80047b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e15c      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
 80047ac:	40023800 	.word	0x40023800
 80047b0:	42470000 	.word	0x42470000
 80047b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b8:	4b8a      	ldr	r3, [pc, #552]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80047ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1ea      	bne.n	800479a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8097 	beq.w	8004900 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d2:	2300      	movs	r3, #0
 80047d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d6:	4b83      	ldr	r3, [pc, #524]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10f      	bne.n	8004802 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	4b7f      	ldr	r3, [pc, #508]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	4a7e      	ldr	r2, [pc, #504]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80047ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f0:	6413      	str	r3, [r2, #64]	; 0x40
 80047f2:	4b7c      	ldr	r3, [pc, #496]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004802:	4b79      	ldr	r3, [pc, #484]	; (80049e8 <HAL_RCC_OscConfig+0x4b0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d118      	bne.n	8004840 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800480e:	4b76      	ldr	r3, [pc, #472]	; (80049e8 <HAL_RCC_OscConfig+0x4b0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a75      	ldr	r2, [pc, #468]	; (80049e8 <HAL_RCC_OscConfig+0x4b0>)
 8004814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481a:	f7fd fd35 	bl	8002288 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7fd fd31 	bl	8002288 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e118      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	4b6c      	ldr	r3, [pc, #432]	; (80049e8 <HAL_RCC_OscConfig+0x4b0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x31e>
 8004848:	4b66      	ldr	r3, [pc, #408]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484c:	4a65      	ldr	r2, [pc, #404]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6713      	str	r3, [r2, #112]	; 0x70
 8004854:	e01c      	b.n	8004890 <HAL_RCC_OscConfig+0x358>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b05      	cmp	r3, #5
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x340>
 800485e:	4b61      	ldr	r3, [pc, #388]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a60      	ldr	r2, [pc, #384]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 8004864:	f043 0304 	orr.w	r3, r3, #4
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	4b5e      	ldr	r3, [pc, #376]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a5d      	ldr	r2, [pc, #372]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
 8004876:	e00b      	b.n	8004890 <HAL_RCC_OscConfig+0x358>
 8004878:	4b5a      	ldr	r3, [pc, #360]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	4a59      	ldr	r2, [pc, #356]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800487e:	f023 0301 	bic.w	r3, r3, #1
 8004882:	6713      	str	r3, [r2, #112]	; 0x70
 8004884:	4b57      	ldr	r3, [pc, #348]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 8004886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004888:	4a56      	ldr	r2, [pc, #344]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800488a:	f023 0304 	bic.w	r3, r3, #4
 800488e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fd fcf6 	bl	8002288 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	e00a      	b.n	80048b6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a0:	f7fd fcf2 	bl	8002288 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e0d7      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	4b4b      	ldr	r3, [pc, #300]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0ee      	beq.n	80048a0 <HAL_RCC_OscConfig+0x368>
 80048c2:	e014      	b.n	80048ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fd fce0 	bl	8002288 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fd fcdc 	bl	8002288 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0c1      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	4b40      	ldr	r3, [pc, #256]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1ee      	bne.n	80048cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d105      	bne.n	8004900 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f4:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	4a3a      	ldr	r2, [pc, #232]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80048fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80ad 	beq.w	8004a64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800490a:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b08      	cmp	r3, #8
 8004914:	d060      	beq.n	80049d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d145      	bne.n	80049aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491e:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_RCC_OscConfig+0x4b4>)
 8004920:	2200      	movs	r2, #0
 8004922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd fcb0 	bl	8002288 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd fcac 	bl	8002288 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e093      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	4b29      	ldr	r3, [pc, #164]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	019b      	lsls	r3, r3, #6
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	3b01      	subs	r3, #1
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	491b      	ldr	r1, [pc, #108]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_RCC_OscConfig+0x4b4>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004982:	f7fd fc81 	bl	8002288 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498a:	f7fd fc7d 	bl	8002288 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e064      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x452>
 80049a8:	e05c      	b.n	8004a64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HAL_RCC_OscConfig+0x4b4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fd fc6a 	bl	8002288 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fd fc66 	bl	8002288 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e04d      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_RCC_OscConfig+0x4ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x480>
 80049d6:	e045      	b.n	8004a64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e040      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40007000 	.word	0x40007000
 80049ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <HAL_RCC_OscConfig+0x538>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d030      	beq.n	8004a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d129      	bne.n	8004a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d122      	bne.n	8004a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d119      	bne.n	8004a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d10f      	bne.n	8004a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800

08004a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e07b      	b.n	8004b7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a96:	d009      	beq.n	8004aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	61da      	str	r2, [r3, #28]
 8004a9e:	e005      	b.n	8004aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fc12 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b30:	ea42 0103 	orr.w	r1, r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	f003 0104 	and.w	r1, r3, #4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	f003 0210 	and.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e041      	b.n	8004c1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc fc17 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 fce1 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e046      	b.n	8004cca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <HAL_TIM_Base_Start+0xb4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d022      	beq.n	8004c94 <HAL_TIM_Base_Start+0x70>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c56:	d01d      	beq.n	8004c94 <HAL_TIM_Base_Start+0x70>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_TIM_Base_Start+0xb8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_TIM_Base_Start+0x70>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <HAL_TIM_Base_Start+0xbc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_TIM_Base_Start+0x70>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_TIM_Base_Start+0xc0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_TIM_Base_Start+0x70>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <HAL_TIM_Base_Start+0xc4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_TIM_Base_Start+0x70>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_TIM_Base_Start+0xc8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_TIM_Base_Start+0x70>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_TIM_Base_Start+0xcc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d111      	bne.n	8004cb8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b06      	cmp	r3, #6
 8004ca4:	d010      	beq.n	8004cc8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	e007      	b.n	8004cc8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40001800 	.word	0x40001800

08004cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d001      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e04e      	b.n	8004daa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a23      	ldr	r2, [pc, #140]	; (8004db8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d36:	d01d      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_Base_Start_IT+0x80>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d111      	bne.n	8004d98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b06      	cmp	r3, #6
 8004d84:	d010      	beq.n	8004da8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0201 	orr.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	e007      	b.n	8004da8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40001800 	.word	0x40001800

08004dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e041      	b.n	8004e6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f839 	bl	8004e72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f000 fbba 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <HAL_TIM_PWM_Start+0x24>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	bf14      	ite	ne
 8004ea4:	2301      	movne	r3, #1
 8004ea6:	2300      	moveq	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	e022      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x6a>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d109      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0x3e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	bf14      	ite	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	2300      	moveq	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	e015      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x6a>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d109      	bne.n	8004ee0 <HAL_TIM_PWM_Start+0x58>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	e008      	b.n	8004ef2 <HAL_TIM_PWM_Start+0x6a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e07c      	b.n	8004ff4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x82>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f08:	e013      	b.n	8004f32 <HAL_TIM_PWM_Start+0xaa>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Start+0x92>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f18:	e00b      	b.n	8004f32 <HAL_TIM_PWM_Start+0xaa>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Start+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f28:	e003      	b.n	8004f32 <HAL_TIM_PWM_Start+0xaa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fe10 	bl	8005b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2d      	ldr	r2, [pc, #180]	; (8004ffc <HAL_TIM_PWM_Start+0x174>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_TIM_PWM_Start+0xcc>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2c      	ldr	r2, [pc, #176]	; (8005000 <HAL_TIM_PWM_Start+0x178>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <HAL_TIM_PWM_Start+0xd0>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_PWM_Start+0xd2>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a22      	ldr	r2, [pc, #136]	; (8004ffc <HAL_TIM_PWM_Start+0x174>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d01d      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <HAL_TIM_PWM_Start+0x17c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <HAL_TIM_PWM_Start+0x180>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	; (800500c <HAL_TIM_PWM_Start+0x184>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a16      	ldr	r2, [pc, #88]	; (8005000 <HAL_TIM_PWM_Start+0x178>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_TIM_PWM_Start+0x188>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x136>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_TIM_PWM_Start+0x18c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d111      	bne.n	8004fe2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d010      	beq.n	8004ff2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe0:	e007      	b.n	8004ff2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0201 	orr.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40010000 	.word	0x40010000
 8005000:	40010400 	.word	0x40010400
 8005004:	40000400 	.word	0x40000400
 8005008:	40000800 	.word	0x40000800
 800500c:	40000c00 	.word	0x40000c00
 8005010:	40014000 	.word	0x40014000
 8005014:	40001800 	.word	0x40001800

08005018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d122      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b02      	cmp	r3, #2
 800503a:	d11b      	bne.n	8005074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0202 	mvn.w	r2, #2
 8005044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa77 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 8005060:	e005      	b.n	800506e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa69 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa7a 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b04      	cmp	r3, #4
 8005080:	d122      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b04      	cmp	r3, #4
 800508e:	d11b      	bne.n	80050c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f06f 0204 	mvn.w	r2, #4
 8005098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2202      	movs	r2, #2
 800509e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa4d 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 80050b4:	e005      	b.n	80050c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa3f 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fa50 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d122      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d11b      	bne.n	800511c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f06f 0208 	mvn.w	r2, #8
 80050ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2204      	movs	r2, #4
 80050f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fa23 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 8005108:	e005      	b.n	8005116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa15 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa26 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b10      	cmp	r3, #16
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0210 	mvn.w	r2, #16
 8005140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2208      	movs	r2, #8
 8005146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9f9 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9eb 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f9fc 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	d10e      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b01      	cmp	r3, #1
 800518a:	d107      	bne.n	800519c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0201 	mvn.w	r2, #1
 8005194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc f810 	bl	80011bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a6:	2b80      	cmp	r3, #128	; 0x80
 80051a8:	d10e      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b80      	cmp	r3, #128	; 0x80
 80051b6:	d107      	bne.n	80051c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fdca 	bl	8005d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d10e      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d107      	bne.n	80051f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f9c1 	bl	8005576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d10e      	bne.n	8005220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f003 0320 	and.w	r3, r3, #32
 800520c:	2b20      	cmp	r3, #32
 800520e:	d107      	bne.n	8005220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0220 	mvn.w	r2, #32
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fd94 	bl	8005d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005242:	2302      	movs	r3, #2
 8005244:	e0ae      	b.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b0c      	cmp	r3, #12
 8005252:	f200 809f 	bhi.w	8005394 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005291 	.word	0x08005291
 8005260:	08005395 	.word	0x08005395
 8005264:	08005395 	.word	0x08005395
 8005268:	08005395 	.word	0x08005395
 800526c:	080052d1 	.word	0x080052d1
 8005270:	08005395 	.word	0x08005395
 8005274:	08005395 	.word	0x08005395
 8005278:	08005395 	.word	0x08005395
 800527c:	08005313 	.word	0x08005313
 8005280:	08005395 	.word	0x08005395
 8005284:	08005395 	.word	0x08005395
 8005288:	08005395 	.word	0x08005395
 800528c:	08005353 	.word	0x08005353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fa18 	bl	80056cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6999      	ldr	r1, [r3, #24]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	619a      	str	r2, [r3, #24]
      break;
 80052ce:	e064      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fa68 	bl	80057ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	619a      	str	r2, [r3, #24]
      break;
 8005310:	e043      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fabd 	bl	8005898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f042 0208 	orr.w	r2, r2, #8
 800532c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0204 	bic.w	r2, r2, #4
 800533c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
      break;
 8005350:	e023      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fb11 	bl	8005980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	021a      	lsls	r2, r3, #8
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	61da      	str	r2, [r3, #28]
      break;
 8005392:	e002      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_ConfigClockSource+0x1c>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e0b4      	b.n	8005532 <HAL_TIM_ConfigClockSource+0x186>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005400:	d03e      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0xd4>
 8005402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005406:	f200 8087 	bhi.w	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540e:	f000 8086 	beq.w	800551e <HAL_TIM_ConfigClockSource+0x172>
 8005412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005416:	d87f      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b70      	cmp	r3, #112	; 0x70
 800541a:	d01a      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xa6>
 800541c:	2b70      	cmp	r3, #112	; 0x70
 800541e:	d87b      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d050      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005424:	2b60      	cmp	r3, #96	; 0x60
 8005426:	d877      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b50      	cmp	r3, #80	; 0x50
 800542a:	d03c      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0xfa>
 800542c:	2b50      	cmp	r3, #80	; 0x50
 800542e:	d873      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005430:	2b40      	cmp	r3, #64	; 0x40
 8005432:	d058      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d86f      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005438:	2b30      	cmp	r3, #48	; 0x30
 800543a:	d064      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 800543c:	2b30      	cmp	r3, #48	; 0x30
 800543e:	d86b      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005440:	2b20      	cmp	r3, #32
 8005442:	d060      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 8005444:	2b20      	cmp	r3, #32
 8005446:	d867      	bhi.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d05c      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 800544c:	2b10      	cmp	r3, #16
 800544e:	d05a      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x15a>
 8005450:	e062      	b.n	8005518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6899      	ldr	r1, [r3, #8]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f000 fb5d 	bl	8005b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	609a      	str	r2, [r3, #8]
      break;
 800547e:	e04f      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6818      	ldr	r0, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	6899      	ldr	r1, [r3, #8]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f000 fb46 	bl	8005b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054a2:	609a      	str	r2, [r3, #8]
      break;
 80054a4:	e03c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f000 faba 	bl	8005a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2150      	movs	r1, #80	; 0x50
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fb13 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 80054c4:	e02c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 fad9 	bl	8005a8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2160      	movs	r1, #96	; 0x60
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fb03 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 80054e4:	e01c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 fa9a 	bl	8005a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2140      	movs	r1, #64	; 0x40
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 faf3 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 8005504:	e00c      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	4610      	mov	r0, r2
 8005512:	f000 faea 	bl	8005aea <TIM_ITRx_SetConfig>
      break;
 8005516:	e003      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
      break;
 800551c:	e000      	b.n	8005520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800551e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a40      	ldr	r2, [pc, #256]	; (80056a0 <TIM_Base_SetConfig+0x114>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055aa:	d00f      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3d      	ldr	r2, [pc, #244]	; (80056a4 <TIM_Base_SetConfig+0x118>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00b      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <TIM_Base_SetConfig+0x11c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a3b      	ldr	r2, [pc, #236]	; (80056ac <TIM_Base_SetConfig+0x120>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a3a      	ldr	r2, [pc, #232]	; (80056b0 <TIM_Base_SetConfig+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d108      	bne.n	80055de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2f      	ldr	r2, [pc, #188]	; (80056a0 <TIM_Base_SetConfig+0x114>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d02b      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ec:	d027      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2c      	ldr	r2, [pc, #176]	; (80056a4 <TIM_Base_SetConfig+0x118>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d023      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2b      	ldr	r2, [pc, #172]	; (80056a8 <TIM_Base_SetConfig+0x11c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01f      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <TIM_Base_SetConfig+0x120>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01b      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a29      	ldr	r2, [pc, #164]	; (80056b0 <TIM_Base_SetConfig+0x124>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d017      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <TIM_Base_SetConfig+0x128>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a27      	ldr	r2, [pc, #156]	; (80056b8 <TIM_Base_SetConfig+0x12c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00f      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a26      	ldr	r2, [pc, #152]	; (80056bc <TIM_Base_SetConfig+0x130>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00b      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a25      	ldr	r2, [pc, #148]	; (80056c0 <TIM_Base_SetConfig+0x134>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d007      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a24      	ldr	r2, [pc, #144]	; (80056c4 <TIM_Base_SetConfig+0x138>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d003      	beq.n	800563e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a23      	ldr	r2, [pc, #140]	; (80056c8 <TIM_Base_SetConfig+0x13c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d108      	bne.n	8005650 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a0a      	ldr	r2, [pc, #40]	; (80056a0 <TIM_Base_SetConfig+0x114>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_Base_SetConfig+0xf8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a0c      	ldr	r2, [pc, #48]	; (80056b0 <TIM_Base_SetConfig+0x124>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d103      	bne.n	800568c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	615a      	str	r2, [r3, #20]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40000c00 	.word	0x40000c00
 80056b0:	40010400 	.word	0x40010400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800
 80056c0:	40001800 	.word	0x40001800
 80056c4:	40001c00 	.word	0x40001c00
 80056c8:	40002000 	.word	0x40002000

080056cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f023 0302 	bic.w	r3, r3, #2
 8005714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <TIM_OC1_SetConfig+0xd8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_OC1_SetConfig+0x64>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <TIM_OC1_SetConfig+0xdc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10c      	bne.n	800574a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0308 	bic.w	r3, r3, #8
 8005736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a15      	ldr	r2, [pc, #84]	; (80057a4 <TIM_OC1_SetConfig+0xd8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d003      	beq.n	800575a <TIM_OC1_SetConfig+0x8e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <TIM_OC1_SetConfig+0xdc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d111      	bne.n	800577e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	621a      	str	r2, [r3, #32]
}
 8005798:	bf00      	nop
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40010400 	.word	0x40010400

080057ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0210 	bic.w	r2, r3, #16
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0320 	bic.w	r3, r3, #32
 80057f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a22      	ldr	r2, [pc, #136]	; (8005890 <TIM_OC2_SetConfig+0xe4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC2_SetConfig+0x68>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a21      	ldr	r2, [pc, #132]	; (8005894 <TIM_OC2_SetConfig+0xe8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10d      	bne.n	8005830 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800582e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a17      	ldr	r2, [pc, #92]	; (8005890 <TIM_OC2_SetConfig+0xe4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC2_SetConfig+0x94>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <TIM_OC2_SetConfig+0xe8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d113      	bne.n	8005868 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800584e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	621a      	str	r2, [r3, #32]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40010000 	.word	0x40010000
 8005894:	40010400 	.word	0x40010400

08005898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0303 	bic.w	r3, r3, #3
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a21      	ldr	r2, [pc, #132]	; (8005978 <TIM_OC3_SetConfig+0xe0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC3_SetConfig+0x66>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a20      	ldr	r2, [pc, #128]	; (800597c <TIM_OC3_SetConfig+0xe4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d10d      	bne.n	800591a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a16      	ldr	r2, [pc, #88]	; (8005978 <TIM_OC3_SetConfig+0xe0>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d003      	beq.n	800592a <TIM_OC3_SetConfig+0x92>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <TIM_OC3_SetConfig+0xe4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d113      	bne.n	8005952 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400

08005980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a12      	ldr	r2, [pc, #72]	; (8005a24 <TIM_OC4_SetConfig+0xa4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC4_SetConfig+0x68>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a11      	ldr	r2, [pc, #68]	; (8005a28 <TIM_OC4_SetConfig+0xa8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d109      	bne.n	80059fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40010400 	.word	0x40010400

08005a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f023 030a 	bic.w	r3, r3, #10
 8005a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0210 	bic.w	r2, r3, #16
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	031b      	lsls	r3, r3, #12
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f043 0307 	orr.w	r3, r3, #7
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	609a      	str	r2, [r3, #8]
}
 8005b14:	bf00      	nop
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b087      	sub	sp, #28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	021a      	lsls	r2, r3, #8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	609a      	str	r2, [r3, #8]
}
 8005b54:	bf00      	nop
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2201      	movs	r2, #1
 8005b74:	fa02 f303 	lsl.w	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1a      	ldr	r2, [r3, #32]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	43db      	mvns	r3, r3
 8005b82:	401a      	ands	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	fa01 f303 	lsl.w	r3, r1, r3
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e05a      	b.n	8005c7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d022      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c10:	d01d      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d018      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1b      	ldr	r2, [pc, #108]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00e      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a18      	ldr	r2, [pc, #96]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d10c      	bne.n	8005c68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800

08005ca4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e03d      	b.n	8005d3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e03f      	b.n	8005e02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fb fb9a 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2224      	movs	r2, #36	; 0x24
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f829 	bl	8005e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695a      	ldr	r2, [r3, #20]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e10:	b0c0      	sub	sp, #256	; 0x100
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	68d9      	ldr	r1, [r3, #12]
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	ea40 0301 	orr.w	r3, r0, r1
 8005e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e64:	f021 010c 	bic.w	r1, r1, #12
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e72:	430b      	orrs	r3, r1
 8005e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e86:	6999      	ldr	r1, [r3, #24]
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	ea40 0301 	orr.w	r3, r0, r1
 8005e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b8f      	ldr	r3, [pc, #572]	; (80060d8 <UART_SetConfig+0x2cc>)
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d005      	beq.n	8005eac <UART_SetConfig+0xa0>
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	4b8d      	ldr	r3, [pc, #564]	; (80060dc <UART_SetConfig+0x2d0>)
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d104      	bne.n	8005eb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eac:	f7fd fda4 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
 8005eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005eb4:	e003      	b.n	8005ebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005eb6:	f7fd fd8b 	bl	80039d0 <HAL_RCC_GetPCLK1Freq>
 8005eba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ec8:	f040 810c 	bne.w	80060e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ede:	4622      	mov	r2, r4
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	1891      	adds	r1, r2, r2
 8005ee4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ee6:	415b      	adcs	r3, r3
 8005ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eee:	4621      	mov	r1, r4
 8005ef0:	eb12 0801 	adds.w	r8, r2, r1
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	eb43 0901 	adc.w	r9, r3, r1
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0e:	4690      	mov	r8, r2
 8005f10:	4699      	mov	r9, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	eb18 0303 	adds.w	r3, r8, r3
 8005f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	eb49 0303 	adc.w	r3, r9, r3
 8005f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	18db      	adds	r3, r3, r3
 8005f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f40:	4613      	mov	r3, r2
 8005f42:	eb42 0303 	adc.w	r3, r2, r3
 8005f46:	657b      	str	r3, [r7, #84]	; 0x54
 8005f48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f50:	f7fa f95e 	bl	8000210 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4b61      	ldr	r3, [pc, #388]	; (80060e0 <UART_SetConfig+0x2d4>)
 8005f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	011c      	lsls	r4, r3, #4
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f66:	2200      	movs	r2, #0
 8005f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	1891      	adds	r1, r2, r2
 8005f7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f7c:	415b      	adcs	r3, r3
 8005f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f84:	4641      	mov	r1, r8
 8005f86:	eb12 0a01 	adds.w	sl, r2, r1
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fa4:	4692      	mov	sl, r2
 8005fa6:	469b      	mov	fp, r3
 8005fa8:	4643      	mov	r3, r8
 8005faa:	eb1a 0303 	adds.w	r3, sl, r3
 8005fae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8005fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	18db      	adds	r3, r3, r3
 8005fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	eb42 0303 	adc.w	r3, r2, r3
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8005fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fe6:	f7fa f913 	bl	8000210 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <UART_SetConfig+0x2d4>)
 8005ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	2264      	movs	r2, #100	; 0x64
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	1acb      	subs	r3, r1, r3
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006006:	4b36      	ldr	r3, [pc, #216]	; (80060e0 <UART_SetConfig+0x2d4>)
 8006008:	fba3 2302 	umull	r2, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006014:	441c      	add	r4, r3
 8006016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601a:	2200      	movs	r2, #0
 800601c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006020:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006028:	4642      	mov	r2, r8
 800602a:	464b      	mov	r3, r9
 800602c:	1891      	adds	r1, r2, r2
 800602e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006030:	415b      	adcs	r3, r3
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006038:	4641      	mov	r1, r8
 800603a:	1851      	adds	r1, r2, r1
 800603c:	6339      	str	r1, [r7, #48]	; 0x30
 800603e:	4649      	mov	r1, r9
 8006040:	414b      	adcs	r3, r1
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006050:	4659      	mov	r1, fp
 8006052:	00cb      	lsls	r3, r1, #3
 8006054:	4651      	mov	r1, sl
 8006056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800605a:	4651      	mov	r1, sl
 800605c:	00ca      	lsls	r2, r1, #3
 800605e:	4610      	mov	r0, r2
 8006060:	4619      	mov	r1, r3
 8006062:	4603      	mov	r3, r0
 8006064:	4642      	mov	r2, r8
 8006066:	189b      	adds	r3, r3, r2
 8006068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800606c:	464b      	mov	r3, r9
 800606e:	460a      	mov	r2, r1
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006084:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800608c:	460b      	mov	r3, r1
 800608e:	18db      	adds	r3, r3, r3
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
 8006092:	4613      	mov	r3, r2
 8006094:	eb42 0303 	adc.w	r3, r2, r3
 8006098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800609a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800609e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060a2:	f7fa f8b5 	bl	8000210 <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <UART_SetConfig+0x2d4>)
 80060ac:	fba3 1302 	umull	r1, r3, r3, r2
 80060b0:	095b      	lsrs	r3, r3, #5
 80060b2:	2164      	movs	r1, #100	; 0x64
 80060b4:	fb01 f303 	mul.w	r3, r1, r3
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	3332      	adds	r3, #50	; 0x32
 80060be:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <UART_SetConfig+0x2d4>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	f003 0207 	and.w	r2, r3, #7
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4422      	add	r2, r4
 80060d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060d4:	e105      	b.n	80062e2 <UART_SetConfig+0x4d6>
 80060d6:	bf00      	nop
 80060d8:	40011000 	.word	0x40011000
 80060dc:	40011400 	.word	0x40011400
 80060e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060f6:	4642      	mov	r2, r8
 80060f8:	464b      	mov	r3, r9
 80060fa:	1891      	adds	r1, r2, r2
 80060fc:	6239      	str	r1, [r7, #32]
 80060fe:	415b      	adcs	r3, r3
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006106:	4641      	mov	r1, r8
 8006108:	1854      	adds	r4, r2, r1
 800610a:	4649      	mov	r1, r9
 800610c:	eb43 0501 	adc.w	r5, r3, r1
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	00eb      	lsls	r3, r5, #3
 800611a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800611e:	00e2      	lsls	r2, r4, #3
 8006120:	4614      	mov	r4, r2
 8006122:	461d      	mov	r5, r3
 8006124:	4643      	mov	r3, r8
 8006126:	18e3      	adds	r3, r4, r3
 8006128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800612c:	464b      	mov	r3, r9
 800612e:	eb45 0303 	adc.w	r3, r5, r3
 8006132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006152:	4629      	mov	r1, r5
 8006154:	008b      	lsls	r3, r1, #2
 8006156:	4621      	mov	r1, r4
 8006158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800615c:	4621      	mov	r1, r4
 800615e:	008a      	lsls	r2, r1, #2
 8006160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006164:	f7fa f854 	bl	8000210 <__aeabi_uldivmod>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4b60      	ldr	r3, [pc, #384]	; (80062f0 <UART_SetConfig+0x4e4>)
 800616e:	fba3 2302 	umull	r2, r3, r3, r2
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	011c      	lsls	r4, r3, #4
 8006176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800617a:	2200      	movs	r2, #0
 800617c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006180:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	1891      	adds	r1, r2, r2
 800618e:	61b9      	str	r1, [r7, #24]
 8006190:	415b      	adcs	r3, r3
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006198:	4641      	mov	r1, r8
 800619a:	1851      	adds	r1, r2, r1
 800619c:	6139      	str	r1, [r7, #16]
 800619e:	4649      	mov	r1, r9
 80061a0:	414b      	adcs	r3, r1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061b0:	4659      	mov	r1, fp
 80061b2:	00cb      	lsls	r3, r1, #3
 80061b4:	4651      	mov	r1, sl
 80061b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ba:	4651      	mov	r1, sl
 80061bc:	00ca      	lsls	r2, r1, #3
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	4642      	mov	r2, r8
 80061c6:	189b      	adds	r3, r3, r2
 80061c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061cc:	464b      	mov	r3, r9
 80061ce:	460a      	mov	r2, r1
 80061d0:	eb42 0303 	adc.w	r3, r2, r3
 80061d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80061e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061f0:	4649      	mov	r1, r9
 80061f2:	008b      	lsls	r3, r1, #2
 80061f4:	4641      	mov	r1, r8
 80061f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061fa:	4641      	mov	r1, r8
 80061fc:	008a      	lsls	r2, r1, #2
 80061fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006202:	f7fa f805 	bl	8000210 <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4b39      	ldr	r3, [pc, #228]	; (80062f0 <UART_SetConfig+0x4e4>)
 800620c:	fba3 1302 	umull	r1, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	2164      	movs	r1, #100	; 0x64
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	3332      	adds	r3, #50	; 0x32
 800621e:	4a34      	ldr	r2, [pc, #208]	; (80062f0 <UART_SetConfig+0x4e4>)
 8006220:	fba2 2303 	umull	r2, r3, r2, r3
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800622a:	441c      	add	r4, r3
 800622c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006230:	2200      	movs	r2, #0
 8006232:	673b      	str	r3, [r7, #112]	; 0x70
 8006234:	677a      	str	r2, [r7, #116]	; 0x74
 8006236:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800623a:	4642      	mov	r2, r8
 800623c:	464b      	mov	r3, r9
 800623e:	1891      	adds	r1, r2, r2
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	415b      	adcs	r3, r3
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800624a:	4641      	mov	r1, r8
 800624c:	1851      	adds	r1, r2, r1
 800624e:	6039      	str	r1, [r7, #0]
 8006250:	4649      	mov	r1, r9
 8006252:	414b      	adcs	r3, r1
 8006254:	607b      	str	r3, [r7, #4]
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006262:	4659      	mov	r1, fp
 8006264:	00cb      	lsls	r3, r1, #3
 8006266:	4651      	mov	r1, sl
 8006268:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800626c:	4651      	mov	r1, sl
 800626e:	00ca      	lsls	r2, r1, #3
 8006270:	4610      	mov	r0, r2
 8006272:	4619      	mov	r1, r3
 8006274:	4603      	mov	r3, r0
 8006276:	4642      	mov	r2, r8
 8006278:	189b      	adds	r3, r3, r2
 800627a:	66bb      	str	r3, [r7, #104]	; 0x68
 800627c:	464b      	mov	r3, r9
 800627e:	460a      	mov	r2, r1
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	663b      	str	r3, [r7, #96]	; 0x60
 8006290:	667a      	str	r2, [r7, #100]	; 0x64
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800629e:	4649      	mov	r1, r9
 80062a0:	008b      	lsls	r3, r1, #2
 80062a2:	4641      	mov	r1, r8
 80062a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062a8:	4641      	mov	r1, r8
 80062aa:	008a      	lsls	r2, r1, #2
 80062ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062b0:	f7f9 ffae 	bl	8000210 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <UART_SetConfig+0x4e4>)
 80062ba:	fba3 1302 	umull	r1, r3, r3, r2
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	2164      	movs	r1, #100	; 0x64
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	3332      	adds	r3, #50	; 0x32
 80062cc:	4a08      	ldr	r2, [pc, #32]	; (80062f0 <UART_SetConfig+0x4e4>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4422      	add	r2, r4
 80062e0:	609a      	str	r2, [r3, #8]
}
 80062e2:	bf00      	nop
 80062e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062e8:	46bd      	mov	sp, r7
 80062ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ee:	bf00      	nop
 80062f0:	51eb851f 	.word	0x51eb851f

080062f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <osDelay+0x16>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	e000      	b.n	800630c <osDelay+0x18>
 800630a:	2301      	movs	r3, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f000 feaf 	bl	8007070 <vTaskDelay>
  
  return osOK;
 8006312:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f103 0208 	add.w	r2, r3, #8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f103 0208 	add.w	r2, r3, #8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f103 0208 	add.w	r2, r3, #8
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d103      	bne.n	80063de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e00c      	b.n	80063f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3308      	adds	r3, #8
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e002      	b.n	80063ec <vListInsert+0x2e>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d2f6      	bcs.n	80063e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	601a      	str	r2, [r3, #0]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6892      	ldr	r2, [r2, #8]
 8006446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6852      	ldr	r2, [r2, #4]
 8006450:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	d103      	bne.n	8006464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	1e5a      	subs	r2, r3, #1
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064ae:	f001 fd81 	bl	8007fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	441a      	add	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	3b01      	subs	r3, #1
 80064e0:	68f9      	ldr	r1, [r7, #12]
 80064e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064e4:	fb01 f303 	mul.w	r3, r1, r3
 80064e8:	441a      	add	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	22ff      	movs	r2, #255	; 0xff
 80064f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d114      	bne.n	800652e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01a      	beq.n	8006542 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3310      	adds	r3, #16
 8006510:	4618      	mov	r0, r3
 8006512:	f001 f843 	bl	800759c <xTaskRemoveFromEventList>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d012      	beq.n	8006542 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <xQueueGenericReset+0xcc>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	e009      	b.n	8006542 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3310      	adds	r3, #16
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fef2 	bl	800631c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3324      	adds	r3, #36	; 0x24
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff feed 	bl	800631c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006542:	f001 fd67 	bl	8008014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006546:	2301      	movs	r3, #1
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	; 0x28
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656c:	f383 8811 	msr	BASEPRI, r3
 8006570:	f3bf 8f6f 	isb	sy
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	613b      	str	r3, [r7, #16]
}
 800657a:	bf00      	nop
 800657c:	e7fe      	b.n	800657c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	fb02 f303 	mul.w	r3, r2, r3
 8006586:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3348      	adds	r3, #72	; 0x48
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fdf3 	bl	8008178 <pvPortMalloc>
 8006592:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d011      	beq.n	80065be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	3348      	adds	r3, #72	; 0x48
 80065a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ac:	79fa      	ldrb	r2, [r7, #7]
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	4613      	mov	r3, r2
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f805 	bl	80065c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065be:	69bb      	ldr	r3, [r7, #24]
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3720      	adds	r7, #32
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d103      	bne.n	80065e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	e002      	b.n	80065ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065f6:	2101      	movs	r1, #1
 80065f8:	69b8      	ldr	r0, [r7, #24]
 80065fa:	f7ff ff43 	bl	8006484 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08e      	sub	sp, #56	; 0x38
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006616:	2300      	movs	r3, #0
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xQueueGenericSend+0x32>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <xQueueGenericSend+0x40>
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <xQueueGenericSend+0x44>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <xQueueGenericSend+0x46>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <xQueueGenericSend+0x60>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d103      	bne.n	8006676 <xQueueGenericSend+0x6e>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <xQueueGenericSend+0x72>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <xQueueGenericSend+0x74>
 800667a:	2300      	movs	r3, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xQueueGenericSend+0x8e>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	623b      	str	r3, [r7, #32]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006696:	f001 f941 	bl	800791c <xTaskGetSchedulerState>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <xQueueGenericSend+0x9e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <xQueueGenericSend+0xa2>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <xQueueGenericSend+0xa4>
 80066aa:	2300      	movs	r3, #0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	61fb      	str	r3, [r7, #28]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066c6:	f001 fc75 	bl	8007fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d302      	bcc.n	80066dc <xQueueGenericSend+0xd4>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d129      	bne.n	8006730 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e2:	f000 f9b3 	bl	8006a4c <prvCopyDataToQueue>
 80066e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 ff51 	bl	800759c <xTaskRemoveFromEventList>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d013      	beq.n	8006728 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <xQueueGenericSend+0x1f8>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	e00a      	b.n	8006728 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006718:	4b39      	ldr	r3, [pc, #228]	; (8006800 <xQueueGenericSend+0x1f8>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006728:	f001 fc74 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 800672c:	2301      	movs	r3, #1
 800672e:	e063      	b.n	80067f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006736:	f001 fc6d 	bl	8008014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800673a:	2300      	movs	r3, #0
 800673c:	e05c      	b.n	80067f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800673e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006740:	2b00      	cmp	r3, #0
 8006742:	d106      	bne.n	8006752 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	4618      	mov	r0, r3
 800674a:	f000 ff89 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800674e:	2301      	movs	r3, #1
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006752:	f001 fc5f 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006756:	f000 fd29 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800675a:	f001 fc2b 	bl	8007fb4 <vPortEnterCritical>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006764:	b25b      	sxtb	r3, r3
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d103      	bne.n	8006774 <xQueueGenericSend+0x16c>
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800677a:	b25b      	sxtb	r3, r3
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d103      	bne.n	800678a <xQueueGenericSend+0x182>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800678a:	f001 fc43 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800678e:	1d3a      	adds	r2, r7, #4
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f000 ff78 	bl	800768c <xTaskCheckForTimeOut>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d124      	bne.n	80067ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067a4:	f000 fa24 	bl	8006bf0 <prvIsQueueFull>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	3310      	adds	r3, #16
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fecc 	bl	8007554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067be:	f000 f9af 	bl	8006b20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067c2:	f000 fd01 	bl	80071c8 <xTaskResumeAll>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f47f af7c 	bne.w	80066c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <xQueueGenericSend+0x1f8>)
 80067d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	e772      	b.n	80066c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067e2:	f000 f99d 	bl	8006b20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067e6:	f000 fcef 	bl	80071c8 <xTaskResumeAll>
 80067ea:	e76c      	b.n	80066c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ee:	f000 f997 	bl	8006b20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067f2:	f000 fce9 	bl	80071c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3738      	adds	r7, #56	; 0x38
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	; 0x38
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	623b      	str	r3, [r7, #32]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	61fb      	str	r3, [r7, #28]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006854:	f001 f862 	bl	800791c <xTaskGetSchedulerState>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d102      	bne.n	8006864 <xQueueSemaphoreTake+0x60>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <xQueueSemaphoreTake+0x64>
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <xQueueSemaphoreTake+0x66>
 8006868:	2300      	movs	r3, #0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10a      	bne.n	8006884 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	61bb      	str	r3, [r7, #24]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006884:	f001 fb96 	bl	8007fb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	d024      	beq.n	80068de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	1e5a      	subs	r2, r3, #1
 8006898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80068a4:	f001 f9e2 	bl	8007c6c <pvTaskIncrementMutexHeldCount>
 80068a8:	4602      	mov	r2, r0
 80068aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00f      	beq.n	80068d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	3310      	adds	r3, #16
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 fe6e 	bl	800759c <xTaskRemoveFromEventList>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068c6:	4b54      	ldr	r3, [pc, #336]	; (8006a18 <xQueueSemaphoreTake+0x214>)
 80068c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068d6:	f001 fb9d 	bl	8008014 <vPortExitCritical>
				return pdPASS;
 80068da:	2301      	movs	r3, #1
 80068dc:	e097      	b.n	8006a0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d111      	bne.n	8006908 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	617b      	str	r3, [r7, #20]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006900:	f001 fb88 	bl	8008014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006904:	2300      	movs	r3, #0
 8006906:	e082      	b.n	8006a0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800690e:	f107 030c 	add.w	r3, r7, #12
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fea4 	bl	8007660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800691c:	f001 fb7a 	bl	8008014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006920:	f000 fc44 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006924:	f001 fb46 	bl	8007fb4 <vPortEnterCritical>
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800692e:	b25b      	sxtb	r3, r3
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d103      	bne.n	800693e <xQueueSemaphoreTake+0x13a>
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006944:	b25b      	sxtb	r3, r3
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d103      	bne.n	8006954 <xQueueSemaphoreTake+0x150>
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006954:	f001 fb5e 	bl	8008014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006958:	463a      	mov	r2, r7
 800695a:	f107 030c 	add.w	r3, r7, #12
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fe93 	bl	800768c <xTaskCheckForTimeOut>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d132      	bne.n	80069d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800696c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800696e:	f000 f929 	bl	8006bc4 <prvIsQueueEmpty>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d026      	beq.n	80069c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006980:	f001 fb18 	bl	8007fb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	4618      	mov	r0, r3
 800698a:	f000 ffe5 	bl	8007958 <xTaskPriorityInherit>
 800698e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006990:	f001 fb40 	bl	8008014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	3324      	adds	r3, #36	; 0x24
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	4611      	mov	r1, r2
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fdd9 	bl	8007554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069a4:	f000 f8bc 	bl	8006b20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069a8:	f000 fc0e 	bl	80071c8 <xTaskResumeAll>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f47f af68 	bne.w	8006884 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80069b4:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <xQueueSemaphoreTake+0x214>)
 80069b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	e75e      	b.n	8006884 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80069c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069c8:	f000 f8aa 	bl	8006b20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069cc:	f000 fbfc 	bl	80071c8 <xTaskResumeAll>
 80069d0:	e758      	b.n	8006884 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80069d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069d4:	f000 f8a4 	bl	8006b20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069d8:	f000 fbf6 	bl	80071c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069de:	f000 f8f1 	bl	8006bc4 <prvIsQueueEmpty>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f43f af4d 	beq.w	8006884 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80069f0:	f001 fae0 	bl	8007fb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80069f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069f6:	f000 f811 	bl	8006a1c <prvGetDisinheritPriorityAfterTimeout>
 80069fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 f8a4 	bl	8007b50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006a08:	f001 fb04 	bl	8008014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3738      	adds	r7, #56	; 0x38
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d006      	beq.n	8006a3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f1c3 0307 	rsb	r3, r3, #7
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e001      	b.n	8006a3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10d      	bne.n	8006a86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d14d      	bne.n	8006b0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 ffe4 	bl	8007a44 <xTaskPriorityDisinherit>
 8006a7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	e043      	b.n	8006b0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d119      	bne.n	8006ac0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6858      	ldr	r0, [r3, #4]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a94:	461a      	mov	r2, r3
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	f001 fd7e 	bl	8008598 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	441a      	add	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d32b      	bcc.n	8006b0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	605a      	str	r2, [r3, #4]
 8006abe:	e026      	b.n	8006b0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68d8      	ldr	r0, [r3, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	f001 fd64 	bl	8008598 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	425b      	negs	r3, r3
 8006ada:	441a      	add	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d207      	bcs.n	8006afc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	425b      	negs	r3, r3
 8006af6:	441a      	add	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d105      	bne.n	8006b0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b16:	697b      	ldr	r3, [r7, #20]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b28:	f001 fa44 	bl	8007fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b34:	e011      	b.n	8006b5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d012      	beq.n	8006b64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3324      	adds	r3, #36	; 0x24
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd2a 	bl	800759c <xTaskRemoveFromEventList>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b4e:	f000 fdff 	bl	8007750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dce9      	bgt.n	8006b36 <prvUnlockQueue+0x16>
 8006b62:	e000      	b.n	8006b66 <prvUnlockQueue+0x46>
					break;
 8006b64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b6e:	f001 fa51 	bl	8008014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b72:	f001 fa1f 	bl	8007fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b7e:	e011      	b.n	8006ba4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d012      	beq.n	8006bae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3310      	adds	r3, #16
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 fd05 	bl	800759c <xTaskRemoveFromEventList>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b98:	f000 fdda 	bl	8007750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dce9      	bgt.n	8006b80 <prvUnlockQueue+0x60>
 8006bac:	e000      	b.n	8006bb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006bb8:	f001 fa2c 	bl	8008014 <vPortExitCritical>
}
 8006bbc:	bf00      	nop
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bcc:	f001 f9f2 	bl	8007fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d102      	bne.n	8006bde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	e001      	b.n	8006be2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006be2:	f001 fa17 	bl	8008014 <vPortExitCritical>

	return xReturn;
 8006be6:	68fb      	ldr	r3, [r7, #12]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bf8:	f001 f9dc 	bl	8007fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d102      	bne.n	8006c0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	e001      	b.n	8006c12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c12:	f001 f9ff 	bl	8008014 <vPortExitCritical>

	return xReturn;
 8006c16:	68fb      	ldr	r3, [r7, #12]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08e      	sub	sp, #56	; 0x38
 8006c24:	af04      	add	r7, sp, #16
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	623b      	str	r3, [r7, #32]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10a      	bne.n	8006c66 <xTaskCreateStatic+0x46>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	61fb      	str	r3, [r7, #28]
}
 8006c62:	bf00      	nop
 8006c64:	e7fe      	b.n	8006c64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c66:	23b4      	movs	r3, #180	; 0xb4
 8006c68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2bb4      	cmp	r3, #180	; 0xb4
 8006c6e:	d00a      	beq.n	8006c86 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	61bb      	str	r3, [r7, #24]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01e      	beq.n	8006ccc <xTaskCreateStatic+0xac>
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01b      	beq.n	8006ccc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	f107 0314 	add.w	r3, r7, #20
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f850 	bl	8006d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc6:	f000 f8eb 	bl	8006ea0 <prvAddNewTaskToReadyList>
 8006cca:	e001      	b.n	8006cd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006cd0:	697b      	ldr	r3, [r7, #20]
	}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3728      	adds	r7, #40	; 0x28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b08c      	sub	sp, #48	; 0x30
 8006cde:	af04      	add	r7, sp, #16
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	603b      	str	r3, [r7, #0]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fa42 	bl	8008178 <pvPortMalloc>
 8006cf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00e      	beq.n	8006d1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cfc:	20b4      	movs	r0, #180	; 0xb4
 8006cfe:	f001 fa3b 	bl	8008178 <pvPortMalloc>
 8006d02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d10:	e005      	b.n	8006d1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d12:	6978      	ldr	r0, [r7, #20]
 8006d14:	f001 fafc 	bl	8008310 <vPortFree>
 8006d18:	e001      	b.n	8006d1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d017      	beq.n	8006d54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9303      	str	r3, [sp, #12]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 f80e 	bl	8006d64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d48:	69f8      	ldr	r0, [r7, #28]
 8006d4a:	f000 f8a9 	bl	8006ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	e002      	b.n	8006d5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3720      	adds	r7, #32
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f023 0307 	bic.w	r3, r3, #7
 8006d8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <prvInitialiseNewTask+0x48>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	617b      	str	r3, [r7, #20]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d01f      	beq.n	8006df2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
 8006db6:	e012      	b.n	8006dde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	7819      	ldrb	r1, [r3, #0]
 8006dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3334      	adds	r3, #52	; 0x34
 8006dc8:	460a      	mov	r2, r1
 8006dca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2b0f      	cmp	r3, #15
 8006de2:	d9e9      	bls.n	8006db8 <prvInitialiseNewTask+0x54>
 8006de4:	e000      	b.n	8006de8 <prvInitialiseNewTask+0x84>
			{
				break;
 8006de6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006df0:	e003      	b.n	8006dfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2b06      	cmp	r3, #6
 8006dfe:	d901      	bls.n	8006e04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e00:	2306      	movs	r3, #6
 8006e02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	2200      	movs	r2, #0
 8006e14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fa9e 	bl	800635c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	3318      	adds	r3, #24
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff fa99 	bl	800635c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	f1c3 0207 	rsb	r2, r3, #7
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	2200      	movs	r2, #0
 8006e44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	334c      	adds	r3, #76	; 0x4c
 8006e54:	2260      	movs	r2, #96	; 0x60
 8006e56:	2100      	movs	r1, #0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 fbab 	bl	80085b4 <memset>
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	4a0c      	ldr	r2, [pc, #48]	; (8006e94 <prvInitialiseNewTask+0x130>)
 8006e62:	651a      	str	r2, [r3, #80]	; 0x50
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	4a0c      	ldr	r2, [pc, #48]	; (8006e98 <prvInitialiseNewTask+0x134>)
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <prvInitialiseNewTask+0x138>)
 8006e6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	69b8      	ldr	r0, [r7, #24]
 8006e76:	f000 ff73 	bl	8007d60 <pxPortInitialiseStack>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e8c:	bf00      	nop
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	080087d4 	.word	0x080087d4
 8006e98:	080087f4 	.word	0x080087f4
 8006e9c:	080087b4 	.word	0x080087b4

08006ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ea8:	f001 f884 	bl	8007fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006eac:	4b2a      	ldr	r3, [pc, #168]	; (8006f58 <prvAddNewTaskToReadyList+0xb8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <prvAddNewTaskToReadyList+0xb8>)
 8006eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006eb6:	4b29      	ldr	r3, [pc, #164]	; (8006f5c <prvAddNewTaskToReadyList+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ebe:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <prvAddNewTaskToReadyList+0xbc>)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ec4:	4b24      	ldr	r3, [pc, #144]	; (8006f58 <prvAddNewTaskToReadyList+0xb8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d110      	bne.n	8006eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ecc:	f000 fc64 	bl	8007798 <prvInitialiseTaskLists>
 8006ed0:	e00d      	b.n	8006eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ed2:	4b23      	ldr	r3, [pc, #140]	; (8006f60 <prvAddNewTaskToReadyList+0xc0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <prvAddNewTaskToReadyList+0xbc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d802      	bhi.n	8006eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <prvAddNewTaskToReadyList+0xbc>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006eee:	4b1d      	ldr	r3, [pc, #116]	; (8006f64 <prvAddNewTaskToReadyList+0xc4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	4a1b      	ldr	r2, [pc, #108]	; (8006f64 <prvAddNewTaskToReadyList+0xc4>)
 8006ef6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	2201      	movs	r2, #1
 8006efe:	409a      	lsls	r2, r3
 8006f00:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <prvAddNewTaskToReadyList+0xc8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <prvAddNewTaskToReadyList+0xc8>)
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <prvAddNewTaskToReadyList+0xcc>)
 8006f18:	441a      	add	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4610      	mov	r0, r2
 8006f22:	f7ff fa28 	bl	8006376 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f26:	f001 f875 	bl	8008014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	; (8006f60 <prvAddNewTaskToReadyList+0xc0>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00e      	beq.n	8006f50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f32:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <prvAddNewTaskToReadyList+0xbc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d207      	bcs.n	8006f50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <prvAddNewTaskToReadyList+0xd0>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200006c8 	.word	0x200006c8
 8006f5c:	200005c8 	.word	0x200005c8
 8006f60:	200006d4 	.word	0x200006d4
 8006f64:	200006e4 	.word	0x200006e4
 8006f68:	200006d0 	.word	0x200006d0
 8006f6c:	200005cc 	.word	0x200005cc
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <vTaskDelayUntil+0x2a>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	617b      	str	r3, [r7, #20]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10a      	bne.n	8006fba <vTaskDelayUntil+0x46>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	613b      	str	r3, [r7, #16]
}
 8006fb6:	bf00      	nop
 8006fb8:	e7fe      	b.n	8006fb8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006fba:	4b2a      	ldr	r3, [pc, #168]	; (8007064 <vTaskDelayUntil+0xf0>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <vTaskDelayUntil+0x64>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	60fb      	str	r3, [r7, #12]
}
 8006fd4:	bf00      	nop
 8006fd6:	e7fe      	b.n	8006fd6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006fd8:	f000 f8e8 	bl	80071ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006fdc:	4b22      	ldr	r3, [pc, #136]	; (8007068 <vTaskDelayUntil+0xf4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	4413      	add	r3, r2
 8006fea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6a3a      	ldr	r2, [r7, #32]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d20b      	bcs.n	800700e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d211      	bcs.n	8007024 <vTaskDelayUntil+0xb0>
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	429a      	cmp	r2, r3
 8007006:	d90d      	bls.n	8007024 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007008:	2301      	movs	r3, #1
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
 800700c:	e00a      	b.n	8007024 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	429a      	cmp	r2, r3
 8007016:	d303      	bcc.n	8007020 <vTaskDelayUntil+0xac>
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	429a      	cmp	r2, r3
 800701e:	d901      	bls.n	8007024 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	2b00      	cmp	r3, #0
 800702e:	d006      	beq.n	800703e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fe2b 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800703e:	f000 f8c3 	bl	80071c8 <xTaskResumeAll>
 8007042:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d107      	bne.n	800705a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800704a:	4b08      	ldr	r3, [pc, #32]	; (800706c <vTaskDelayUntil+0xf8>)
 800704c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800705a:	bf00      	nop
 800705c:	3728      	adds	r7, #40	; 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	200006f0 	.word	0x200006f0
 8007068:	200006cc 	.word	0x200006cc
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d017      	beq.n	80070b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007082:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <vTaskDelay+0x60>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <vTaskDelay+0x30>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	60bb      	str	r3, [r7, #8]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070a0:	f000 f884 	bl	80071ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070a4:	2100      	movs	r1, #0
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fdf4 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070ac:	f000 f88c 	bl	80071c8 <xTaskResumeAll>
 80070b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d107      	bne.n	80070c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <vTaskDelay+0x64>)
 80070ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	200006f0 	.word	0x200006f0
 80070d4:	e000ed04 	.word	0xe000ed04

080070d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070e6:	463a      	mov	r2, r7
 80070e8:	1d39      	adds	r1, r7, #4
 80070ea:	f107 0308 	add.w	r3, r7, #8
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7f9 fc1a 	bl	8000928 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	9202      	str	r2, [sp, #8]
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	2300      	movs	r3, #0
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	2300      	movs	r3, #0
 8007104:	460a      	mov	r2, r1
 8007106:	4921      	ldr	r1, [pc, #132]	; (800718c <vTaskStartScheduler+0xb4>)
 8007108:	4821      	ldr	r0, [pc, #132]	; (8007190 <vTaskStartScheduler+0xb8>)
 800710a:	f7ff fd89 	bl	8006c20 <xTaskCreateStatic>
 800710e:	4603      	mov	r3, r0
 8007110:	4a20      	ldr	r2, [pc, #128]	; (8007194 <vTaskStartScheduler+0xbc>)
 8007112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007114:	4b1f      	ldr	r3, [pc, #124]	; (8007194 <vTaskStartScheduler+0xbc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800711c:	2301      	movs	r3, #1
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	e001      	b.n	8007126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d11b      	bne.n	8007164 <vTaskStartScheduler+0x8c>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	613b      	str	r3, [r7, #16]
}
 800713e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007140:	4b15      	ldr	r3, [pc, #84]	; (8007198 <vTaskStartScheduler+0xc0>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	334c      	adds	r3, #76	; 0x4c
 8007146:	4a15      	ldr	r2, [pc, #84]	; (800719c <vTaskStartScheduler+0xc4>)
 8007148:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800714a:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <vTaskStartScheduler+0xc8>)
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007152:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <vTaskStartScheduler+0xcc>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007158:	4b13      	ldr	r3, [pc, #76]	; (80071a8 <vTaskStartScheduler+0xd0>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800715e:	f000 fe87 	bl	8007e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007162:	e00e      	b.n	8007182 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d10a      	bne.n	8007182 <vTaskStartScheduler+0xaa>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60fb      	str	r3, [r7, #12]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <vTaskStartScheduler+0xa8>
}
 8007182:	bf00      	nop
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	08008794 	.word	0x08008794
 8007190:	08007769 	.word	0x08007769
 8007194:	200006ec 	.word	0x200006ec
 8007198:	200005c8 	.word	0x200005c8
 800719c:	2000001c 	.word	0x2000001c
 80071a0:	200006e8 	.word	0x200006e8
 80071a4:	200006d4 	.word	0x200006d4
 80071a8:	200006cc 	.word	0x200006cc

080071ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <vTaskSuspendAll+0x18>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a03      	ldr	r2, [pc, #12]	; (80071c4 <vTaskSuspendAll+0x18>)
 80071b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	200006f0 	.word	0x200006f0

080071c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071d6:	4b41      	ldr	r3, [pc, #260]	; (80072dc <xTaskResumeAll+0x114>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071f4:	f000 fede 	bl	8007fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071f8:	4b38      	ldr	r3, [pc, #224]	; (80072dc <xTaskResumeAll+0x114>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	4a37      	ldr	r2, [pc, #220]	; (80072dc <xTaskResumeAll+0x114>)
 8007200:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007202:	4b36      	ldr	r3, [pc, #216]	; (80072dc <xTaskResumeAll+0x114>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d161      	bne.n	80072ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800720a:	4b35      	ldr	r3, [pc, #212]	; (80072e0 <xTaskResumeAll+0x118>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d05d      	beq.n	80072ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007212:	e02e      	b.n	8007272 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007214:	4b33      	ldr	r3, [pc, #204]	; (80072e4 <xTaskResumeAll+0x11c>)
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3318      	adds	r3, #24
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff f905 	bl	8006430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	3304      	adds	r3, #4
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff f900 	bl	8006430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007234:	2201      	movs	r2, #1
 8007236:	409a      	lsls	r2, r3
 8007238:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <xTaskResumeAll+0x120>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4313      	orrs	r3, r2
 800723e:	4a2a      	ldr	r2, [pc, #168]	; (80072e8 <xTaskResumeAll+0x120>)
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4a27      	ldr	r2, [pc, #156]	; (80072ec <xTaskResumeAll+0x124>)
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f7ff f88c 	bl	8006376 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007262:	4b23      	ldr	r3, [pc, #140]	; (80072f0 <xTaskResumeAll+0x128>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	429a      	cmp	r2, r3
 800726a:	d302      	bcc.n	8007272 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800726c:	4b21      	ldr	r3, [pc, #132]	; (80072f4 <xTaskResumeAll+0x12c>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007272:	4b1c      	ldr	r3, [pc, #112]	; (80072e4 <xTaskResumeAll+0x11c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1cc      	bne.n	8007214 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007280:	f000 fb2c 	bl	80078dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007284:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <xTaskResumeAll+0x130>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d010      	beq.n	80072b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007290:	f000 f846 	bl	8007320 <xTaskIncrementTick>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d002      	beq.n	80072a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800729a:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <xTaskResumeAll+0x12c>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1f1      	bne.n	8007290 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80072ac:	4b12      	ldr	r3, [pc, #72]	; (80072f8 <xTaskResumeAll+0x130>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072b2:	4b10      	ldr	r3, [pc, #64]	; (80072f4 <xTaskResumeAll+0x12c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d009      	beq.n	80072ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <xTaskResumeAll+0x134>)
 80072c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072ce:	f000 fea1 	bl	8008014 <vPortExitCritical>

	return xAlreadyYielded;
 80072d2:	68bb      	ldr	r3, [r7, #8]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200006f0 	.word	0x200006f0
 80072e0:	200006c8 	.word	0x200006c8
 80072e4:	20000688 	.word	0x20000688
 80072e8:	200006d0 	.word	0x200006d0
 80072ec:	200005cc 	.word	0x200005cc
 80072f0:	200005c8 	.word	0x200005c8
 80072f4:	200006dc 	.word	0x200006dc
 80072f8:	200006d8 	.word	0x200006d8
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007306:	4b05      	ldr	r3, [pc, #20]	; (800731c <xTaskGetTickCount+0x1c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800730c:	687b      	ldr	r3, [r7, #4]
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	200006cc 	.word	0x200006cc

08007320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800732a:	4b4e      	ldr	r3, [pc, #312]	; (8007464 <xTaskIncrementTick+0x144>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 808e 	bne.w	8007450 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007334:	4b4c      	ldr	r3, [pc, #304]	; (8007468 <xTaskIncrementTick+0x148>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800733c:	4a4a      	ldr	r2, [pc, #296]	; (8007468 <xTaskIncrementTick+0x148>)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d120      	bne.n	800738a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007348:	4b48      	ldr	r3, [pc, #288]	; (800746c <xTaskIncrementTick+0x14c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <xTaskIncrementTick+0x48>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	603b      	str	r3, [r7, #0]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <xTaskIncrementTick+0x46>
 8007368:	4b40      	ldr	r3, [pc, #256]	; (800746c <xTaskIncrementTick+0x14c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	4b40      	ldr	r3, [pc, #256]	; (8007470 <xTaskIncrementTick+0x150>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a3e      	ldr	r2, [pc, #248]	; (800746c <xTaskIncrementTick+0x14c>)
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4a3e      	ldr	r2, [pc, #248]	; (8007470 <xTaskIncrementTick+0x150>)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <xTaskIncrementTick+0x154>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	4a3c      	ldr	r2, [pc, #240]	; (8007474 <xTaskIncrementTick+0x154>)
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	f000 faa9 	bl	80078dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800738a:	4b3b      	ldr	r3, [pc, #236]	; (8007478 <xTaskIncrementTick+0x158>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	429a      	cmp	r2, r3
 8007392:	d348      	bcc.n	8007426 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007394:	4b35      	ldr	r3, [pc, #212]	; (800746c <xTaskIncrementTick+0x14c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739e:	4b36      	ldr	r3, [pc, #216]	; (8007478 <xTaskIncrementTick+0x158>)
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	601a      	str	r2, [r3, #0]
					break;
 80073a6:	e03e      	b.n	8007426 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a8:	4b30      	ldr	r3, [pc, #192]	; (800746c <xTaskIncrementTick+0x14c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d203      	bcs.n	80073c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073c0:	4a2d      	ldr	r2, [pc, #180]	; (8007478 <xTaskIncrementTick+0x158>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073c6:	e02e      	b.n	8007426 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff f82f 	bl	8006430 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	3318      	adds	r3, #24
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff f826 	bl	8006430 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	2201      	movs	r2, #1
 80073ea:	409a      	lsls	r2, r3
 80073ec:	4b23      	ldr	r3, [pc, #140]	; (800747c <xTaskIncrementTick+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	4a22      	ldr	r2, [pc, #136]	; (800747c <xTaskIncrementTick+0x15c>)
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <xTaskIncrementTick+0x160>)
 8007404:	441a      	add	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f7fe ffb2 	bl	8006376 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <xTaskIncrementTick+0x164>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d3b9      	bcc.n	8007394 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007424:	e7b6      	b.n	8007394 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007426:	4b17      	ldr	r3, [pc, #92]	; (8007484 <xTaskIncrementTick+0x164>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	4914      	ldr	r1, [pc, #80]	; (8007480 <xTaskIncrementTick+0x160>)
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d901      	bls.n	8007442 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <xTaskIncrementTick+0x168>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800744a:	2301      	movs	r3, #1
 800744c:	617b      	str	r3, [r7, #20]
 800744e:	e004      	b.n	800745a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007450:	4b0e      	ldr	r3, [pc, #56]	; (800748c <xTaskIncrementTick+0x16c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a0d      	ldr	r2, [pc, #52]	; (800748c <xTaskIncrementTick+0x16c>)
 8007458:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800745a:	697b      	ldr	r3, [r7, #20]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200006f0 	.word	0x200006f0
 8007468:	200006cc 	.word	0x200006cc
 800746c:	20000680 	.word	0x20000680
 8007470:	20000684 	.word	0x20000684
 8007474:	200006e0 	.word	0x200006e0
 8007478:	200006e8 	.word	0x200006e8
 800747c:	200006d0 	.word	0x200006d0
 8007480:	200005cc 	.word	0x200005cc
 8007484:	200005c8 	.word	0x200005c8
 8007488:	200006dc 	.word	0x200006dc
 800748c:	200006d8 	.word	0x200006d8

08007490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007496:	4b29      	ldr	r3, [pc, #164]	; (800753c <vTaskSwitchContext+0xac>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <vTaskSwitchContext+0xb0>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074a4:	e044      	b.n	8007530 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80074a6:	4b26      	ldr	r3, [pc, #152]	; (8007540 <vTaskSwitchContext+0xb0>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <vTaskSwitchContext+0xb4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	fab3 f383 	clz	r3, r3
 80074b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	f1c3 031f 	rsb	r3, r3, #31
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	4921      	ldr	r1, [pc, #132]	; (8007548 <vTaskSwitchContext+0xb8>)
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	607b      	str	r3, [r7, #4]
}
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <vTaskSwitchContext+0x5a>
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a14      	ldr	r2, [pc, #80]	; (8007548 <vTaskSwitchContext+0xb8>)
 80074f8:	4413      	add	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	3308      	adds	r3, #8
 800750e:	429a      	cmp	r2, r3
 8007510:	d104      	bne.n	800751c <vTaskSwitchContext+0x8c>
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	605a      	str	r2, [r3, #4]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <vTaskSwitchContext+0xbc>)
 8007524:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <vTaskSwitchContext+0xbc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	334c      	adds	r3, #76	; 0x4c
 800752c:	4a08      	ldr	r2, [pc, #32]	; (8007550 <vTaskSwitchContext+0xc0>)
 800752e:	6013      	str	r3, [r2, #0]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	200006f0 	.word	0x200006f0
 8007540:	200006dc 	.word	0x200006dc
 8007544:	200006d0 	.word	0x200006d0
 8007548:	200005cc 	.word	0x200005cc
 800754c:	200005c8 	.word	0x200005c8
 8007550:	2000001c 	.word	0x2000001c

08007554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800757a:	4b07      	ldr	r3, [pc, #28]	; (8007598 <vTaskPlaceOnEventList+0x44>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3318      	adds	r3, #24
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fe ff1b 	bl	80063be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007588:	2101      	movs	r1, #1
 800758a:	6838      	ldr	r0, [r7, #0]
 800758c:	f000 fb82 	bl	8007c94 <prvAddCurrentTaskToDelayedList>
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	200005c8 	.word	0x200005c8

0800759c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10a      	bne.n	80075c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60fb      	str	r3, [r7, #12]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	3318      	adds	r3, #24
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe ff2f 	bl	8006430 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d2:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <xTaskRemoveFromEventList+0xac>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d11c      	bne.n	8007614 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	3304      	adds	r3, #4
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe ff26 	bl	8006430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	2201      	movs	r2, #1
 80075ea:	409a      	lsls	r2, r3
 80075ec:	4b17      	ldr	r3, [pc, #92]	; (800764c <xTaskRemoveFromEventList+0xb0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	4a16      	ldr	r2, [pc, #88]	; (800764c <xTaskRemoveFromEventList+0xb0>)
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4a13      	ldr	r2, [pc, #76]	; (8007650 <xTaskRemoveFromEventList+0xb4>)
 8007604:	441a      	add	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3304      	adds	r3, #4
 800760a:	4619      	mov	r1, r3
 800760c:	4610      	mov	r0, r2
 800760e:	f7fe feb2 	bl	8006376 <vListInsertEnd>
 8007612:	e005      	b.n	8007620 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	3318      	adds	r3, #24
 8007618:	4619      	mov	r1, r3
 800761a:	480e      	ldr	r0, [pc, #56]	; (8007654 <xTaskRemoveFromEventList+0xb8>)
 800761c:	f7fe feab 	bl	8006376 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <xTaskRemoveFromEventList+0xbc>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	429a      	cmp	r2, r3
 800762c:	d905      	bls.n	800763a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007632:	4b0a      	ldr	r3, [pc, #40]	; (800765c <xTaskRemoveFromEventList+0xc0>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	e001      	b.n	800763e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	200006f0 	.word	0x200006f0
 800764c:	200006d0 	.word	0x200006d0
 8007650:	200005cc 	.word	0x200005cc
 8007654:	20000688 	.word	0x20000688
 8007658:	200005c8 	.word	0x200005c8
 800765c:	200006dc 	.word	0x200006dc

08007660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <vTaskInternalSetTimeOutState+0x24>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <vTaskInternalSetTimeOutState+0x28>)
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	605a      	str	r2, [r3, #4]
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	200006e0 	.word	0x200006e0
 8007688:	200006cc 	.word	0x200006cc

0800768c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b088      	sub	sp, #32
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	613b      	str	r3, [r7, #16]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10a      	bne.n	80076ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
}
 80076ca:	bf00      	nop
 80076cc:	e7fe      	b.n	80076cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076ce:	f000 fc71 	bl	8007fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076d2:	4b1d      	ldr	r3, [pc, #116]	; (8007748 <xTaskCheckForTimeOut+0xbc>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d102      	bne.n	80076f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	e023      	b.n	800773a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <xTaskCheckForTimeOut+0xc0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d007      	beq.n	800770e <xTaskCheckForTimeOut+0x82>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	429a      	cmp	r2, r3
 8007706:	d302      	bcc.n	800770e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e015      	b.n	800773a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	429a      	cmp	r2, r3
 8007716:	d20b      	bcs.n	8007730 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff ff9b 	bl	8007660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800772a:	2300      	movs	r3, #0
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	e004      	b.n	800773a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007736:	2301      	movs	r3, #1
 8007738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800773a:	f000 fc6b 	bl	8008014 <vPortExitCritical>

	return xReturn;
 800773e:	69fb      	ldr	r3, [r7, #28]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3720      	adds	r7, #32
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	200006cc 	.word	0x200006cc
 800774c:	200006e0 	.word	0x200006e0

08007750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007754:	4b03      	ldr	r3, [pc, #12]	; (8007764 <vTaskMissedYield+0x14>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]
}
 800775a:	bf00      	nop
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	200006dc 	.word	0x200006dc

08007768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007770:	f000 f852 	bl	8007818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <prvIdleTask+0x28>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d9f9      	bls.n	8007770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <prvIdleTask+0x2c>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800778c:	e7f0      	b.n	8007770 <prvIdleTask+0x8>
 800778e:	bf00      	nop
 8007790:	200005cc 	.word	0x200005cc
 8007794:	e000ed04 	.word	0xe000ed04

08007798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800779e:	2300      	movs	r3, #0
 80077a0:	607b      	str	r3, [r7, #4]
 80077a2:	e00c      	b.n	80077be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4a12      	ldr	r2, [pc, #72]	; (80077f8 <prvInitialiseTaskLists+0x60>)
 80077b0:	4413      	add	r3, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fdb2 	bl	800631c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3301      	adds	r3, #1
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b06      	cmp	r3, #6
 80077c2:	d9ef      	bls.n	80077a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077c4:	480d      	ldr	r0, [pc, #52]	; (80077fc <prvInitialiseTaskLists+0x64>)
 80077c6:	f7fe fda9 	bl	800631c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077ca:	480d      	ldr	r0, [pc, #52]	; (8007800 <prvInitialiseTaskLists+0x68>)
 80077cc:	f7fe fda6 	bl	800631c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077d0:	480c      	ldr	r0, [pc, #48]	; (8007804 <prvInitialiseTaskLists+0x6c>)
 80077d2:	f7fe fda3 	bl	800631c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077d6:	480c      	ldr	r0, [pc, #48]	; (8007808 <prvInitialiseTaskLists+0x70>)
 80077d8:	f7fe fda0 	bl	800631c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077dc:	480b      	ldr	r0, [pc, #44]	; (800780c <prvInitialiseTaskLists+0x74>)
 80077de:	f7fe fd9d 	bl	800631c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077e2:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <prvInitialiseTaskLists+0x78>)
 80077e4:	4a05      	ldr	r2, [pc, #20]	; (80077fc <prvInitialiseTaskLists+0x64>)
 80077e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <prvInitialiseTaskLists+0x7c>)
 80077ea:	4a05      	ldr	r2, [pc, #20]	; (8007800 <prvInitialiseTaskLists+0x68>)
 80077ec:	601a      	str	r2, [r3, #0]
}
 80077ee:	bf00      	nop
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	200005cc 	.word	0x200005cc
 80077fc:	20000658 	.word	0x20000658
 8007800:	2000066c 	.word	0x2000066c
 8007804:	20000688 	.word	0x20000688
 8007808:	2000069c 	.word	0x2000069c
 800780c:	200006b4 	.word	0x200006b4
 8007810:	20000680 	.word	0x20000680
 8007814:	20000684 	.word	0x20000684

08007818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800781e:	e019      	b.n	8007854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007820:	f000 fbc8 	bl	8007fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007824:	4b10      	ldr	r3, [pc, #64]	; (8007868 <prvCheckTasksWaitingTermination+0x50>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fdfd 	bl	8006430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <prvCheckTasksWaitingTermination+0x54>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	4a0b      	ldr	r2, [pc, #44]	; (800786c <prvCheckTasksWaitingTermination+0x54>)
 800783e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <prvCheckTasksWaitingTermination+0x58>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3b01      	subs	r3, #1
 8007846:	4a0a      	ldr	r2, [pc, #40]	; (8007870 <prvCheckTasksWaitingTermination+0x58>)
 8007848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800784a:	f000 fbe3 	bl	8008014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f810 	bl	8007874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007854:	4b06      	ldr	r3, [pc, #24]	; (8007870 <prvCheckTasksWaitingTermination+0x58>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e1      	bne.n	8007820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	2000069c 	.word	0x2000069c
 800786c:	200006c8 	.word	0x200006c8
 8007870:	200006b0 	.word	0x200006b0

08007874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	334c      	adds	r3, #76	; 0x4c
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fef9 	bl	8008678 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d108      	bne.n	80078a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fd3b 	bl	8008310 <vPortFree>
				vPortFree( pxTCB );
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fd38 	bl	8008310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078a0:	e018      	b.n	80078d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d103      	bne.n	80078b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fd2f 	bl	8008310 <vPortFree>
	}
 80078b2:	e00f      	b.n	80078d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d00a      	beq.n	80078d4 <prvDeleteTCB+0x60>
	__asm volatile
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	60fb      	str	r3, [r7, #12]
}
 80078d0:	bf00      	nop
 80078d2:	e7fe      	b.n	80078d2 <prvDeleteTCB+0x5e>
	}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078e2:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <prvResetNextTaskUnblockTime+0x38>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d104      	bne.n	80078f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <prvResetNextTaskUnblockTime+0x3c>)
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078f4:	e008      	b.n	8007908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <prvResetNextTaskUnblockTime+0x38>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4a04      	ldr	r2, [pc, #16]	; (8007918 <prvResetNextTaskUnblockTime+0x3c>)
 8007906:	6013      	str	r3, [r2, #0]
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	20000680 	.word	0x20000680
 8007918:	200006e8 	.word	0x200006e8

0800791c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007922:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <xTaskGetSchedulerState+0x34>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d102      	bne.n	8007930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800792a:	2301      	movs	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
 800792e:	e008      	b.n	8007942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007930:	4b08      	ldr	r3, [pc, #32]	; (8007954 <xTaskGetSchedulerState+0x38>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d102      	bne.n	800793e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007938:	2302      	movs	r3, #2
 800793a:	607b      	str	r3, [r7, #4]
 800793c:	e001      	b.n	8007942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800793e:	2300      	movs	r3, #0
 8007940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007942:	687b      	ldr	r3, [r7, #4]
	}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	200006d4 	.word	0x200006d4
 8007954:	200006f0 	.word	0x200006f0

08007958 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d05e      	beq.n	8007a2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007972:	4b31      	ldr	r3, [pc, #196]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	429a      	cmp	r2, r3
 800797a:	d24e      	bcs.n	8007a1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b00      	cmp	r3, #0
 8007982:	db06      	blt.n	8007992 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007984:	4b2c      	ldr	r3, [pc, #176]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	f1c3 0207 	rsb	r2, r3, #7
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	6959      	ldr	r1, [r3, #20]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4a26      	ldr	r2, [pc, #152]	; (8007a3c <xTaskPriorityInherit+0xe4>)
 80079a4:	4413      	add	r3, r2
 80079a6:	4299      	cmp	r1, r3
 80079a8:	d12f      	bne.n	8007a0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe fd3e 	bl	8006430 <uxListRemove>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	2201      	movs	r2, #1
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	43da      	mvns	r2, r3
 80079c6:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4013      	ands	r3, r2
 80079cc:	4a1c      	ldr	r2, [pc, #112]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079d0:	4b19      	ldr	r3, [pc, #100]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	2201      	movs	r2, #1
 80079e0:	409a      	lsls	r2, r3
 80079e2:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <xTaskPriorityInherit+0xe8>)
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4a10      	ldr	r2, [pc, #64]	; (8007a3c <xTaskPriorityInherit+0xe4>)
 80079fa:	441a      	add	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	3304      	adds	r3, #4
 8007a00:	4619      	mov	r1, r3
 8007a02:	4610      	mov	r0, r2
 8007a04:	f7fe fcb7 	bl	8006376 <vListInsertEnd>
 8007a08:	e004      	b.n	8007a14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a0a:	4b0b      	ldr	r3, [pc, #44]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e008      	b.n	8007a2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <xTaskPriorityInherit+0xe0>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d201      	bcs.n	8007a2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
	}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200005c8 	.word	0x200005c8
 8007a3c:	200005cc 	.word	0x200005cc
 8007a40:	200006d0 	.word	0x200006d0

08007a44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d06e      	beq.n	8007b38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a5a:	4b3a      	ldr	r3, [pc, #232]	; (8007b44 <xTaskPriorityDisinherit+0x100>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d00a      	beq.n	8007a7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a68:	f383 8811 	msr	BASEPRI, r3
 8007a6c:	f3bf 8f6f 	isb	sy
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	60fb      	str	r3, [r7, #12]
}
 8007a76:	bf00      	nop
 8007a78:	e7fe      	b.n	8007a78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9c:	1e5a      	subs	r2, r3, #1
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d044      	beq.n	8007b38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d140      	bne.n	8007b38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fe fcb8 	bl	8006430 <uxListRemove>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d115      	bne.n	8007af2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aca:	491f      	ldr	r1, [pc, #124]	; (8007b48 <xTaskPriorityDisinherit+0x104>)
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xTaskPriorityDisinherit+0xae>
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	43da      	mvns	r2, r3
 8007ae8:	4b18      	ldr	r3, [pc, #96]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4013      	ands	r3, r2
 8007aee:	4a17      	ldr	r2, [pc, #92]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007af0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	f1c3 0207 	rsb	r2, r3, #7
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	409a      	lsls	r2, r3
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <xTaskPriorityDisinherit+0x108>)
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4a08      	ldr	r2, [pc, #32]	; (8007b48 <xTaskPriorityDisinherit+0x104>)
 8007b26:	441a      	add	r2, r3
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f7fe fc21 	bl	8006376 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b38:	697b      	ldr	r3, [r7, #20]
	}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	200005c8 	.word	0x200005c8
 8007b48:	200005cc 	.word	0x200005cc
 8007b4c:	200006d0 	.word	0x200006d0

08007b50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d077      	beq.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	60fb      	str	r3, [r7, #12]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d902      	bls.n	8007b96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	e002      	b.n	8007b9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	69fa      	ldr	r2, [r7, #28]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d058      	beq.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d153      	bne.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d10a      	bne.n	8007bd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	60bb      	str	r3, [r7, #8]
}
 8007bcc:	bf00      	nop
 8007bce:	e7fe      	b.n	8007bce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	db04      	blt.n	8007bee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f1c3 0207 	rsb	r2, r3, #7
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	6959      	ldr	r1, [r3, #20]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007bfe:	4413      	add	r3, r2
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d129      	bne.n	8007c58 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe fc11 	bl	8006430 <uxListRemove>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	2201      	movs	r2, #1
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	43da      	mvns	r2, r3
 8007c20:	4b11      	ldr	r3, [pc, #68]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4013      	ands	r3, r2
 8007c26:	4a10      	ldr	r2, [pc, #64]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	2201      	movs	r2, #1
 8007c30:	409a      	lsls	r2, r3
 8007c32:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	4a0b      	ldr	r2, [pc, #44]	; (8007c68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4613      	mov	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4a06      	ldr	r2, [pc, #24]	; (8007c64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007c4a:	441a      	add	r2, r3
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	3304      	adds	r3, #4
 8007c50:	4619      	mov	r1, r3
 8007c52:	4610      	mov	r0, r2
 8007c54:	f7fe fb8f 	bl	8006376 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c58:	bf00      	nop
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	200005c8 	.word	0x200005c8
 8007c64:	200005cc 	.word	0x200005cc
 8007c68:	200006d0 	.word	0x200006d0

08007c6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c7e:	3201      	adds	r2, #1
 8007c80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007c82:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c84:	681b      	ldr	r3, [r3, #0]
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	200005c8 	.word	0x200005c8

08007c94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c9e:	4b29      	ldr	r3, [pc, #164]	; (8007d44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fbc0 	bl	8006430 <uxListRemove>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10b      	bne.n	8007cce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43da      	mvns	r2, r3
 8007cc4:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	4a20      	ldr	r2, [pc, #128]	; (8007d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ccc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d10a      	bne.n	8007cec <prvAddCurrentTaskToDelayedList+0x58>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	481a      	ldr	r0, [pc, #104]	; (8007d50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007ce6:	f7fe fb46 	bl	8006376 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cea:	e026      	b.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cf4:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d209      	bcs.n	8007d18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d04:	4b13      	ldr	r3, [pc, #76]	; (8007d54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe fb54 	bl	80063be <vListInsert>
}
 8007d16:	e010      	b.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fe fb4a 	bl	80063be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d2a:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d202      	bcs.n	8007d3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007d34:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	6013      	str	r3, [r2, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	200006cc 	.word	0x200006cc
 8007d48:	200005c8 	.word	0x200005c8
 8007d4c:	200006d0 	.word	0x200006d0
 8007d50:	200006b4 	.word	0x200006b4
 8007d54:	20000684 	.word	0x20000684
 8007d58:	20000680 	.word	0x20000680
 8007d5c:	200006e8 	.word	0x200006e8

08007d60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3b04      	subs	r3, #4
 8007d70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 0201 	bic.w	r2, r3, #1
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3b04      	subs	r3, #4
 8007d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d90:	4a0c      	ldr	r2, [pc, #48]	; (8007dc4 <pxPortInitialiseStack+0x64>)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b14      	subs	r3, #20
 8007d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3b04      	subs	r3, #4
 8007da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f06f 0202 	mvn.w	r2, #2
 8007dae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3b20      	subs	r3, #32
 8007db4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007db6:	68fb      	ldr	r3, [r7, #12]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	08007dc9 	.word	0x08007dc9

08007dc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dd2:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <prvTaskExitError+0x54>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d00a      	beq.n	8007df2 <prvTaskExitError+0x2a>
	__asm volatile
 8007ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de0:	f383 8811 	msr	BASEPRI, r3
 8007de4:	f3bf 8f6f 	isb	sy
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	60fb      	str	r3, [r7, #12]
}
 8007dee:	bf00      	nop
 8007df0:	e7fe      	b.n	8007df0 <prvTaskExitError+0x28>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	60bb      	str	r3, [r7, #8]
}
 8007e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e06:	bf00      	nop
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0fc      	beq.n	8007e08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e0e:	bf00      	nop
 8007e10:	bf00      	nop
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000018 	.word	0x20000018

08007e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <pxCurrentTCBConst2>)
 8007e22:	6819      	ldr	r1, [r3, #0]
 8007e24:	6808      	ldr	r0, [r1, #0]
 8007e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	f380 8809 	msr	PSP, r0
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	4770      	bx	lr
 8007e3c:	f3af 8000 	nop.w

08007e40 <pxCurrentTCBConst2>:
 8007e40:	200005c8 	.word	0x200005c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007e48:	4808      	ldr	r0, [pc, #32]	; (8007e6c <prvPortStartFirstTask+0x24>)
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	6800      	ldr	r0, [r0, #0]
 8007e4e:	f380 8808 	msr	MSP, r0
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f380 8814 	msr	CONTROL, r0
 8007e5a:	b662      	cpsie	i
 8007e5c:	b661      	cpsie	f
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	df00      	svc	0
 8007e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed08 	.word	0xe000ed08

08007e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e76:	4b46      	ldr	r3, [pc, #280]	; (8007f90 <xPortStartScheduler+0x120>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <xPortStartScheduler+0x124>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d10a      	bne.n	8007e96 <xPortStartScheduler+0x26>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	613b      	str	r3, [r7, #16]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e96:	4b3e      	ldr	r3, [pc, #248]	; (8007f90 <xPortStartScheduler+0x120>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a3f      	ldr	r2, [pc, #252]	; (8007f98 <xPortStartScheduler+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d10a      	bne.n	8007eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	60fb      	str	r3, [r7, #12]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007eb6:	4b39      	ldr	r3, [pc, #228]	; (8007f9c <xPortStartScheduler+0x12c>)
 8007eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	22ff      	movs	r2, #255	; 0xff
 8007ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	4b31      	ldr	r3, [pc, #196]	; (8007fa0 <xPortStartScheduler+0x130>)
 8007edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ede:	4b31      	ldr	r3, [pc, #196]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ee4:	e009      	b.n	8007efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ee6:	4b2f      	ldr	r3, [pc, #188]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	4a2d      	ldr	r2, [pc, #180]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d0ef      	beq.n	8007ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f06:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1c3 0307 	rsb	r3, r3, #7
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d00a      	beq.n	8007f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	60bb      	str	r3, [r7, #8]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f28:	4b1e      	ldr	r3, [pc, #120]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	021b      	lsls	r3, r3, #8
 8007f2e:	4a1d      	ldr	r2, [pc, #116]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f32:	4b1c      	ldr	r3, [pc, #112]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f3a:	4a1a      	ldr	r2, [pc, #104]	; (8007fa4 <xPortStartScheduler+0x134>)
 8007f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f46:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a17      	ldr	r2, [pc, #92]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a14      	ldr	r2, [pc, #80]	; (8007fa8 <xPortStartScheduler+0x138>)
 8007f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f5e:	f000 f8dd 	bl	800811c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <xPortStartScheduler+0x13c>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007f68:	f000 f8fc 	bl	8008164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007f6c:	4b10      	ldr	r3, [pc, #64]	; (8007fb0 <xPortStartScheduler+0x140>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0f      	ldr	r2, [pc, #60]	; (8007fb0 <xPortStartScheduler+0x140>)
 8007f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f78:	f7ff ff66 	bl	8007e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f7c:	f7ff fa88 	bl	8007490 <vTaskSwitchContext>
	prvTaskExitError();
 8007f80:	f7ff ff22 	bl	8007dc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	e000ed00 	.word	0xe000ed00
 8007f94:	410fc271 	.word	0x410fc271
 8007f98:	410fc270 	.word	0x410fc270
 8007f9c:	e000e400 	.word	0xe000e400
 8007fa0:	200006f4 	.word	0x200006f4
 8007fa4:	200006f8 	.word	0x200006f8
 8007fa8:	e000ed20 	.word	0xe000ed20
 8007fac:	20000018 	.word	0x20000018
 8007fb0:	e000ef34 	.word	0xe000ef34

08007fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <vPortEnterCritical+0x58>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	4a0d      	ldr	r2, [pc, #52]	; (800800c <vPortEnterCritical+0x58>)
 8007fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	; (800800c <vPortEnterCritical+0x58>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d10f      	bne.n	8008000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <vPortEnterCritical+0x5c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <vPortEnterCritical+0x4c>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	603b      	str	r3, [r7, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	e7fe      	b.n	8007ffe <vPortEnterCritical+0x4a>
	}
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	20000018 	.word	0x20000018
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <vPortExitCritical+0x50>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10a      	bne.n	8008038 <vPortExitCritical+0x24>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	607b      	str	r3, [r7, #4]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <vPortExitCritical+0x50>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3b01      	subs	r3, #1
 800803e:	4a09      	ldr	r2, [pc, #36]	; (8008064 <vPortExitCritical+0x50>)
 8008040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <vPortExitCritical+0x50>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <vPortExitCritical+0x42>
 800804a:	2300      	movs	r3, #0
 800804c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20000018 	.word	0x20000018
	...

08008070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008070:	f3ef 8009 	mrs	r0, PSP
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <pxCurrentTCBConst>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	f01e 0f10 	tst.w	lr, #16
 8008080:	bf08      	it	eq
 8008082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	6010      	str	r0, [r2, #0]
 800808c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008094:	f380 8811 	msr	BASEPRI, r0
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f7ff f9f6 	bl	8007490 <vTaskSwitchContext>
 80080a4:	f04f 0000 	mov.w	r0, #0
 80080a8:	f380 8811 	msr	BASEPRI, r0
 80080ac:	bc09      	pop	{r0, r3}
 80080ae:	6819      	ldr	r1, [r3, #0]
 80080b0:	6808      	ldr	r0, [r1, #0]
 80080b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b6:	f01e 0f10 	tst.w	lr, #16
 80080ba:	bf08      	it	eq
 80080bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080c0:	f380 8809 	msr	PSP, r0
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	f3af 8000 	nop.w

080080d0 <pxCurrentTCBConst>:
 80080d0:	200005c8 	.word	0x200005c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	607b      	str	r3, [r7, #4]
}
 80080f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80080f2:	f7ff f915 	bl	8007320 <xTaskIncrementTick>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <SysTick_Handler+0x40>)
 80080fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f383 8811 	msr	BASEPRI, r3
}
 800810e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008126:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <vPortSetupTimerInterrupt+0x38>)
 8008128:	2200      	movs	r2, #0
 800812a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <vPortSetupTimerInterrupt+0x3c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a0a      	ldr	r2, [pc, #40]	; (800815c <vPortSetupTimerInterrupt+0x40>)
 8008132:	fba2 2303 	umull	r2, r3, r2, r3
 8008136:	099b      	lsrs	r3, r3, #6
 8008138:	4a09      	ldr	r2, [pc, #36]	; (8008160 <vPortSetupTimerInterrupt+0x44>)
 800813a:	3b01      	subs	r3, #1
 800813c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800813e:	4b04      	ldr	r3, [pc, #16]	; (8008150 <vPortSetupTimerInterrupt+0x34>)
 8008140:	2207      	movs	r2, #7
 8008142:	601a      	str	r2, [r3, #0]
}
 8008144:	bf00      	nop
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	e000e010 	.word	0xe000e010
 8008154:	e000e018 	.word	0xe000e018
 8008158:	20000008 	.word	0x20000008
 800815c:	10624dd3 	.word	0x10624dd3
 8008160:	e000e014 	.word	0xe000e014

08008164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008174 <vPortEnableVFP+0x10>
 8008168:	6801      	ldr	r1, [r0, #0]
 800816a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800816e:	6001      	str	r1, [r0, #0]
 8008170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008172:	bf00      	nop
 8008174:	e000ed88 	.word	0xe000ed88

08008178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08a      	sub	sp, #40	; 0x28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008184:	f7ff f812 	bl	80071ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008188:	4b5b      	ldr	r3, [pc, #364]	; (80082f8 <pvPortMalloc+0x180>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008190:	f000 f920 	bl	80083d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008194:	4b59      	ldr	r3, [pc, #356]	; (80082fc <pvPortMalloc+0x184>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	f040 8093 	bne.w	80082c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d01d      	beq.n	80081e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80081a8:	2208      	movs	r2, #8
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4413      	add	r3, r2
 80081ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d014      	beq.n	80081e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f023 0307 	bic.w	r3, r3, #7
 80081c0:	3308      	adds	r3, #8
 80081c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <pvPortMalloc+0x6c>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	617b      	str	r3, [r7, #20]
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d06e      	beq.n	80082c8 <pvPortMalloc+0x150>
 80081ea:	4b45      	ldr	r3, [pc, #276]	; (8008300 <pvPortMalloc+0x188>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d869      	bhi.n	80082c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081f4:	4b43      	ldr	r3, [pc, #268]	; (8008304 <pvPortMalloc+0x18c>)
 80081f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081f8:	4b42      	ldr	r3, [pc, #264]	; (8008304 <pvPortMalloc+0x18c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081fe:	e004      	b.n	800820a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	429a      	cmp	r2, r3
 8008212:	d903      	bls.n	800821c <pvPortMalloc+0xa4>
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f1      	bne.n	8008200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800821c:	4b36      	ldr	r3, [pc, #216]	; (80082f8 <pvPortMalloc+0x180>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008222:	429a      	cmp	r2, r3
 8008224:	d050      	beq.n	80082c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2208      	movs	r2, #8
 800822c:	4413      	add	r3, r2
 800822e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	2308      	movs	r3, #8
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	429a      	cmp	r2, r3
 8008246:	d91f      	bls.n	8008288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <pvPortMalloc+0xf8>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	613b      	str	r3, [r7, #16]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008282:	69b8      	ldr	r0, [r7, #24]
 8008284:	f000 f908 	bl	8008498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008288:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <pvPortMalloc+0x188>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <pvPortMalloc+0x188>)
 8008294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008296:	4b1a      	ldr	r3, [pc, #104]	; (8008300 <pvPortMalloc+0x188>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <pvPortMalloc+0x190>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d203      	bcs.n	80082aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80082a2:	4b17      	ldr	r3, [pc, #92]	; (8008300 <pvPortMalloc+0x188>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a18      	ldr	r2, [pc, #96]	; (8008308 <pvPortMalloc+0x190>)
 80082a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <pvPortMalloc+0x184>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082be:	4b13      	ldr	r3, [pc, #76]	; (800830c <pvPortMalloc+0x194>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	4a11      	ldr	r2, [pc, #68]	; (800830c <pvPortMalloc+0x194>)
 80082c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082c8:	f7fe ff7e 	bl	80071c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <pvPortMalloc+0x174>
	__asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	60fb      	str	r3, [r7, #12]
}
 80082e8:	bf00      	nop
 80082ea:	e7fe      	b.n	80082ea <pvPortMalloc+0x172>
	return pvReturn;
 80082ec:	69fb      	ldr	r3, [r7, #28]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3728      	adds	r7, #40	; 0x28
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	20004304 	.word	0x20004304
 80082fc:	20004318 	.word	0x20004318
 8008300:	20004308 	.word	0x20004308
 8008304:	200042fc 	.word	0x200042fc
 8008308:	2000430c 	.word	0x2000430c
 800830c:	20004310 	.word	0x20004310

08008310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04d      	beq.n	80083be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008322:	2308      	movs	r3, #8
 8008324:	425b      	negs	r3, r3
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4413      	add	r3, r2
 800832a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	4b24      	ldr	r3, [pc, #144]	; (80083c8 <vPortFree+0xb8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4013      	ands	r3, r2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10a      	bne.n	8008354 <vPortFree+0x44>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	60fb      	str	r3, [r7, #12]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <vPortFree+0x62>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60bb      	str	r3, [r7, #8]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <vPortFree+0xb8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01e      	beq.n	80083be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d11a      	bne.n	80083be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <vPortFree+0xb8>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	43db      	mvns	r3, r3
 8008392:	401a      	ands	r2, r3
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008398:	f7fe ff08 	bl	80071ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <vPortFree+0xbc>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4413      	add	r3, r2
 80083a6:	4a09      	ldr	r2, [pc, #36]	; (80083cc <vPortFree+0xbc>)
 80083a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083aa:	6938      	ldr	r0, [r7, #16]
 80083ac:	f000 f874 	bl	8008498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <vPortFree+0xc0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	4a06      	ldr	r2, [pc, #24]	; (80083d0 <vPortFree+0xc0>)
 80083b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083ba:	f7fe ff05 	bl	80071c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083be:	bf00      	nop
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20004318 	.word	0x20004318
 80083cc:	20004308 	.word	0x20004308
 80083d0:	20004314 	.word	0x20004314

080083d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083e0:	4b27      	ldr	r3, [pc, #156]	; (8008480 <prvHeapInit+0xac>)
 80083e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3307      	adds	r3, #7
 80083f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0307 	bic.w	r3, r3, #7
 80083fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <prvHeapInit+0xac>)
 8008404:	4413      	add	r3, r2
 8008406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800840c:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <prvHeapInit+0xb0>)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008412:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <prvHeapInit+0xb0>)
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	4413      	add	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008420:	2208      	movs	r2, #8
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0307 	bic.w	r3, r3, #7
 800842e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a15      	ldr	r2, [pc, #84]	; (8008488 <prvHeapInit+0xb4>)
 8008434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <prvHeapInit+0xb4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2200      	movs	r2, #0
 800843c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800843e:	4b12      	ldr	r3, [pc, #72]	; (8008488 <prvHeapInit+0xb4>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2200      	movs	r2, #0
 8008444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	1ad2      	subs	r2, r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <prvHeapInit+0xb4>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	4a0a      	ldr	r2, [pc, #40]	; (800848c <prvHeapInit+0xb8>)
 8008462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a09      	ldr	r2, [pc, #36]	; (8008490 <prvHeapInit+0xbc>)
 800846a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <prvHeapInit+0xc0>)
 800846e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008472:	601a      	str	r2, [r3, #0]
}
 8008474:	bf00      	nop
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	200006fc 	.word	0x200006fc
 8008484:	200042fc 	.word	0x200042fc
 8008488:	20004304 	.word	0x20004304
 800848c:	2000430c 	.word	0x2000430c
 8008490:	20004308 	.word	0x20004308
 8008494:	20004318 	.word	0x20004318

08008498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80084a0:	4b28      	ldr	r3, [pc, #160]	; (8008544 <prvInsertBlockIntoFreeList+0xac>)
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	e002      	b.n	80084ac <prvInsertBlockIntoFreeList+0x14>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d8f7      	bhi.n	80084a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	4413      	add	r3, r2
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d108      	bne.n	80084da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	441a      	add	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	441a      	add	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d118      	bne.n	8008520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <prvInsertBlockIntoFreeList+0xb0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d00d      	beq.n	8008516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	441a      	add	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	e008      	b.n	8008528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008516:	4b0c      	ldr	r3, [pc, #48]	; (8008548 <prvInsertBlockIntoFreeList+0xb0>)
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	601a      	str	r2, [r3, #0]
 800851e:	e003      	b.n	8008528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d002      	beq.n	8008536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008536:	bf00      	nop
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	200042fc 	.word	0x200042fc
 8008548:	20004304 	.word	0x20004304

0800854c <__libc_init_array>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	4d0d      	ldr	r5, [pc, #52]	; (8008584 <__libc_init_array+0x38>)
 8008550:	4c0d      	ldr	r4, [pc, #52]	; (8008588 <__libc_init_array+0x3c>)
 8008552:	1b64      	subs	r4, r4, r5
 8008554:	10a4      	asrs	r4, r4, #2
 8008556:	2600      	movs	r6, #0
 8008558:	42a6      	cmp	r6, r4
 800855a:	d109      	bne.n	8008570 <__libc_init_array+0x24>
 800855c:	4d0b      	ldr	r5, [pc, #44]	; (800858c <__libc_init_array+0x40>)
 800855e:	4c0c      	ldr	r4, [pc, #48]	; (8008590 <__libc_init_array+0x44>)
 8008560:	f000 f8f2 	bl	8008748 <_init>
 8008564:	1b64      	subs	r4, r4, r5
 8008566:	10a4      	asrs	r4, r4, #2
 8008568:	2600      	movs	r6, #0
 800856a:	42a6      	cmp	r6, r4
 800856c:	d105      	bne.n	800857a <__libc_init_array+0x2e>
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	f855 3b04 	ldr.w	r3, [r5], #4
 8008574:	4798      	blx	r3
 8008576:	3601      	adds	r6, #1
 8008578:	e7ee      	b.n	8008558 <__libc_init_array+0xc>
 800857a:	f855 3b04 	ldr.w	r3, [r5], #4
 800857e:	4798      	blx	r3
 8008580:	3601      	adds	r6, #1
 8008582:	e7f2      	b.n	800856a <__libc_init_array+0x1e>
 8008584:	0800881c 	.word	0x0800881c
 8008588:	0800881c 	.word	0x0800881c
 800858c:	0800881c 	.word	0x0800881c
 8008590:	08008820 	.word	0x08008820

08008594 <__retarget_lock_acquire_recursive>:
 8008594:	4770      	bx	lr

08008596 <__retarget_lock_release_recursive>:
 8008596:	4770      	bx	lr

08008598 <memcpy>:
 8008598:	440a      	add	r2, r1
 800859a:	4291      	cmp	r1, r2
 800859c:	f100 33ff 	add.w	r3, r0, #4294967295
 80085a0:	d100      	bne.n	80085a4 <memcpy+0xc>
 80085a2:	4770      	bx	lr
 80085a4:	b510      	push	{r4, lr}
 80085a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ae:	4291      	cmp	r1, r2
 80085b0:	d1f9      	bne.n	80085a6 <memcpy+0xe>
 80085b2:	bd10      	pop	{r4, pc}

080085b4 <memset>:
 80085b4:	4402      	add	r2, r0
 80085b6:	4603      	mov	r3, r0
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d100      	bne.n	80085be <memset+0xa>
 80085bc:	4770      	bx	lr
 80085be:	f803 1b01 	strb.w	r1, [r3], #1
 80085c2:	e7f9      	b.n	80085b8 <memset+0x4>

080085c4 <_free_r>:
 80085c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c6:	2900      	cmp	r1, #0
 80085c8:	d044      	beq.n	8008654 <_free_r+0x90>
 80085ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ce:	9001      	str	r0, [sp, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f1a1 0404 	sub.w	r4, r1, #4
 80085d6:	bfb8      	it	lt
 80085d8:	18e4      	addlt	r4, r4, r3
 80085da:	f000 f8a9 	bl	8008730 <__malloc_lock>
 80085de:	4a1e      	ldr	r2, [pc, #120]	; (8008658 <_free_r+0x94>)
 80085e0:	9801      	ldr	r0, [sp, #4]
 80085e2:	6813      	ldr	r3, [r2, #0]
 80085e4:	b933      	cbnz	r3, 80085f4 <_free_r+0x30>
 80085e6:	6063      	str	r3, [r4, #4]
 80085e8:	6014      	str	r4, [r2, #0]
 80085ea:	b003      	add	sp, #12
 80085ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085f0:	f000 b8a4 	b.w	800873c <__malloc_unlock>
 80085f4:	42a3      	cmp	r3, r4
 80085f6:	d908      	bls.n	800860a <_free_r+0x46>
 80085f8:	6825      	ldr	r5, [r4, #0]
 80085fa:	1961      	adds	r1, r4, r5
 80085fc:	428b      	cmp	r3, r1
 80085fe:	bf01      	itttt	eq
 8008600:	6819      	ldreq	r1, [r3, #0]
 8008602:	685b      	ldreq	r3, [r3, #4]
 8008604:	1949      	addeq	r1, r1, r5
 8008606:	6021      	streq	r1, [r4, #0]
 8008608:	e7ed      	b.n	80085e6 <_free_r+0x22>
 800860a:	461a      	mov	r2, r3
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	b10b      	cbz	r3, 8008614 <_free_r+0x50>
 8008610:	42a3      	cmp	r3, r4
 8008612:	d9fa      	bls.n	800860a <_free_r+0x46>
 8008614:	6811      	ldr	r1, [r2, #0]
 8008616:	1855      	adds	r5, r2, r1
 8008618:	42a5      	cmp	r5, r4
 800861a:	d10b      	bne.n	8008634 <_free_r+0x70>
 800861c:	6824      	ldr	r4, [r4, #0]
 800861e:	4421      	add	r1, r4
 8008620:	1854      	adds	r4, r2, r1
 8008622:	42a3      	cmp	r3, r4
 8008624:	6011      	str	r1, [r2, #0]
 8008626:	d1e0      	bne.n	80085ea <_free_r+0x26>
 8008628:	681c      	ldr	r4, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	6053      	str	r3, [r2, #4]
 800862e:	4421      	add	r1, r4
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	e7da      	b.n	80085ea <_free_r+0x26>
 8008634:	d902      	bls.n	800863c <_free_r+0x78>
 8008636:	230c      	movs	r3, #12
 8008638:	6003      	str	r3, [r0, #0]
 800863a:	e7d6      	b.n	80085ea <_free_r+0x26>
 800863c:	6825      	ldr	r5, [r4, #0]
 800863e:	1961      	adds	r1, r4, r5
 8008640:	428b      	cmp	r3, r1
 8008642:	bf04      	itt	eq
 8008644:	6819      	ldreq	r1, [r3, #0]
 8008646:	685b      	ldreq	r3, [r3, #4]
 8008648:	6063      	str	r3, [r4, #4]
 800864a:	bf04      	itt	eq
 800864c:	1949      	addeq	r1, r1, r5
 800864e:	6021      	streq	r1, [r4, #0]
 8008650:	6054      	str	r4, [r2, #4]
 8008652:	e7ca      	b.n	80085ea <_free_r+0x26>
 8008654:	b003      	add	sp, #12
 8008656:	bd30      	pop	{r4, r5, pc}
 8008658:	20004320 	.word	0x20004320

0800865c <cleanup_glue>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	460c      	mov	r4, r1
 8008660:	6809      	ldr	r1, [r1, #0]
 8008662:	4605      	mov	r5, r0
 8008664:	b109      	cbz	r1, 800866a <cleanup_glue+0xe>
 8008666:	f7ff fff9 	bl	800865c <cleanup_glue>
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008672:	f7ff bfa7 	b.w	80085c4 <_free_r>
	...

08008678 <_reclaim_reent>:
 8008678:	4b2c      	ldr	r3, [pc, #176]	; (800872c <_reclaim_reent+0xb4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4283      	cmp	r3, r0
 800867e:	b570      	push	{r4, r5, r6, lr}
 8008680:	4604      	mov	r4, r0
 8008682:	d051      	beq.n	8008728 <_reclaim_reent+0xb0>
 8008684:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008686:	b143      	cbz	r3, 800869a <_reclaim_reent+0x22>
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d14a      	bne.n	8008724 <_reclaim_reent+0xac>
 800868e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008690:	6819      	ldr	r1, [r3, #0]
 8008692:	b111      	cbz	r1, 800869a <_reclaim_reent+0x22>
 8008694:	4620      	mov	r0, r4
 8008696:	f7ff ff95 	bl	80085c4 <_free_r>
 800869a:	6961      	ldr	r1, [r4, #20]
 800869c:	b111      	cbz	r1, 80086a4 <_reclaim_reent+0x2c>
 800869e:	4620      	mov	r0, r4
 80086a0:	f7ff ff90 	bl	80085c4 <_free_r>
 80086a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80086a6:	b111      	cbz	r1, 80086ae <_reclaim_reent+0x36>
 80086a8:	4620      	mov	r0, r4
 80086aa:	f7ff ff8b 	bl	80085c4 <_free_r>
 80086ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80086b0:	b111      	cbz	r1, 80086b8 <_reclaim_reent+0x40>
 80086b2:	4620      	mov	r0, r4
 80086b4:	f7ff ff86 	bl	80085c4 <_free_r>
 80086b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80086ba:	b111      	cbz	r1, 80086c2 <_reclaim_reent+0x4a>
 80086bc:	4620      	mov	r0, r4
 80086be:	f7ff ff81 	bl	80085c4 <_free_r>
 80086c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80086c4:	b111      	cbz	r1, 80086cc <_reclaim_reent+0x54>
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7ff ff7c 	bl	80085c4 <_free_r>
 80086cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80086ce:	b111      	cbz	r1, 80086d6 <_reclaim_reent+0x5e>
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff ff77 	bl	80085c4 <_free_r>
 80086d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80086d8:	b111      	cbz	r1, 80086e0 <_reclaim_reent+0x68>
 80086da:	4620      	mov	r0, r4
 80086dc:	f7ff ff72 	bl	80085c4 <_free_r>
 80086e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086e2:	b111      	cbz	r1, 80086ea <_reclaim_reent+0x72>
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff ff6d 	bl	80085c4 <_free_r>
 80086ea:	69a3      	ldr	r3, [r4, #24]
 80086ec:	b1e3      	cbz	r3, 8008728 <_reclaim_reent+0xb0>
 80086ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086f0:	4620      	mov	r0, r4
 80086f2:	4798      	blx	r3
 80086f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80086f6:	b1b9      	cbz	r1, 8008728 <_reclaim_reent+0xb0>
 80086f8:	4620      	mov	r0, r4
 80086fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086fe:	f7ff bfad 	b.w	800865c <cleanup_glue>
 8008702:	5949      	ldr	r1, [r1, r5]
 8008704:	b941      	cbnz	r1, 8008718 <_reclaim_reent+0xa0>
 8008706:	3504      	adds	r5, #4
 8008708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870a:	2d80      	cmp	r5, #128	; 0x80
 800870c:	68d9      	ldr	r1, [r3, #12]
 800870e:	d1f8      	bne.n	8008702 <_reclaim_reent+0x8a>
 8008710:	4620      	mov	r0, r4
 8008712:	f7ff ff57 	bl	80085c4 <_free_r>
 8008716:	e7ba      	b.n	800868e <_reclaim_reent+0x16>
 8008718:	680e      	ldr	r6, [r1, #0]
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff ff52 	bl	80085c4 <_free_r>
 8008720:	4631      	mov	r1, r6
 8008722:	e7ef      	b.n	8008704 <_reclaim_reent+0x8c>
 8008724:	2500      	movs	r5, #0
 8008726:	e7ef      	b.n	8008708 <_reclaim_reent+0x90>
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	bf00      	nop
 800872c:	2000001c 	.word	0x2000001c

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	; (8008738 <__malloc_lock+0x8>)
 8008732:	f7ff bf2f 	b.w	8008594 <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	2000431c 	.word	0x2000431c

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	; (8008744 <__malloc_unlock+0x8>)
 800873e:	f7ff bf2a 	b.w	8008596 <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	2000431c 	.word	0x2000431c

08008748 <_init>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	bf00      	nop
 800874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874e:	bc08      	pop	{r3}
 8008750:	469e      	mov	lr, r3
 8008752:	4770      	bx	lr

08008754 <_fini>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr
