
Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800626c  0800626c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800626c  0800626c  0001626c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006274  08006274  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800627c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004704  20000074  080062f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004778  080062f0  00024778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd96  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b7  00000000  00000000  0003de3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  000416f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001780  00000000  00000000  00042fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000665a  00000000  00000000  00044738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ceb6  00000000  00000000  0004ad92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deeda  00000000  00000000  00067c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146b22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d60  00000000  00000000  00146b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080061ac 	.word	0x080061ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080061ac 	.word	0x080061ac

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetIdleTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetIdleTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000090 	.word	0x20000090
 8000544:	20000144 	.word	0x20000144

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fe15 	bl	800117c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f827 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 fa3d 	bl	80009d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f9e3 	bl	8000924 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800055e:	f000 f88f 	bl	8000680 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000562:	f000 f8bb 	bl	80006dc <MX_SPI2_Init>
  MX_TIM8_Init();
 8000566:	f000 f8ef 	bl	8000748 <MX_TIM8_Init>
  MX_UART4_Init();
 800056a:	f000 f9b1 	bl	80008d0 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800056e:	f000 fa03 	bl	8000978 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <main+0x54>)
 8000574:	1d3c      	adds	r4, r7, #4
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f004 fac2 	bl	8004b12 <osThreadCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <main+0x58>)
 8000592:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000594:	f004 fab6 	bl	8004b04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x50>
 800059a:	bf00      	nop
 800059c:	080061d0 	.word	0x080061d0
 80005a0:	200009cc 	.word	0x200009cc

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	2234      	movs	r2, #52	; 0x34
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fd30 	bl	8006018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b2a      	ldr	r3, [pc, #168]	; (8000678 <SystemClock_Config+0xd4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a29      	ldr	r2, [pc, #164]	; (8000678 <SystemClock_Config+0xd4>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <SystemClock_Config+0xd4>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	2300      	movs	r3, #0
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <SystemClock_Config+0xd8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a22      	ldr	r2, [pc, #136]	; (800067c <SystemClock_Config+0xd8>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000618:	2308      	movs	r3, #8
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800061c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000622:	2304      	movs	r3, #4
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000626:	2307      	movs	r3, #7
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f9ca 	bl	80029cc <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800063e:	f000 fa75 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2102      	movs	r1, #2
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fb0e 	bl	8001c80 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800066a:	f000 fa5f 	bl	8000b2c <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C1_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C1_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C1_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C1_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C1_Init+0x50>)
 80006be:	f001 f853 	bl	8001768 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 fa30 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000344 	.word	0x20000344
 80006d4:	40005400 	.word	0x40005400
 80006d8:	00061a80 	.word	0x00061a80

080006dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_SPI2_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_SPI2_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_SPI2_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_SPI2_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_SPI2_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_SPI2_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_SPI2_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SPI2_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_SPI2_Init+0x64>)
 800072e:	f002 fbeb 	bl	8002f08 <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f9f8 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000398 	.word	0x20000398
 8000744:	40003800 	.word	0x40003800

08000748 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	; 0x58
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2220      	movs	r2, #32
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f005 fc49 	bl	8006018 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000786:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <MX_TIM8_Init+0x180>)
 8000788:	4a50      	ldr	r2, [pc, #320]	; (80008cc <MX_TIM8_Init+0x184>)
 800078a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 26;
 800078c:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <MX_TIM8_Init+0x180>)
 800078e:	221a      	movs	r2, #26
 8000790:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b4d      	ldr	r3, [pc, #308]	; (80008c8 <MX_TIM8_Init+0x180>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 62418;
 8000798:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <MX_TIM8_Init+0x180>)
 800079a:	f24f 32d2 	movw	r2, #62418	; 0xf3d2
 800079e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b49      	ldr	r3, [pc, #292]	; (80008c8 <MX_TIM8_Init+0x180>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007a6:	4b48      	ldr	r3, [pc, #288]	; (80008c8 <MX_TIM8_Init+0x180>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <MX_TIM8_Init+0x180>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007b2:	4845      	ldr	r0, [pc, #276]	; (80008c8 <MX_TIM8_Init+0x180>)
 80007b4:	f002 fc31 	bl	800301a <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80007be:	f000 f9b5 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007cc:	4619      	mov	r1, r3
 80007ce:	483e      	ldr	r0, [pc, #248]	; (80008c8 <MX_TIM8_Init+0x180>)
 80007d0:	f002 ff06 	bl	80035e0 <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80007da:	f000 f9a7 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007de:	483a      	ldr	r0, [pc, #232]	; (80008c8 <MX_TIM8_Init+0x180>)
 80007e0:	f002 fcda 	bl	8003198 <HAL_TIM_PWM_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80007ea:	f000 f99f 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007fa:	4619      	mov	r1, r3
 80007fc:	4832      	ldr	r0, [pc, #200]	; (80008c8 <MX_TIM8_Init+0x180>)
 80007fe:	f003 fac9 	bl	8003d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000808:	f000 f990 	bl	8000b2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	4825      	ldr	r0, [pc, #148]	; (80008c8 <MX_TIM8_Init+0x180>)
 8000832:	f002 fe13 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800083c:	f000 f976 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	2204      	movs	r2, #4
 8000846:	4619      	mov	r1, r3
 8000848:	481f      	ldr	r0, [pc, #124]	; (80008c8 <MX_TIM8_Init+0x180>)
 800084a:	f002 fe07 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000854:	f000 f96a 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085c:	2208      	movs	r2, #8
 800085e:	4619      	mov	r1, r3
 8000860:	4819      	ldr	r0, [pc, #100]	; (80008c8 <MX_TIM8_Init+0x180>)
 8000862:	f002 fdfb 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800086c:	f000 f95e 	bl	8000b2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	220c      	movs	r2, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MX_TIM8_Init+0x180>)
 800087a:	f002 fdef 	bl	800345c <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000884:	f000 f952 	bl	8000b2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_TIM8_Init+0x180>)
 80008ac:	f003 faee 	bl	8003e8c <HAL_TIMEx_ConfigBreakDeadTime>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80008b6:	f000 f939 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <MX_TIM8_Init+0x180>)
 80008bc:	f000 fa4a 	bl	8000d54 <HAL_TIM_MspPostInit>

}
 80008c0:	bf00      	nop
 80008c2:	3758      	adds	r7, #88	; 0x58
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200003f0 	.word	0x200003f0
 80008cc:	40010400 	.word	0x40010400

080008d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_UART4_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_UART4_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_UART4_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_UART4_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_UART4_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_UART4_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_UART4_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_UART4_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_UART4_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_UART4_Init+0x4c>)
 8000908:	f003 fb26 	bl	8003f58 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f90b 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000438 	.word	0x20000438
 8000920:	40004c00 	.word	0x40004c00

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART2_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART2_UART_Init+0x4c>)
 800095c:	f003 fafc 	bl	8003f58 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f8e1 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000047c 	.word	0x2000047c
 8000974:	40004400 	.word	0x40004400

08000978 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000982:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000986:	2206      	movs	r2, #6
 8000988:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098c:	2202      	movs	r2, #2
 800098e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2202      	movs	r2, #2
 800099a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	f001 f818 	bl	80019f0 <HAL_PCD_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f8b1 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200004c0 	.word	0x200004c0

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_GPIO_Init+0x114>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x114>)
 80009f4:	f043 0304 	orr.w	r3, r3, #4
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_GPIO_Init+0x114>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a36      	ldr	r2, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b2d      	ldr	r3, [pc, #180]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4823      	ldr	r0, [pc, #140]	; (8000aec <MX_GPIO_Init+0x118>)
 8000a60:	f000 fe68 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a6a:	4821      	ldr	r0, [pc, #132]	; (8000af0 <MX_GPIO_Init+0x11c>)
 8000a6c:	f000 fe62 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	481b      	ldr	r0, [pc, #108]	; (8000af4 <MX_GPIO_Init+0x120>)
 8000a88:	f000 fcc0 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <MX_GPIO_Init+0x118>)
 8000aa4:	f000 fcb2 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_RX_DR_Pin */
  GPIO_InitStruct.Pin = NRF24_RX_DR_Pin;
 8000aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_RX_DR_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <MX_GPIO_Init+0x118>)
 8000abe:	f000 fca5 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|NRF24_CSN_Pin;
 8000ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_GPIO_Init+0x11c>)
 8000adc:	f000 fc96 	bl	800140c <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40020800 	.word	0x40020800

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f004 f852 	bl	8004baa <osDelay>
 8000b06:	e7fb      	b.n	8000b00 <StartDefaultTask+0x8>

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f000 fb51 	bl	80011c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40001000 	.word	0x40001000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_MspInit+0x54>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <HAL_MspInit+0x54>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x54>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_MspInit+0x54>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_MspInit+0x54>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_MspInit+0x54>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	210f      	movs	r1, #15
 8000b7a:	f06f 0001 	mvn.w	r0, #1
 8000b7e:	f000 fc1b 	bl	80013b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_I2C_MspInit+0x84>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12b      	bne.n	8000c0a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bce:	23c0      	movs	r3, #192	; 0xc0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd2:	2312      	movs	r3, #18
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bde:	2304      	movs	r3, #4
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <HAL_I2C_MspInit+0x8c>)
 8000bea:	f000 fc0f 	bl	800140c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_I2C_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40005400 	.word	0x40005400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400

08000c20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <HAL_SPI_MspInit+0xe0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d15a      	bne.n	8000cf8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <HAL_SPI_MspInit+0xe4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c96:	2302      	movs	r3, #2
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <HAL_SPI_MspInit+0xe8>)
 8000cb2:	f000 fbab 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <HAL_SPI_MspInit+0xe8>)
 8000cd2:	f000 fb9b 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce8:	2305      	movs	r3, #5
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <HAL_SPI_MspInit+0xec>)
 8000cf4:	f000 fb8a 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40003800 	.word	0x40003800
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_TIM_Base_MspInit+0x3c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10d      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_TIM_Base_MspInit+0x40>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <HAL_TIM_Base_MspInit+0x40>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <HAL_TIM_Base_MspInit+0x40>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <HAL_TIM_MspPostInit+0x68>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d11e      	bne.n	8000db4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_TIM_MspPostInit+0x6c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_TIM_MspPostInit+0x6c>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_TIM_MspPostInit+0x6c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d92:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000da4:	2303      	movs	r3, #3
 8000da6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_TIM_MspPostInit+0x70>)
 8000db0:	f000 fb2c 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3720      	adds	r7, #32
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40010400 	.word	0x40010400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020800 	.word	0x40020800

08000dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a41      	ldr	r2, [pc, #260]	; (8000eec <HAL_UART_MspInit+0x124>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d14b      	bne.n	8000e82 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a3f      	ldr	r2, [pc, #252]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a38      	ldr	r2, [pc, #224]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <HAL_UART_MspInit+0x12c>)
 8000e5a:	f000 fad7 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e70:	2308      	movs	r3, #8
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <HAL_UART_MspInit+0x130>)
 8000e7c:	f000 fac6 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e80:	e030      	b.n	8000ee4 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_UART_MspInit+0x134>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d12b      	bne.n	8000ee4 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a16      	ldr	r2, [pc, #88]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_UART_MspInit+0x128>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_UART_MspInit+0x12c>)
 8000ee0:	f000 fa94 	bl	800140c <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40004c00 	.word	0x40004c00
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40004400 	.word	0x40004400

08000f00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0a0      	sub	sp, #128	; 0x80
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	225c      	movs	r2, #92	; 0x5c
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f005 f879 	bl	8006018 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f2e:	d141      	bne.n	8000fb4 <HAL_PCD_MspInit+0xb4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f36:	2300      	movs	r3, #0
 8000f38:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 ffea 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000f4a:	f7ff fdef 	bl	8000b2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f84:	4619      	mov	r1, r3
 8000f86:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <HAL_PCD_MspInit+0xc0>)
 8000f88:	f000 fa40 	bl	800140c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f96:	6353      	str	r3, [r2, #52]	; 0x34
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <HAL_PCD_MspInit+0xbc>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3780      	adds	r7, #128	; 0x80
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <HAL_InitTick+0xe4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_InitTick+0xe4>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_InitTick+0xe4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ff0:	f107 0210 	add.w	r2, r7, #16
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 ff5a 	bl	8001eb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	2b00      	cmp	r3, #0
 8001008:	d103      	bne.n	8001012 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800100a:	f000 ff2b 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 800100e:	6378      	str	r0, [r7, #52]	; 0x34
 8001010:	e004      	b.n	800101c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001012:	f000 ff27 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 8001016:	4603      	mov	r3, r0
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800101c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101e:	4a23      	ldr	r2, [pc, #140]	; (80010ac <HAL_InitTick+0xe8>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	0c9b      	lsrs	r3, r3, #18
 8001026:	3b01      	subs	r3, #1
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_InitTick+0xec>)
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <HAL_InitTick+0xf0>)
 800102e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_InitTick+0xec>)
 8001032:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001036:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_InitTick+0xec>)
 800103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_InitTick+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_InitTick+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_InitTick+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001050:	4817      	ldr	r0, [pc, #92]	; (80010b0 <HAL_InitTick+0xec>)
 8001052:	f001 ffe2 	bl	800301a <HAL_TIM_Base_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800105c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001060:	2b00      	cmp	r3, #0
 8001062:	d11b      	bne.n	800109c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <HAL_InitTick+0xec>)
 8001066:	f002 f827 	bl	80030b8 <HAL_TIM_Base_Start_IT>
 800106a:	4603      	mov	r3, r0
 800106c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001070:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001074:	2b00      	cmp	r3, #0
 8001076:	d111      	bne.n	800109c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001078:	2036      	movs	r0, #54	; 0x36
 800107a:	f000 f9b9 	bl	80013f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d808      	bhi.n	8001096 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	2036      	movs	r0, #54	; 0x36
 800108a:	f000 f995 	bl	80013b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_InitTick+0xf4>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e002      	b.n	800109c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	431bde83 	.word	0x431bde83
 80010b0:	200009d0 	.word	0x200009d0
 80010b4:	40001000 	.word	0x40001000
 80010b8:	20000004 	.word	0x20000004

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM6_DAC_IRQHandler+0x10>)
 80010ee:	f002 f8ac 	bl	800324a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200009d0 	.word	0x200009d0

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <SystemInit+0x28>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <SystemInit+0x28>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SystemInit+0x28>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800112c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr  r2, =_sbss
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001152:	f7ff ffd3 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f004 ff39 	bl	8005fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff f9f5 	bl	8000548 <main>
  bx  lr    
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001164:	0800627c 	.word	0x0800627c
  ldr  r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800116c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001170:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001174:	20004778 	.word	0x20004778

08001178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <HAL_Init+0x40>)
 8001186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_Init+0x40>)
 8001192:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_Init+0x40>)
 800119e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 f8fc 	bl	80013a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011aa:	200f      	movs	r0, #15
 80011ac:	f7ff ff0a 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b0:	f7ff fcc2 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000a18 	.word	0x20000a18

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000a18 	.word	0x20000a18

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ffee 	bl	80011e8 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffde 	bl	80011e8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ff4c 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ca:	f7ff ff61 	bl	8001290 <__NVIC_GetPriorityGrouping>
 80013ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	6978      	ldr	r0, [r7, #20]
 80013d6:	f7ff ffb1 	bl	800133c <NVIC_EncodePriority>
 80013da:	4602      	mov	r2, r0
 80013dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff80 	bl	80012e8 <__NVIC_SetPriority>
}
 80013e8:	bf00      	nop
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff54 	bl	80012ac <__NVIC_EnableIRQ>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	e165      	b.n	80016f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8154 	bne.w	80016ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b01      	cmp	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	2b02      	cmp	r3, #2
 800145c:	d130      	bne.n	80014c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	2201      	movs	r2, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	091b      	lsrs	r3, r3, #4
 80014aa:	f003 0201 	and.w	r2, r3, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d017      	beq.n	80014fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d123      	bne.n	8001550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0203 	and.w	r2, r3, #3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80ae 	beq.w	80016ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_GPIO_Init+0x300>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a5c      	ldr	r2, [pc, #368]	; (800170c <HAL_GPIO_Init+0x300>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_GPIO_Init+0x300>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_GPIO_Init+0x304>)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	220f      	movs	r2, #15
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x308>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d025      	beq.n	8001626 <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x30c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x310>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x314>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x318>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x20a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x31c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x206>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x320>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x202>
 800160a:	2306      	movs	r3, #6
 800160c:	e00c      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800160e:	2307      	movs	r3, #7
 8001610:	e00a      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001612:	2305      	movs	r3, #5
 8001614:	e008      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001616:	2304      	movs	r3, #4
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161a:	2303      	movs	r3, #3
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x21c>
 8001626:	2300      	movs	r3, #0
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <HAL_GPIO_Init+0x304>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166a:	4a31      	ldr	r2, [pc, #196]	; (8001730 <HAL_GPIO_Init+0x324>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_GPIO_Init+0x324>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_GPIO_Init+0x324>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <HAL_GPIO_Init+0x324>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	f67f ae96 	bls.w	8001428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800
 8001730:	40013c00 	.word	0x40013c00

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	619a      	str	r2, [r3, #24]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e12b      	b.n	80019d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff f9fe 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2224      	movs	r2, #36	; 0x24
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017cc:	f000 fb4a 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80017d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a81      	ldr	r2, [pc, #516]	; (80019dc <HAL_I2C_Init+0x274>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d807      	bhi.n	80017ec <HAL_I2C_Init+0x84>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <HAL_I2C_Init+0x278>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	bf94      	ite	ls
 80017e4:	2301      	movls	r3, #1
 80017e6:	2300      	movhi	r3, #0
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	e006      	b.n	80017fa <HAL_I2C_Init+0x92>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4a7d      	ldr	r2, [pc, #500]	; (80019e4 <HAL_I2C_Init+0x27c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	bf94      	ite	ls
 80017f4:	2301      	movls	r3, #1
 80017f6:	2300      	movhi	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0e7      	b.n	80019d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4a78      	ldr	r2, [pc, #480]	; (80019e8 <HAL_I2C_Init+0x280>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9b      	lsrs	r3, r3, #18
 800180c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	430a      	orrs	r2, r1
 8001820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a6a      	ldr	r2, [pc, #424]	; (80019dc <HAL_I2C_Init+0x274>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d802      	bhi.n	800183c <HAL_I2C_Init+0xd4>
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3301      	adds	r3, #1
 800183a:	e009      	b.n	8001850 <HAL_I2C_Init+0xe8>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	4a69      	ldr	r2, [pc, #420]	; (80019ec <HAL_I2C_Init+0x284>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	099b      	lsrs	r3, r3, #6
 800184e:	3301      	adds	r3, #1
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	430b      	orrs	r3, r1
 8001856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001862:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	495c      	ldr	r1, [pc, #368]	; (80019dc <HAL_I2C_Init+0x274>)
 800186c:	428b      	cmp	r3, r1
 800186e:	d819      	bhi.n	80018a4 <HAL_I2C_Init+0x13c>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e59      	subs	r1, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fbb1 f3f3 	udiv	r3, r1, r3
 800187e:	1c59      	adds	r1, r3, #1
 8001880:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001884:	400b      	ands	r3, r1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00a      	beq.n	80018a0 <HAL_I2C_Init+0x138>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1e59      	subs	r1, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fbb1 f3f3 	udiv	r3, r1, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189e:	e051      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 80018a0:	2304      	movs	r3, #4
 80018a2:	e04f      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d111      	bne.n	80018d0 <HAL_I2C_Init+0x168>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e012      	b.n	80018f6 <HAL_I2C_Init+0x18e>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e58      	subs	r0, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	0099      	lsls	r1, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Init+0x196>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e022      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10e      	bne.n	8001924 <HAL_I2C_Init+0x1bc>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1e58      	subs	r0, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	440b      	add	r3, r1
 8001914:	fbb0 f3f3 	udiv	r3, r0, r3
 8001918:	3301      	adds	r3, #1
 800191a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001922:	e00f      	b.n	8001944 <HAL_I2C_Init+0x1dc>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	0099      	lsls	r1, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	6809      	ldr	r1, [r1, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6911      	ldr	r1, [r2, #16]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68d2      	ldr	r2, [r2, #12]
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	000186a0 	.word	0x000186a0
 80019e0:	001e847f 	.word	0x001e847f
 80019e4:	003d08ff 	.word	0x003d08ff
 80019e8:	431bde83 	.word	0x431bde83
 80019ec:	10624dd3 	.word	0x10624dd3

080019f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	b08f      	sub	sp, #60	; 0x3c
 80019f4:	af0a      	add	r7, sp, #40	; 0x28
 80019f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e116      	b.n	8001c30 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d106      	bne.n	8001a22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fa6f 	bl	8000f00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fdac 	bl	800459e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	687e      	ldr	r6, [r7, #4]
 8001a4e:	466d      	mov	r5, sp
 8001a50:	f106 0410 	add.w	r4, r6, #16
 8001a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a60:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a64:	1d33      	adds	r3, r6, #4
 8001a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a68:	6838      	ldr	r0, [r7, #0]
 8001a6a:	f002 fd37 	bl	80044dc <USB_CoreInit>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0d7      	b.n	8001c30 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fd9a 	bl	80045c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e04a      	b.n	8001b28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	333d      	adds	r3, #61	; 0x3d
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	333c      	adds	r3, #60	; 0x3c
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
 8001abe:	b298      	uxth	r0, r3
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	3344      	adds	r3, #68	; 0x44
 8001ace:	4602      	mov	r2, r0
 8001ad0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	3340      	adds	r3, #64	; 0x40
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	3348      	adds	r3, #72	; 0x48
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	334c      	adds	r3, #76	; 0x4c
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3354      	adds	r3, #84	; 0x54
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	3301      	adds	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3af      	bcc.n	8001a92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e044      	b.n	8001bc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b90:	7bfa      	ldrb	r2, [r7, #15]
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d3b5      	bcc.n	8001b38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	687e      	ldr	r6, [r7, #4]
 8001bd4:	466d      	mov	r5, sp
 8001bd6:	f106 0410 	add.w	r4, r6, #16
 8001bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001be6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bea:	1d33      	adds	r3, r6, #4
 8001bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bee:	6838      	ldr	r0, [r7, #0]
 8001bf0:	f002 fd32 	bl	8004658 <USB_DevInit>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e014      	b.n	8001c30 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d102      	bne.n	8001c24 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f80a 	bl	8001c38 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f002 fef0 	bl	8004a0e <USB_DevDisconnect>

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	f043 0303 	orr.w	r3, r3, #3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0cc      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b68      	ldr	r3, [pc, #416]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d90c      	bls.n	8001cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0b8      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd4:	4b59      	ldr	r3, [pc, #356]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	494d      	ldr	r1, [pc, #308]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d044      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d119      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e07f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e067      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5e:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f023 0203 	bic.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4934      	ldr	r1, [pc, #208]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d70:	f7ff fa3a 	bl	80011e8 <HAL_GetTick>
 8001d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7ff fa36 	bl	80011e8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e04f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 020c 	and.w	r2, r3, #12
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1eb      	bne.n	8001d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d20c      	bcs.n	8001dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e032      	b.n	8001e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4916      	ldr	r1, [pc, #88]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	490e      	ldr	r1, [pc, #56]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e06:	f000 fbb1 	bl	800256c <HAL_RCC_GetSysClockFreq>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	490a      	ldr	r1, [pc, #40]	; (8001e40 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	5ccb      	ldrb	r3, [r1, r3]
 8001e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f8cc 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	080061f4 	.word	0x080061f4
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000000 	.word	0x20000000

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08006204 	.word	0x08006204

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffdc 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0b5b      	lsrs	r3, r3, #13
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08006204 	.word	0x08006204

08001eb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_RCC_GetClockConfig+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40023c00 	.word	0x40023c00

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	; 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001f50:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f56:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	496c      	ldr	r1, [pc, #432]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f7e:	4b64      	ldr	r3, [pc, #400]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f84:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8c:	4960      	ldr	r1, [pc, #384]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d017      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fac:	4b58      	ldr	r3, [pc, #352]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4955      	ldr	r1, [pc, #340]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d017      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe8:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	4946      	ldr	r1, [pc, #280]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002006:	d101      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002008:	2301      	movs	r3, #1
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002014:	2301      	movs	r3, #1
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 808a 	beq.w	800213a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a33      	ldr	r2, [pc, #204]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800204e:	f7ff f8cb 	bl	80011e8 <HAL_GetTick>
 8002052:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff f8c7 	bl	80011e8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e278      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d02f      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	429a      	cmp	r2, r3
 8002090:	d028      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d114      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f895 	bl	80011e8 <HAL_GetTick>
 80020be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff f891 	bl	80011e8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e240      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ee      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020f0:	d114      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x204>
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002106:	4902      	ldr	r1, [pc, #8]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
 800210c:	e00c      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800
 8002114:	40007000 	.word	0x40007000
 8002118:	42470e40 	.word	0x42470e40
 800211c:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a49      	ldr	r2, [pc, #292]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002122:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002126:	6093      	str	r3, [r2, #8]
 8002128:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800212a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	4944      	ldr	r1, [pc, #272]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002136:	4313      	orrs	r3, r2
 8002138:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d004      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800214e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002162:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800217e:	4b32      	ldr	r3, [pc, #200]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002184:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218c:	492e      	ldr	r1, [pc, #184]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d011      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ae:	4926      	ldr	r1, [pc, #152]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021be:	d101      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	491a      	ldr	r1, [pc, #104]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d011      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002200:	4911      	ldr	r1, [pc, #68]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002210:	d101      	bne.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002212:	2301      	movs	r3, #1
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d005      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002224:	f040 80ff 	bne.w	8002426 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800222e:	f7fe ffdb 	bl	80011e8 <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002234:	e00e      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002236:	f7fe ffd7 	bl	80011e8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d907      	bls.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e188      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002248:	40023800 	.word	0x40023800
 800224c:	424711e0 	.word	0x424711e0
 8002250:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002254:	4b7e      	ldr	r3, [pc, #504]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ea      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800227c:	2b00      	cmp	r3, #0
 800227e:	d028      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	2b00      	cmp	r3, #0
 8002286:	d124      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002288:	4b71      	ldr	r3, [pc, #452]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800228a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800228e:	0c1b      	lsrs	r3, r3, #16
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	3301      	adds	r3, #1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800229a:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a0:	0e1b      	lsrs	r3, r3, #24
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	019b      	lsls	r3, r3, #6
 80022b2:	431a      	orrs	r2, r3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	085b      	lsrs	r3, r3, #1
 80022b8:	3b01      	subs	r3, #1
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	431a      	orrs	r2, r3
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	071b      	lsls	r3, r3, #28
 80022ca:	4961      	ldr	r1, [pc, #388]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d035      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fc:	d130      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80022fe:	4b54      	ldr	r3, [pc, #336]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	3301      	adds	r3, #1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002310:	4b4f      	ldr	r3, [pc, #316]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002316:	0f1b      	lsrs	r3, r3, #28
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	019b      	lsls	r3, r3, #6
 8002328:	431a      	orrs	r2, r3
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	3b01      	subs	r3, #1
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	431a      	orrs	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	071b      	lsls	r3, r3, #28
 8002340:	4943      	ldr	r1, [pc, #268]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800234a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800234e:	f023 021f 	bic.w	r2, r3, #31
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	3b01      	subs	r3, #1
 8002358:	493d      	ldr	r1, [pc, #244]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	2b00      	cmp	r3, #0
 800236a:	d029      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002374:	d124      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002388:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238e:	0f1b      	lsrs	r3, r3, #28
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	019b      	lsls	r3, r3, #6
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3b01      	subs	r3, #1
 80023aa:	041b      	lsls	r3, r3, #16
 80023ac:	431a      	orrs	r2, r3
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	061b      	lsls	r3, r3, #24
 80023b2:	431a      	orrs	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	071b      	lsls	r3, r3, #28
 80023b8:	4925      	ldr	r1, [pc, #148]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d016      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	071b      	lsls	r3, r3, #28
 80023f2:	4917      	ldr	r1, [pc, #92]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002400:	f7fe fef2 	bl	80011e8 <HAL_GetTick>
 8002404:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002408:	f7fe feee 	bl	80011e8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e09f      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	2b01      	cmp	r3, #1
 800242a:	f040 8095 	bne.w	8002558 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002434:	f7fe fed8 	bl	80011e8 <HAL_GetTick>
 8002438:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800243a:	e00f      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800243c:	f7fe fed4 	bl	80011e8 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d908      	bls.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e085      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	42470068 	.word	0x42470068
 8002458:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002468:	d0e8      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02b      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	2b00      	cmp	r3, #0
 8002490:	d127      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002492:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	3301      	adds	r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	431a      	orrs	r2, r3
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	3b01      	subs	r3, #1
 80024b6:	041b      	lsls	r3, r3, #16
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	061b      	lsls	r3, r3, #24
 80024c0:	4928      	ldr	r1, [pc, #160]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	3b01      	subs	r3, #1
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	4922      	ldr	r1, [pc, #136]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01d      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f6:	d118      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	0e1b      	lsrs	r3, r3, #24
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	019b      	lsls	r3, r3, #6
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	431a      	orrs	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	4910      	ldr	r1, [pc, #64]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002530:	f7fe fe5a 	bl	80011e8 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002538:	f7fe fe56 	bl	80011e8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e007      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800254a:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002556:	d1ef      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3730      	adds	r7, #48	; 0x30
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	42470070 	.word	0x42470070

0800256c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800256c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002570:	b0ae      	sub	sp, #184	; 0xb8
 8002572:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002592:	4bcb      	ldr	r3, [pc, #812]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b0c      	cmp	r3, #12
 800259c:	f200 8206 	bhi.w	80029ac <HAL_RCC_GetSysClockFreq+0x440>
 80025a0:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	080025dd 	.word	0x080025dd
 80025ac:	080029ad 	.word	0x080029ad
 80025b0:	080029ad 	.word	0x080029ad
 80025b4:	080029ad 	.word	0x080029ad
 80025b8:	080025e5 	.word	0x080025e5
 80025bc:	080029ad 	.word	0x080029ad
 80025c0:	080029ad 	.word	0x080029ad
 80025c4:	080029ad 	.word	0x080029ad
 80025c8:	080025ed 	.word	0x080025ed
 80025cc:	080029ad 	.word	0x080029ad
 80025d0:	080029ad 	.word	0x080029ad
 80025d4:	080029ad 	.word	0x080029ad
 80025d8:	080027dd 	.word	0x080027dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025dc:	4bb9      	ldr	r3, [pc, #740]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80025de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80025e2:	e1e7      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e4:	4bb8      	ldr	r3, [pc, #736]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025ea:	e1e3      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ec:	4bb4      	ldr	r3, [pc, #720]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f8:	4bb1      	ldr	r3, [pc, #708]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d071      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002604:	4bae      	ldr	r3, [pc, #696]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	099b      	lsrs	r3, r3, #6
 800260a:	2200      	movs	r2, #0
 800260c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002610:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002620:	2300      	movs	r3, #0
 8002622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800262a:	4622      	mov	r2, r4
 800262c:	462b      	mov	r3, r5
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	0159      	lsls	r1, r3, #5
 8002638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263c:	0150      	lsls	r0, r2, #5
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4621      	mov	r1, r4
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	6439      	str	r1, [r7, #64]	; 0x40
 8002648:	4629      	mov	r1, r5
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	647b      	str	r3, [r7, #68]	; 0x44
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800265c:	4649      	mov	r1, r9
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	4641      	mov	r1, r8
 8002662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002666:	4641      	mov	r1, r8
 8002668:	018a      	lsls	r2, r1, #6
 800266a:	4641      	mov	r1, r8
 800266c:	1a51      	subs	r1, r2, r1
 800266e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002670:	4649      	mov	r1, r9
 8002672:	eb63 0301 	sbc.w	r3, r3, r1
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002684:	4649      	mov	r1, r9
 8002686:	00cb      	lsls	r3, r1, #3
 8002688:	4641      	mov	r1, r8
 800268a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800268e:	4641      	mov	r1, r8
 8002690:	00ca      	lsls	r2, r1, #3
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	4603      	mov	r3, r0
 8002698:	4622      	mov	r2, r4
 800269a:	189b      	adds	r3, r3, r2
 800269c:	633b      	str	r3, [r7, #48]	; 0x30
 800269e:	462b      	mov	r3, r5
 80026a0:	460a      	mov	r2, r1
 80026a2:	eb42 0303 	adc.w	r3, r2, r3
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026b4:	4629      	mov	r1, r5
 80026b6:	024b      	lsls	r3, r1, #9
 80026b8:	4621      	mov	r1, r4
 80026ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026be:	4621      	mov	r1, r4
 80026c0:	024a      	lsls	r2, r1, #9
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ca:	2200      	movs	r2, #0
 80026cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80026d8:	f7fd fd9a 	bl	8000210 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026e6:	e067      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e8:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	2200      	movs	r2, #0
 80026f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002700:	67bb      	str	r3, [r7, #120]	; 0x78
 8002702:	2300      	movs	r3, #0
 8002704:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002706:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800270a:	4622      	mov	r2, r4
 800270c:	462b      	mov	r3, r5
 800270e:	f04f 0000 	mov.w	r0, #0
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	0159      	lsls	r1, r3, #5
 8002718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800271c:	0150      	lsls	r0, r2, #5
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4621      	mov	r1, r4
 8002724:	1a51      	subs	r1, r2, r1
 8002726:	62b9      	str	r1, [r7, #40]	; 0x28
 8002728:	4629      	mov	r1, r5
 800272a:	eb63 0301 	sbc.w	r3, r3, r1
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800273c:	4649      	mov	r1, r9
 800273e:	018b      	lsls	r3, r1, #6
 8002740:	4641      	mov	r1, r8
 8002742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002746:	4641      	mov	r1, r8
 8002748:	018a      	lsls	r2, r1, #6
 800274a:	4641      	mov	r1, r8
 800274c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002750:	4649      	mov	r1, r9
 8002752:	eb63 0b01 	sbc.w	fp, r3, r1
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800276a:	4692      	mov	sl, r2
 800276c:	469b      	mov	fp, r3
 800276e:	4623      	mov	r3, r4
 8002770:	eb1a 0303 	adds.w	r3, sl, r3
 8002774:	623b      	str	r3, [r7, #32]
 8002776:	462b      	mov	r3, r5
 8002778:	eb4b 0303 	adc.w	r3, fp, r3
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800278a:	4629      	mov	r1, r5
 800278c:	028b      	lsls	r3, r1, #10
 800278e:	4621      	mov	r1, r4
 8002790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002794:	4621      	mov	r1, r4
 8002796:	028a      	lsls	r2, r1, #10
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027a0:	2200      	movs	r2, #0
 80027a2:	673b      	str	r3, [r7, #112]	; 0x70
 80027a4:	677a      	str	r2, [r7, #116]	; 0x74
 80027a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80027aa:	f7fd fd31 	bl	8000210 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4613      	mov	r3, r2
 80027b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027b8:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80027ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027da:	e0eb      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4b38      	ldr	r3, [pc, #224]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e8:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d06b      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	2200      	movs	r2, #0
 80027fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80027fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	663b      	str	r3, [r7, #96]	; 0x60
 8002808:	2300      	movs	r3, #0
 800280a:	667b      	str	r3, [r7, #100]	; 0x64
 800280c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002810:	4622      	mov	r2, r4
 8002812:	462b      	mov	r3, r5
 8002814:	f04f 0000 	mov.w	r0, #0
 8002818:	f04f 0100 	mov.w	r1, #0
 800281c:	0159      	lsls	r1, r3, #5
 800281e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002822:	0150      	lsls	r0, r2, #5
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4621      	mov	r1, r4
 800282a:	1a51      	subs	r1, r2, r1
 800282c:	61b9      	str	r1, [r7, #24]
 800282e:	4629      	mov	r1, r5
 8002830:	eb63 0301 	sbc.w	r3, r3, r1
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002842:	4659      	mov	r1, fp
 8002844:	018b      	lsls	r3, r1, #6
 8002846:	4651      	mov	r1, sl
 8002848:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284c:	4651      	mov	r1, sl
 800284e:	018a      	lsls	r2, r1, #6
 8002850:	4651      	mov	r1, sl
 8002852:	ebb2 0801 	subs.w	r8, r2, r1
 8002856:	4659      	mov	r1, fp
 8002858:	eb63 0901 	sbc.w	r9, r3, r1
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800286c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002870:	4690      	mov	r8, r2
 8002872:	4699      	mov	r9, r3
 8002874:	4623      	mov	r3, r4
 8002876:	eb18 0303 	adds.w	r3, r8, r3
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	462b      	mov	r3, r5
 800287e:	eb49 0303 	adc.w	r3, r9, r3
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002890:	4629      	mov	r1, r5
 8002892:	024b      	lsls	r3, r1, #9
 8002894:	4621      	mov	r1, r4
 8002896:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800289a:	4621      	mov	r1, r4
 800289c:	024a      	lsls	r2, r1, #9
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028a6:	2200      	movs	r2, #0
 80028a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028b0:	f7fd fcae 	bl	8000210 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4613      	mov	r3, r2
 80028ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028be:	e065      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x420>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	00f42400 	.word	0x00f42400
 80028c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028cc:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	2200      	movs	r2, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	4611      	mov	r1, r2
 80028d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028dc:	653b      	str	r3, [r7, #80]	; 0x50
 80028de:	2300      	movs	r3, #0
 80028e0:	657b      	str	r3, [r7, #84]	; 0x54
 80028e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80028e6:	4642      	mov	r2, r8
 80028e8:	464b      	mov	r3, r9
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	0159      	lsls	r1, r3, #5
 80028f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f8:	0150      	lsls	r0, r2, #5
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4641      	mov	r1, r8
 8002900:	1a51      	subs	r1, r2, r1
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	4649      	mov	r1, r9
 8002906:	eb63 0301 	sbc.w	r3, r3, r1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002918:	4659      	mov	r1, fp
 800291a:	018b      	lsls	r3, r1, #6
 800291c:	4651      	mov	r1, sl
 800291e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002922:	4651      	mov	r1, sl
 8002924:	018a      	lsls	r2, r1, #6
 8002926:	4651      	mov	r1, sl
 8002928:	1a54      	subs	r4, r2, r1
 800292a:	4659      	mov	r1, fp
 800292c:	eb63 0501 	sbc.w	r5, r3, r1
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	00eb      	lsls	r3, r5, #3
 800293a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293e:	00e2      	lsls	r2, r4, #3
 8002940:	4614      	mov	r4, r2
 8002942:	461d      	mov	r5, r3
 8002944:	4643      	mov	r3, r8
 8002946:	18e3      	adds	r3, r4, r3
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	464b      	mov	r3, r9
 800294c:	eb45 0303 	adc.w	r3, r5, r3
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295e:	4629      	mov	r1, r5
 8002960:	028b      	lsls	r3, r1, #10
 8002962:	4621      	mov	r1, r4
 8002964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002968:	4621      	mov	r1, r4
 800296a:	028a      	lsls	r2, r1, #10
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002974:	2200      	movs	r2, #0
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
 8002978:	64fa      	str	r2, [r7, #76]	; 0x4c
 800297a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800297e:	f7fd fc47 	bl	8000210 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4613      	mov	r3, r2
 8002988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800298c:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0f1b      	lsrs	r3, r3, #28
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800299a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800299e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029aa:	e003      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80029b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	37b8      	adds	r7, #184	; 0xb8
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	00f42400 	.word	0x00f42400

080029cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e28d      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8083 	beq.w	8002af2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029ec:	4b94      	ldr	r3, [pc, #592]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d019      	beq.n	8002a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029f8:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a04:	4b8e      	ldr	r3, [pc, #568]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a10:	d00c      	beq.n	8002a2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d112      	bne.n	8002a44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a2a:	d10b      	bne.n	8002a44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	4b84      	ldr	r3, [pc, #528]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d05b      	beq.n	8002af0 <HAL_RCC_OscConfig+0x124>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d157      	bne.n	8002af0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e25a      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4c:	d106      	bne.n	8002a5c <HAL_RCC_OscConfig+0x90>
 8002a4e:	4b7c      	ldr	r3, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7b      	ldr	r2, [pc, #492]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e01d      	b.n	8002a98 <HAL_RCC_OscConfig+0xcc>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0xb4>
 8002a66:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a75      	ldr	r2, [pc, #468]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b73      	ldr	r3, [pc, #460]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a72      	ldr	r2, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0xcc>
 8002a80:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6b      	ldr	r2, [pc, #428]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fba2 	bl	80011e8 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7fe fb9e 	bl	80011e8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e21f      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b61      	ldr	r3, [pc, #388]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xdc>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb8e 	bl	80011e8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fb8a 	bl	80011e8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b64      	cmp	r3, #100	; 0x64
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e20b      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x104>
 8002aee:	e000      	b.n	8002af2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d06f      	beq.n	8002bde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002afe:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b0a:	4b4d      	ldr	r3, [pc, #308]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d105      	bne.n	8002b22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b16:	4b4a      	ldr	r3, [pc, #296]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d11c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d116      	bne.n	8002b68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_RCC_OscConfig+0x186>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d001      	beq.n	8002b52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e1d3      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4937      	ldr	r1, [pc, #220]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d020      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b70:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_OscConfig+0x278>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fb37 	bl	80011e8 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b7e:	f7fe fb33 	bl	80011e8 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e1b4      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4925      	ldr	r1, [pc, #148]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e015      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb2:	4b24      	ldr	r3, [pc, #144]	; (8002c44 <HAL_RCC_OscConfig+0x278>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fb16 	bl	80011e8 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bc0:	f7fe fb12 	bl	80011e8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e193      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d036      	beq.n	8002c58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf2:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_RCC_OscConfig+0x27c>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe faf6 	bl	80011e8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe faf2 	bl	80011e8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e173      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x274>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x234>
 8002c1e:	e01b      	b.n	8002c58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_RCC_OscConfig+0x27c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe fadf 	bl	80011e8 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2c:	e00e      	b.n	8002c4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fadb 	bl	80011e8 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d907      	bls.n	8002c4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e15c      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
 8002c40:	40023800 	.word	0x40023800
 8002c44:	42470000 	.word	0x42470000
 8002c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	4b8a      	ldr	r3, [pc, #552]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ea      	bne.n	8002c2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8097 	beq.w	8002d94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6a:	4b83      	ldr	r3, [pc, #524]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	4a7e      	ldr	r2, [pc, #504]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	; 0x40
 8002c86:	4b7c      	ldr	r3, [pc, #496]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b79      	ldr	r3, [pc, #484]	; (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b76      	ldr	r3, [pc, #472]	; (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a75      	ldr	r2, [pc, #468]	; (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7fe fa9b 	bl	80011e8 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7fe fa97 	bl	80011e8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e118      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCC_OscConfig+0x4b0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x31e>
 8002cdc:	4b66      	ldr	r3, [pc, #408]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a65      	ldr	r2, [pc, #404]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce8:	e01c      	b.n	8002d24 <HAL_RCC_OscConfig+0x358>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b05      	cmp	r3, #5
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x340>
 8002cf2:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a60      	ldr	r2, [pc, #384]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a5d      	ldr	r2, [pc, #372]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0x358>
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d10:	4a59      	ldr	r2, [pc, #356]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	6713      	str	r3, [r2, #112]	; 0x70
 8002d18:	4b57      	ldr	r3, [pc, #348]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	4a56      	ldr	r2, [pc, #344]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	f023 0304 	bic.w	r3, r3, #4
 8002d22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d015      	beq.n	8002d58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fa5c 	bl	80011e8 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe fa58 	bl	80011e8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0d7      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0ee      	beq.n	8002d34 <HAL_RCC_OscConfig+0x368>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fa46 	bl	80011e8 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fa42 	bl	80011e8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0c1      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d76:	4b40      	ldr	r3, [pc, #256]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ee      	bne.n	8002d60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d88:	4b3b      	ldr	r3, [pc, #236]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	4a3a      	ldr	r2, [pc, #232]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80ad 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b08      	cmp	r3, #8
 8002da8:	d060      	beq.n	8002e6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d145      	bne.n	8002e3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x4b4>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fa16 	bl	80011e8 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fa12 	bl	80011e8 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e093      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd2:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	019b      	lsls	r3, r3, #6
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	3b01      	subs	r3, #1
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	071b      	lsls	r3, r3, #28
 8002e0a:	491b      	ldr	r1, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e10:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x4b4>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e16:	f7fe f9e7 	bl	80011e8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fe f9e3 	bl	80011e8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e064      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x452>
 8002e3c:	e05c      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_OscConfig+0x4b4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f9d0 	bl	80011e8 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f9cc 	bl	80011e8 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e04d      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x480>
 8002e6a:	e045      	b.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e040      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <HAL_RCC_OscConfig+0x538>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d030      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d129      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d122      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d119      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07b      	b.n	8003012 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2a:	d009      	beq.n	8002f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
 8002f32:	e005      	b.n	8002f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fe60 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	f003 0104 	and.w	r1, r3, #4
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f003 0210 	and.w	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69da      	ldr	r2, [r3, #28]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e041      	b.n	80030b0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fe65 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f000 fbb1 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e04e      	b.n	800316e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a23      	ldr	r2, [pc, #140]	; (800317c <HAL_TIM_Base_Start_IT+0xc4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fa:	d01d      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_TIM_Base_Start_IT+0xc8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d018      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_TIM_Base_Start_IT+0xcc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <HAL_TIM_Base_Start_IT+0xd0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00e      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_TIM_Base_Start_IT+0xd4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_TIM_Base_Start_IT+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIM_Base_Start_IT+0xdc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b06      	cmp	r3, #6
 8003148:	d010      	beq.n	800316c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	e007      	b.n	800316c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40010400 	.word	0x40010400
 8003190:	40014000 	.word	0x40014000
 8003194:	40001800 	.word	0x40001800

08003198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e041      	b.n	800322e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f839 	bl	8003236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f000 faf2 	bl	80037c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d122      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d11b      	bne.n	80032a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f06f 0202 	mvn.w	r2, #2
 8003276:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fa78 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 8003292:	e005      	b.n	80032a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fa6a 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fa7b 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d122      	bne.n	80032fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d11b      	bne.n	80032fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f06f 0204 	mvn.w	r2, #4
 80032ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fa4e 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 80032e6:	e005      	b.n	80032f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fa40 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa51 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d122      	bne.n	800334e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b08      	cmp	r3, #8
 8003314:	d11b      	bne.n	800334e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f06f 0208 	mvn.w	r2, #8
 800331e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2204      	movs	r2, #4
 8003324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fa24 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 800333a:	e005      	b.n	8003348 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 fa16 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa27 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d122      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b10      	cmp	r3, #16
 8003368:	d11b      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f06f 0210 	mvn.w	r2, #16
 8003372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2208      	movs	r2, #8
 8003378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f9fa 	bl	8003782 <HAL_TIM_IC_CaptureCallback>
 800338e:	e005      	b.n	800339c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f9ec 	bl	800376e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f9fd 	bl	8003796 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10e      	bne.n	80033ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d107      	bne.n	80033ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0201 	mvn.w	r2, #1
 80033c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fd fb9d 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d8:	2b80      	cmp	r3, #128	; 0x80
 80033da:	d10e      	bne.n	80033fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b80      	cmp	r3, #128	; 0x80
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fda5 	bl	8003f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d10e      	bne.n	8003426 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d107      	bne.n	8003426 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800341e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9c2 	bl	80037aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b20      	cmp	r3, #32
 8003432:	d10e      	bne.n	8003452 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b20      	cmp	r3, #32
 8003440:	d107      	bne.n	8003452 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f06f 0220 	mvn.w	r2, #32
 800344a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fd6f 	bl	8003f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003476:	2302      	movs	r3, #2
 8003478:	e0ae      	b.n	80035d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b0c      	cmp	r3, #12
 8003486:	f200 809f 	bhi.w	80035c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	080034c5 	.word	0x080034c5
 8003494:	080035c9 	.word	0x080035c9
 8003498:	080035c9 	.word	0x080035c9
 800349c:	080035c9 	.word	0x080035c9
 80034a0:	08003505 	.word	0x08003505
 80034a4:	080035c9 	.word	0x080035c9
 80034a8:	080035c9 	.word	0x080035c9
 80034ac:	080035c9 	.word	0x080035c9
 80034b0:	08003547 	.word	0x08003547
 80034b4:	080035c9 	.word	0x080035c9
 80034b8:	080035c9 	.word	0x080035c9
 80034bc:	080035c9 	.word	0x080035c9
 80034c0:	08003587 	.word	0x08003587
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fa18 	bl	8003900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0204 	bic.w	r2, r2, #4
 80034ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6999      	ldr	r1, [r3, #24]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	619a      	str	r2, [r3, #24]
      break;
 8003502:	e064      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fa68 	bl	80039e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6999      	ldr	r1, [r3, #24]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	021a      	lsls	r2, r3, #8
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	619a      	str	r2, [r3, #24]
      break;
 8003544:	e043      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68b9      	ldr	r1, [r7, #8]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fabd 	bl	8003acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0208 	orr.w	r2, r2, #8
 8003560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0204 	bic.w	r2, r2, #4
 8003570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69d9      	ldr	r1, [r3, #28]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	61da      	str	r2, [r3, #28]
      break;
 8003584:	e023      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fb11 	bl	8003bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69d9      	ldr	r1, [r3, #28]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	021a      	lsls	r2, r3, #8
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	61da      	str	r2, [r3, #28]
      break;
 80035c6:	e002      	b.n	80035ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	75fb      	strb	r3, [r7, #23]
      break;
 80035cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_TIM_ConfigClockSource+0x1c>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e0b4      	b.n	8003766 <HAL_TIM_ConfigClockSource+0x186>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800361a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003634:	d03e      	beq.n	80036b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	f200 8087 	bhi.w	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003642:	f000 8086 	beq.w	8003752 <HAL_TIM_ConfigClockSource+0x172>
 8003646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364a:	d87f      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800364c:	2b70      	cmp	r3, #112	; 0x70
 800364e:	d01a      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0xa6>
 8003650:	2b70      	cmp	r3, #112	; 0x70
 8003652:	d87b      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003654:	2b60      	cmp	r3, #96	; 0x60
 8003656:	d050      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x11a>
 8003658:	2b60      	cmp	r3, #96	; 0x60
 800365a:	d877      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b50      	cmp	r3, #80	; 0x50
 800365e:	d03c      	beq.n	80036da <HAL_TIM_ConfigClockSource+0xfa>
 8003660:	2b50      	cmp	r3, #80	; 0x50
 8003662:	d873      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d058      	beq.n	800371a <HAL_TIM_ConfigClockSource+0x13a>
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d86f      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b30      	cmp	r3, #48	; 0x30
 800366e:	d064      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003670:	2b30      	cmp	r3, #48	; 0x30
 8003672:	d86b      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b20      	cmp	r3, #32
 8003676:	d060      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003678:	2b20      	cmp	r3, #32
 800367a:	d867      	bhi.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d05c      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003680:	2b10      	cmp	r3, #16
 8003682:	d05a      	beq.n	800373a <HAL_TIM_ConfigClockSource+0x15a>
 8003684:	e062      	b.n	800374c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6899      	ldr	r1, [r3, #8]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f000 fb5d 	bl	8003d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	609a      	str	r2, [r3, #8]
      break;
 80036b2:	e04f      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f000 fb46 	bl	8003d54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d6:	609a      	str	r2, [r3, #8]
      break;
 80036d8:	e03c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 faba 	bl	8003c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2150      	movs	r1, #80	; 0x50
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fb13 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 80036f8:	e02c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	461a      	mov	r2, r3
 8003708:	f000 fad9 	bl	8003cbe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2160      	movs	r1, #96	; 0x60
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fb03 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003718:	e01c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	461a      	mov	r2, r3
 8003728:	f000 fa9a 	bl	8003c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2140      	movs	r1, #64	; 0x40
 8003732:	4618      	mov	r0, r3
 8003734:	f000 faf3 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 8003738:	e00c      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f000 faea 	bl	8003d1e <TIM_ITRx_SetConfig>
      break;
 800374a:	e003      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
      break;
 8003750:	e000      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003752:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a40      	ldr	r2, [pc, #256]	; (80038d4 <TIM_Base_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037de:	d00f      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <TIM_Base_SetConfig+0x118>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00b      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <TIM_Base_SetConfig+0x11c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a3b      	ldr	r2, [pc, #236]	; (80038e0 <TIM_Base_SetConfig+0x120>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3a      	ldr	r2, [pc, #232]	; (80038e4 <TIM_Base_SetConfig+0x124>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d108      	bne.n	8003812 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a2f      	ldr	r2, [pc, #188]	; (80038d4 <TIM_Base_SetConfig+0x114>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02b      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d027      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2c      	ldr	r2, [pc, #176]	; (80038d8 <TIM_Base_SetConfig+0x118>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d023      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <TIM_Base_SetConfig+0x11c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01f      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2a      	ldr	r2, [pc, #168]	; (80038e0 <TIM_Base_SetConfig+0x120>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01b      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <TIM_Base_SetConfig+0x124>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d017      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a28      	ldr	r2, [pc, #160]	; (80038e8 <TIM_Base_SetConfig+0x128>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a27      	ldr	r2, [pc, #156]	; (80038ec <TIM_Base_SetConfig+0x12c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00f      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <TIM_Base_SetConfig+0x130>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00b      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a25      	ldr	r2, [pc, #148]	; (80038f4 <TIM_Base_SetConfig+0x134>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a24      	ldr	r2, [pc, #144]	; (80038f8 <TIM_Base_SetConfig+0x138>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0xb2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a23      	ldr	r2, [pc, #140]	; (80038fc <TIM_Base_SetConfig+0x13c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <TIM_Base_SetConfig+0x114>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0xf8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d103      	bne.n	80038c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	615a      	str	r2, [r3, #20]
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40010400 	.word	0x40010400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800
 80038f4:	40001800 	.word	0x40001800
 80038f8:	40001c00 	.word	0x40001c00
 80038fc:	40002000 	.word	0x40002000

08003900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f023 0201 	bic.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f023 0302 	bic.w	r3, r3, #2
 8003948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	4313      	orrs	r3, r2
 8003952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <TIM_OC1_SetConfig+0xd8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d003      	beq.n	8003964 <TIM_OC1_SetConfig+0x64>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <TIM_OC1_SetConfig+0xdc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d10c      	bne.n	800397e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0308 	bic.w	r3, r3, #8
 800396a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <TIM_OC1_SetConfig+0xd8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_OC1_SetConfig+0x8e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <TIM_OC1_SetConfig+0xdc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d111      	bne.n	80039b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	621a      	str	r2, [r3, #32]
}
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40010400 	.word	0x40010400

080039e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0210 	bic.w	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0320 	bic.w	r3, r3, #32
 8003a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <TIM_OC2_SetConfig+0xe4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_OC2_SetConfig+0x68>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <TIM_OC2_SetConfig+0xe8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10d      	bne.n	8003a64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <TIM_OC2_SetConfig+0xe4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_OC2_SetConfig+0x94>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <TIM_OC2_SetConfig+0xe8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d113      	bne.n	8003a9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40010400 	.word	0x40010400

08003acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0303 	bic.w	r3, r3, #3
 8003b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	021b      	lsls	r3, r3, #8
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a21      	ldr	r2, [pc, #132]	; (8003bac <TIM_OC3_SetConfig+0xe0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_OC3_SetConfig+0x66>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a20      	ldr	r2, [pc, #128]	; (8003bb0 <TIM_OC3_SetConfig+0xe4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10d      	bne.n	8003b4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a16      	ldr	r2, [pc, #88]	; (8003bac <TIM_OC3_SetConfig+0xe0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_OC3_SetConfig+0x92>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <TIM_OC3_SetConfig+0xe4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d113      	bne.n	8003b86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	621a      	str	r2, [r3, #32]
}
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	031b      	lsls	r3, r3, #12
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <TIM_OC4_SetConfig+0xa4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_OC4_SetConfig+0x68>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <TIM_OC4_SetConfig+0xa8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d109      	bne.n	8003c30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	019b      	lsls	r3, r3, #6
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40010400 	.word	0x40010400

08003c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 030a 	bic.w	r3, r3, #10
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b087      	sub	sp, #28
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f023 0210 	bic.w	r2, r3, #16
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cfa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f043 0307 	orr.w	r3, r3, #7
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	609a      	str	r2, [r3, #8]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e05a      	b.n	8003e62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d022      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df8:	d01d      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d018      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00e      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d009      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10c      	bne.n	8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40010000 	.word	0x40010000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40010400 	.word	0x40010400
 8003e84:	40014000 	.word	0x40014000
 8003e88:	40001800 	.word	0x40001800

08003e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e03d      	b.n	8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e03f      	b.n	8003fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fc ff22 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f829 	bl	8003ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff8:	b0c0      	sub	sp, #256	; 0x100
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	68d9      	ldr	r1, [r3, #12]
 8004012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	ea40 0301 	orr.w	r3, r0, r1
 800401c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	431a      	orrs	r2, r3
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	431a      	orrs	r2, r3
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800404c:	f021 010c 	bic.w	r1, r1, #12
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800405a:	430b      	orrs	r3, r1
 800405c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406e:	6999      	ldr	r1, [r3, #24]
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	ea40 0301 	orr.w	r3, r0, r1
 800407a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b8f      	ldr	r3, [pc, #572]	; (80042c0 <UART_SetConfig+0x2cc>)
 8004084:	429a      	cmp	r2, r3
 8004086:	d005      	beq.n	8004094 <UART_SetConfig+0xa0>
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b8d      	ldr	r3, [pc, #564]	; (80042c4 <UART_SetConfig+0x2d0>)
 8004090:	429a      	cmp	r2, r3
 8004092:	d104      	bne.n	800409e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fd fefa 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 8004098:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800409c:	e003      	b.n	80040a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800409e:	f7fd fee1 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80040a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b0:	f040 810c 	bne.w	80042cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b8:	2200      	movs	r2, #0
 80040ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040c6:	4622      	mov	r2, r4
 80040c8:	462b      	mov	r3, r5
 80040ca:	1891      	adds	r1, r2, r2
 80040cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ce:	415b      	adcs	r3, r3
 80040d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040d6:	4621      	mov	r1, r4
 80040d8:	eb12 0801 	adds.w	r8, r2, r1
 80040dc:	4629      	mov	r1, r5
 80040de:	eb43 0901 	adc.w	r9, r3, r1
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040f6:	4690      	mov	r8, r2
 80040f8:	4699      	mov	r9, r3
 80040fa:	4623      	mov	r3, r4
 80040fc:	eb18 0303 	adds.w	r3, r8, r3
 8004100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004104:	462b      	mov	r3, r5
 8004106:	eb49 0303 	adc.w	r3, r9, r3
 800410a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800410e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800411a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800411e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004122:	460b      	mov	r3, r1
 8004124:	18db      	adds	r3, r3, r3
 8004126:	653b      	str	r3, [r7, #80]	; 0x50
 8004128:	4613      	mov	r3, r2
 800412a:	eb42 0303 	adc.w	r3, r2, r3
 800412e:	657b      	str	r3, [r7, #84]	; 0x54
 8004130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004138:	f7fc f86a 	bl	8000210 <__aeabi_uldivmod>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <UART_SetConfig+0x2d4>)
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	011c      	lsls	r4, r3, #4
 800414a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800414e:	2200      	movs	r2, #0
 8004150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004154:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	1891      	adds	r1, r2, r2
 8004162:	64b9      	str	r1, [r7, #72]	; 0x48
 8004164:	415b      	adcs	r3, r3
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800416c:	4641      	mov	r1, r8
 800416e:	eb12 0a01 	adds.w	sl, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb43 0b01 	adc.w	fp, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418c:	4692      	mov	sl, r2
 800418e:	469b      	mov	fp, r3
 8004190:	4643      	mov	r3, r8
 8004192:	eb1a 0303 	adds.w	r3, sl, r3
 8004196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800419a:	464b      	mov	r3, r9
 800419c:	eb4b 0303 	adc.w	r3, fp, r3
 80041a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041b8:	460b      	mov	r3, r1
 80041ba:	18db      	adds	r3, r3, r3
 80041bc:	643b      	str	r3, [r7, #64]	; 0x40
 80041be:	4613      	mov	r3, r2
 80041c0:	eb42 0303 	adc.w	r3, r2, r3
 80041c4:	647b      	str	r3, [r7, #68]	; 0x44
 80041c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ce:	f7fc f81f 	bl	8000210 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <UART_SetConfig+0x2d4>)
 80041da:	fba3 2301 	umull	r2, r3, r3, r1
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2264      	movs	r2, #100	; 0x64
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	1acb      	subs	r3, r1, r3
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ee:	4b36      	ldr	r3, [pc, #216]	; (80042c8 <UART_SetConfig+0x2d4>)
 80041f0:	fba3 2302 	umull	r2, r3, r3, r2
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041fc:	441c      	add	r4, r3
 80041fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004202:	2200      	movs	r2, #0
 8004204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004208:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800420c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004210:	4642      	mov	r2, r8
 8004212:	464b      	mov	r3, r9
 8004214:	1891      	adds	r1, r2, r2
 8004216:	63b9      	str	r1, [r7, #56]	; 0x38
 8004218:	415b      	adcs	r3, r3
 800421a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800421c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004220:	4641      	mov	r1, r8
 8004222:	1851      	adds	r1, r2, r1
 8004224:	6339      	str	r1, [r7, #48]	; 0x30
 8004226:	4649      	mov	r1, r9
 8004228:	414b      	adcs	r3, r1
 800422a:	637b      	str	r3, [r7, #52]	; 0x34
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004238:	4659      	mov	r1, fp
 800423a:	00cb      	lsls	r3, r1, #3
 800423c:	4651      	mov	r1, sl
 800423e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004242:	4651      	mov	r1, sl
 8004244:	00ca      	lsls	r2, r1, #3
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	4603      	mov	r3, r0
 800424c:	4642      	mov	r2, r8
 800424e:	189b      	adds	r3, r3, r2
 8004250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004254:	464b      	mov	r3, r9
 8004256:	460a      	mov	r2, r1
 8004258:	eb42 0303 	adc.w	r3, r2, r3
 800425c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800426c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004274:	460b      	mov	r3, r1
 8004276:	18db      	adds	r3, r3, r3
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	4613      	mov	r3, r2
 800427c:	eb42 0303 	adc.w	r3, r2, r3
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004286:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800428a:	f7fb ffc1 	bl	8000210 <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <UART_SetConfig+0x2d4>)
 8004294:	fba3 1302 	umull	r1, r3, r3, r2
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	2164      	movs	r1, #100	; 0x64
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	3332      	adds	r3, #50	; 0x32
 80042a6:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <UART_SetConfig+0x2d4>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f003 0207 	and.w	r2, r3, #7
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4422      	add	r2, r4
 80042ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042bc:	e105      	b.n	80044ca <UART_SetConfig+0x4d6>
 80042be:	bf00      	nop
 80042c0:	40011000 	.word	0x40011000
 80042c4:	40011400 	.word	0x40011400
 80042c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042de:	4642      	mov	r2, r8
 80042e0:	464b      	mov	r3, r9
 80042e2:	1891      	adds	r1, r2, r2
 80042e4:	6239      	str	r1, [r7, #32]
 80042e6:	415b      	adcs	r3, r3
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ee:	4641      	mov	r1, r8
 80042f0:	1854      	adds	r4, r2, r1
 80042f2:	4649      	mov	r1, r9
 80042f4:	eb43 0501 	adc.w	r5, r3, r1
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	00eb      	lsls	r3, r5, #3
 8004302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004306:	00e2      	lsls	r2, r4, #3
 8004308:	4614      	mov	r4, r2
 800430a:	461d      	mov	r5, r3
 800430c:	4643      	mov	r3, r8
 800430e:	18e3      	adds	r3, r4, r3
 8004310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004314:	464b      	mov	r3, r9
 8004316:	eb45 0303 	adc.w	r3, r5, r3
 800431a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800432a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800433a:	4629      	mov	r1, r5
 800433c:	008b      	lsls	r3, r1, #2
 800433e:	4621      	mov	r1, r4
 8004340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004344:	4621      	mov	r1, r4
 8004346:	008a      	lsls	r2, r1, #2
 8004348:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800434c:	f7fb ff60 	bl	8000210 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4b60      	ldr	r3, [pc, #384]	; (80044d8 <UART_SetConfig+0x4e4>)
 8004356:	fba3 2302 	umull	r2, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	011c      	lsls	r4, r3, #4
 800435e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004368:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800436c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	1891      	adds	r1, r2, r2
 8004376:	61b9      	str	r1, [r7, #24]
 8004378:	415b      	adcs	r3, r3
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004380:	4641      	mov	r1, r8
 8004382:	1851      	adds	r1, r2, r1
 8004384:	6139      	str	r1, [r7, #16]
 8004386:	4649      	mov	r1, r9
 8004388:	414b      	adcs	r3, r1
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004398:	4659      	mov	r1, fp
 800439a:	00cb      	lsls	r3, r1, #3
 800439c:	4651      	mov	r1, sl
 800439e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043a2:	4651      	mov	r1, sl
 80043a4:	00ca      	lsls	r2, r1, #3
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	4603      	mov	r3, r0
 80043ac:	4642      	mov	r2, r8
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043b4:	464b      	mov	r3, r9
 80043b6:	460a      	mov	r2, r1
 80043b8:	eb42 0303 	adc.w	r3, r2, r3
 80043bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043d8:	4649      	mov	r1, r9
 80043da:	008b      	lsls	r3, r1, #2
 80043dc:	4641      	mov	r1, r8
 80043de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043e2:	4641      	mov	r1, r8
 80043e4:	008a      	lsls	r2, r1, #2
 80043e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043ea:	f7fb ff11 	bl	8000210 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4b39      	ldr	r3, [pc, #228]	; (80044d8 <UART_SetConfig+0x4e4>)
 80043f4:	fba3 1302 	umull	r1, r3, r3, r2
 80043f8:	095b      	lsrs	r3, r3, #5
 80043fa:	2164      	movs	r1, #100	; 0x64
 80043fc:	fb01 f303 	mul.w	r3, r1, r3
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	3332      	adds	r3, #50	; 0x32
 8004406:	4a34      	ldr	r2, [pc, #208]	; (80044d8 <UART_SetConfig+0x4e4>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004412:	441c      	add	r4, r3
 8004414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004418:	2200      	movs	r2, #0
 800441a:	673b      	str	r3, [r7, #112]	; 0x70
 800441c:	677a      	str	r2, [r7, #116]	; 0x74
 800441e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004422:	4642      	mov	r2, r8
 8004424:	464b      	mov	r3, r9
 8004426:	1891      	adds	r1, r2, r2
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	415b      	adcs	r3, r3
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004432:	4641      	mov	r1, r8
 8004434:	1851      	adds	r1, r2, r1
 8004436:	6039      	str	r1, [r7, #0]
 8004438:	4649      	mov	r1, r9
 800443a:	414b      	adcs	r3, r1
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800444a:	4659      	mov	r1, fp
 800444c:	00cb      	lsls	r3, r1, #3
 800444e:	4651      	mov	r1, sl
 8004450:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004454:	4651      	mov	r1, sl
 8004456:	00ca      	lsls	r2, r1, #3
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	4603      	mov	r3, r0
 800445e:	4642      	mov	r2, r8
 8004460:	189b      	adds	r3, r3, r2
 8004462:	66bb      	str	r3, [r7, #104]	; 0x68
 8004464:	464b      	mov	r3, r9
 8004466:	460a      	mov	r2, r1
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	663b      	str	r3, [r7, #96]	; 0x60
 8004478:	667a      	str	r2, [r7, #100]	; 0x64
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004486:	4649      	mov	r1, r9
 8004488:	008b      	lsls	r3, r1, #2
 800448a:	4641      	mov	r1, r8
 800448c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004490:	4641      	mov	r1, r8
 8004492:	008a      	lsls	r2, r1, #2
 8004494:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004498:	f7fb feba 	bl	8000210 <__aeabi_uldivmod>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <UART_SetConfig+0x4e4>)
 80044a2:	fba3 1302 	umull	r1, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2164      	movs	r1, #100	; 0x64
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	3332      	adds	r3, #50	; 0x32
 80044b4:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <UART_SetConfig+0x4e4>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f003 020f 	and.w	r2, r3, #15
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4422      	add	r2, r4
 80044c8:	609a      	str	r2, [r3, #8]
}
 80044ca:	bf00      	nop
 80044cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	51eb851f 	.word	0x51eb851f

080044dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044dc:	b084      	sub	sp, #16
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	f107 001c 	add.w	r0, r7, #28
 80044ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d122      	bne.n	800453a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800451c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fa9c 	bl	8004a6c <USB_CoreReset>
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e01a      	b.n	8004570 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa90 	bl	8004a6c <USB_CoreReset>
 800454c:	4603      	mov	r3, r0
 800454e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
 8004562:	e005      	b.n	8004570 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004568:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	2b01      	cmp	r3, #1
 8004574:	d10b      	bne.n	800458e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f043 0206 	orr.w	r2, r3, #6
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800459a:	b004      	add	sp, #16
 800459c:	4770      	bx	lr

0800459e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	460b      	mov	r3, r1
 80045ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d115      	bne.n	800460e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045ee:	2001      	movs	r0, #1
 80045f0:	f7fc fe06 	bl	8001200 <HAL_Delay>
      ms++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa28 	bl	8004a50 <USB_GetMode>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d01e      	beq.n	8004644 <USB_SetCurrentMode+0x84>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b31      	cmp	r3, #49	; 0x31
 800460a:	d9f0      	bls.n	80045ee <USB_SetCurrentMode+0x2e>
 800460c:	e01a      	b.n	8004644 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d115      	bne.n	8004640 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004620:	2001      	movs	r0, #1
 8004622:	f7fc fded 	bl	8001200 <HAL_Delay>
      ms++;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3301      	adds	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa0f 	bl	8004a50 <USB_GetMode>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <USB_SetCurrentMode+0x84>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b31      	cmp	r3, #49	; 0x31
 800463c:	d9f0      	bls.n	8004620 <USB_SetCurrentMode+0x60>
 800463e:	e001      	b.n	8004644 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e005      	b.n	8004650 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b32      	cmp	r3, #50	; 0x32
 8004648:	d101      	bne.n	800464e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004658:	b084      	sub	sp, #16
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	e009      	b.n	800468c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	3340      	adds	r3, #64	; 0x40
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	2200      	movs	r2, #0
 8004684:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3301      	adds	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b0e      	cmp	r3, #14
 8004690:	d9f2      	bls.n	8004678 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11c      	bne.n	80046d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046a6:	f043 0302 	orr.w	r3, r3, #2
 80046aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e005      	b.n	80046de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046e4:	461a      	mov	r2, r3
 80046e6:	2300      	movs	r3, #0
 80046e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f0:	4619      	mov	r1, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	461a      	mov	r2, r3
 80046fa:	680b      	ldr	r3, [r1, #0]
 80046fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10c      	bne.n	800471e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800470a:	2100      	movs	r1, #0
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f965 	bl	80049dc <USB_SetDevSpeed>
 8004712:	e008      	b.n	8004726 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004714:	2101      	movs	r1, #1
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f960 	bl	80049dc <USB_SetDevSpeed>
 800471c:	e003      	b.n	8004726 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800471e:	2103      	movs	r1, #3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f95b 	bl	80049dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004726:	2110      	movs	r1, #16
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8f3 	bl	8004914 <USB_FlushTxFifo>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f91f 	bl	800497c <USB_FlushRxFifo>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	461a      	mov	r2, r3
 8004750:	2300      	movs	r3, #0
 8004752:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	e043      	b.n	80047fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004788:	d118      	bne.n	80047bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	461a      	mov	r2, r3
 800479e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	e013      	b.n	80047ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	461a      	mov	r2, r3
 80047b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e008      	b.n	80047ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c8:	461a      	mov	r2, r3
 80047ca:	2300      	movs	r3, #0
 80047cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047da:	461a      	mov	r2, r3
 80047dc:	2300      	movs	r3, #0
 80047de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ec:	461a      	mov	r2, r3
 80047ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	3301      	adds	r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3b7      	bcc.n	8004772 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	e043      	b.n	8004890 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800481a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481e:	d118      	bne.n	8004852 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e013      	b.n	8004864 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004848:	461a      	mov	r2, r3
 800484a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e008      	b.n	8004864 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	461a      	mov	r2, r3
 8004860:	2300      	movs	r3, #0
 8004862:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004870:	461a      	mov	r2, r3
 8004872:	2300      	movs	r3, #0
 8004874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	461a      	mov	r2, r3
 8004884:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004888:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3301      	adds	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	d3b7      	bcc.n	8004808 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f043 0210 	orr.w	r2, r3, #16
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <USB_DevInit+0x2b8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f043 0208 	orr.w	r2, r3, #8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004900:	7dfb      	ldrb	r3, [r7, #23]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800490c:	b004      	add	sp, #16
 800490e:	4770      	bx	lr
 8004910:	803c3800 	.word	0x803c3800

08004914 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3301      	adds	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a13      	ldr	r2, [pc, #76]	; (8004978 <USB_FlushTxFifo+0x64>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d901      	bls.n	8004934 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e01b      	b.n	800496c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	daf2      	bge.n	8004922 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	019b      	lsls	r3, r3, #6
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <USB_FlushTxFifo+0x64>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e006      	b.n	800496c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d0f0      	beq.n	800494c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <USB_FlushRxFifo+0x5c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e018      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	daf2      	bge.n	8004988 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2210      	movs	r2, #16
 80049aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <USB_FlushRxFifo+0x5c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e006      	b.n	80049cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d0f0      	beq.n	80049ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	00030d40 	.word	0x00030d40

080049dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	460b      	mov	r3, r1
 80049e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049fc:	4313      	orrs	r3, r2
 80049fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <USB_CoreReset+0x64>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e01b      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	daf2      	bge.n	8004a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a09      	ldr	r2, [pc, #36]	; (8004ad0 <USB_CoreReset+0x64>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e006      	b.n	8004ac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d0f0      	beq.n	8004aa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	00030d40 	.word	0x00030d40

08004ad4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ae6:	2b84      	cmp	r3, #132	; 0x84
 8004ae8:	d005      	beq.n	8004af6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004aea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	3303      	adds	r3, #3
 8004af4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004af6:	68fb      	ldr	r3, [r7, #12]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b08:	f000 faf6 	bl	80050f8 <vTaskStartScheduler>
  
  return osOK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b14:	b089      	sub	sp, #36	; 0x24
 8004b16:	af04      	add	r7, sp, #16
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <osThreadCreate+0x54>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01c      	beq.n	8004b66 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685c      	ldr	r4, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681d      	ldr	r5, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691e      	ldr	r6, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ffc8 	bl	8004ad4 <makeFreeRtosPriority>
 8004b44:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b4e:	9202      	str	r2, [sp, #8]
 8004b50:	9301      	str	r3, [sp, #4]
 8004b52:	9100      	str	r1, [sp, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4632      	mov	r2, r6
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 f8ed 	bl	8004d3a <xTaskCreateStatic>
 8004b60:	4603      	mov	r3, r0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e01c      	b.n	8004ba0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685c      	ldr	r4, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b72:	b29e      	uxth	r6, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ffaa 	bl	8004ad4 <makeFreeRtosPriority>
 8004b80:	4602      	mov	r2, r0
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	9200      	str	r2, [sp, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 f92f 	bl	8004df4 <xTaskCreate>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d001      	beq.n	8004ba0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004baa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <osDelay+0x16>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	e000      	b.n	8004bc2 <osDelay+0x18>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fa64 	bl	8005090 <vTaskDelay>
  
  return osOK;
 8004bc8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f103 0208 	add.w	r2, r3, #8
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bea:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f103 0208 	add.w	r2, r3, #8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f103 0208 	add.w	r2, r3, #8
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d103      	bne.n	8004c94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	e00c      	b.n	8004cae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3308      	adds	r3, #8
 8004c98:	60fb      	str	r3, [r7, #12]
 8004c9a:	e002      	b.n	8004ca2 <vListInsert+0x2e>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d2f6      	bcs.n	8004c9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6892      	ldr	r2, [r2, #8]
 8004cfc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6852      	ldr	r2, [r2, #4]
 8004d06:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d103      	bne.n	8004d1a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b08e      	sub	sp, #56	; 0x38
 8004d3e:	af04      	add	r7, sp, #16
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10a      	bne.n	8004d64 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <xTaskCreateStatic+0x46>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	61fb      	str	r3, [r7, #28]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d80:	23b4      	movs	r3, #180	; 0xb4
 8004d82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2bb4      	cmp	r3, #180	; 0xb4
 8004d88:	d00a      	beq.n	8004da0 <xTaskCreateStatic+0x66>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	61bb      	str	r3, [r7, #24]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004da0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01e      	beq.n	8004de6 <xTaskCreateStatic+0xac>
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01b      	beq.n	8004de6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	9302      	str	r3, [sp, #8]
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f851 	bl	8004e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004de0:	f000 f8ec 	bl	8004fbc <prvAddNewTaskToReadyList>
 8004de4:	e001      	b.n	8004dea <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dea:	697b      	ldr	r3, [r7, #20]
	}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3728      	adds	r7, #40	; 0x28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08c      	sub	sp, #48	; 0x30
 8004df8:	af04      	add	r7, sp, #16
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fef5 	bl	8005bf8 <pvPortMalloc>
 8004e0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00e      	beq.n	8004e34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e16:	20b4      	movs	r0, #180	; 0xb4
 8004e18:	f000 feee 	bl	8005bf8 <pvPortMalloc>
 8004e1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
 8004e2a:	e005      	b.n	8004e38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f000 ffaf 	bl	8005d90 <vPortFree>
 8004e32:	e001      	b.n	8004e38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d017      	beq.n	8004e6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f80f 	bl	8004e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e62:	69f8      	ldr	r0, [r7, #28]
 8004e64:	f000 f8aa 	bl	8004fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e002      	b.n	8004e74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e74:	69bb      	ldr	r3, [r7, #24]
	}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	617b      	str	r3, [r7, #20]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01f      	beq.n	8004f0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e012      	b.n	8004efa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	7819      	ldrb	r1, [r3, #0]
 8004edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	3334      	adds	r3, #52	; 0x34
 8004ee4:	460a      	mov	r2, r1
 8004ee6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d006      	beq.n	8004f02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	d9e9      	bls.n	8004ed4 <prvInitialiseNewTask+0x54>
 8004f00:	e000      	b.n	8004f04 <prvInitialiseNewTask+0x84>
			{
				break;
 8004f02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f0c:	e003      	b.n	8004f16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d901      	bls.n	8004f20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f1c:	2306      	movs	r3, #6
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	2200      	movs	r2, #0
 8004f30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	3304      	adds	r3, #4
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fe6b 	bl	8004c12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	3318      	adds	r3, #24
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fe66 	bl	8004c12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	f1c3 0207 	rsb	r2, r3, #7
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	334c      	adds	r3, #76	; 0x4c
 8004f70:	2260      	movs	r2, #96	; 0x60
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f84f 	bl	8006018 <memset>
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <prvInitialiseNewTask+0x130>)
 8004f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <prvInitialiseNewTask+0x134>)
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	4a0b      	ldr	r2, [pc, #44]	; (8004fb8 <prvInitialiseNewTask+0x138>)
 8004f8a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	69b8      	ldr	r0, [r7, #24]
 8004f92:	f000 fc1f 	bl	80057d4 <pxPortInitialiseStack>
 8004f96:	4602      	mov	r2, r0
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fa8:	bf00      	nop
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	0800622c 	.word	0x0800622c
 8004fb4:	0800624c 	.word	0x0800624c
 8004fb8:	0800620c 	.word	0x0800620c

08004fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fc4:	f000 fd36 	bl	8005a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	4a29      	ldr	r2, [pc, #164]	; (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fd2:	4b29      	ldr	r3, [pc, #164]	; (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fda:	4a27      	ldr	r2, [pc, #156]	; (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fe0:	4b24      	ldr	r3, [pc, #144]	; (8005074 <prvAddNewTaskToReadyList+0xb8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d110      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fe8:	f000 facc 	bl	8005584 <prvInitialiseTaskLists>
 8004fec:	e00d      	b.n	800500a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fee:	4b23      	ldr	r3, [pc, #140]	; (800507c <prvAddNewTaskToReadyList+0xc0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d802      	bhi.n	800500a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005004:	4a1c      	ldr	r2, [pc, #112]	; (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800500a:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <prvAddNewTaskToReadyList+0xc4>)
 8005012:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	2201      	movs	r2, #1
 800501a:	409a      	lsls	r2, r3
 800501c:	4b19      	ldr	r3, [pc, #100]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <prvAddNewTaskToReadyList+0xc8>)
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4a15      	ldr	r2, [pc, #84]	; (8005088 <prvAddNewTaskToReadyList+0xcc>)
 8005034:	441a      	add	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7ff fdf5 	bl	8004c2c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005042:	f000 fd27 	bl	8005a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005046:	4b0d      	ldr	r3, [pc, #52]	; (800507c <prvAddNewTaskToReadyList+0xc0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00e      	beq.n	800506c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <prvAddNewTaskToReadyList+0xbc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	429a      	cmp	r2, r3
 800505a:	d207      	bcs.n	800506c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800505c:	4b0b      	ldr	r3, [pc, #44]	; (800508c <prvAddNewTaskToReadyList+0xd0>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	20000b1c 	.word	0x20000b1c
 8005078:	20000a1c 	.word	0x20000a1c
 800507c:	20000b28 	.word	0x20000b28
 8005080:	20000b38 	.word	0x20000b38
 8005084:	20000b24 	.word	0x20000b24
 8005088:	20000a20 	.word	0x20000a20
 800508c:	e000ed04 	.word	0xe000ed04

08005090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d017      	beq.n	80050d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <vTaskDelay+0x60>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <vTaskDelay+0x30>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60bb      	str	r3, [r7, #8]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050c0:	f000 f884 	bl	80051cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050c4:	2100      	movs	r1, #0
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fb1e 	bl	8005708 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050cc:	f000 f88c 	bl	80051e8 <xTaskResumeAll>
 80050d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d107      	bne.n	80050e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <vTaskDelay+0x64>)
 80050da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	20000b44 	.word	0x20000b44
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005102:	2300      	movs	r3, #0
 8005104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005106:	463a      	mov	r2, r7
 8005108:	1d39      	adds	r1, r7, #4
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	4618      	mov	r0, r3
 8005110:	f7fb fa00 	bl	8000514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	9202      	str	r2, [sp, #8]
 800511c:	9301      	str	r3, [sp, #4]
 800511e:	2300      	movs	r3, #0
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	2300      	movs	r3, #0
 8005124:	460a      	mov	r2, r1
 8005126:	4921      	ldr	r1, [pc, #132]	; (80051ac <vTaskStartScheduler+0xb4>)
 8005128:	4821      	ldr	r0, [pc, #132]	; (80051b0 <vTaskStartScheduler+0xb8>)
 800512a:	f7ff fe06 	bl	8004d3a <xTaskCreateStatic>
 800512e:	4603      	mov	r3, r0
 8005130:	4a20      	ldr	r2, [pc, #128]	; (80051b4 <vTaskStartScheduler+0xbc>)
 8005132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <vTaskStartScheduler+0xbc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800513c:	2301      	movs	r3, #1
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e001      	b.n	8005146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d11b      	bne.n	8005184 <vTaskStartScheduler+0x8c>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	613b      	str	r3, [r7, #16]
}
 800515e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005160:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <vTaskStartScheduler+0xc0>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	334c      	adds	r3, #76	; 0x4c
 8005166:	4a15      	ldr	r2, [pc, #84]	; (80051bc <vTaskStartScheduler+0xc4>)
 8005168:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <vTaskStartScheduler+0xc8>)
 800516c:	f04f 32ff 	mov.w	r2, #4294967295
 8005170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <vTaskStartScheduler+0xcc>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005178:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <vTaskStartScheduler+0xd0>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800517e:	f000 fbb7 	bl	80058f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005182:	e00e      	b.n	80051a2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518a:	d10a      	bne.n	80051a2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60fb      	str	r3, [r7, #12]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <vTaskStartScheduler+0xa8>
}
 80051a2:	bf00      	nop
 80051a4:	3718      	adds	r7, #24
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	080061ec 	.word	0x080061ec
 80051b0:	08005555 	.word	0x08005555
 80051b4:	20000b40 	.word	0x20000b40
 80051b8:	20000a1c 	.word	0x20000a1c
 80051bc:	20000010 	.word	0x20000010
 80051c0:	20000b3c 	.word	0x20000b3c
 80051c4:	20000b28 	.word	0x20000b28
 80051c8:	20000b20 	.word	0x20000b20

080051cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051d0:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <vTaskSuspendAll+0x18>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <vTaskSuspendAll+0x18>)
 80051d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	20000b44 	.word	0x20000b44

080051e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051f6:	4b41      	ldr	r3, [pc, #260]	; (80052fc <xTaskResumeAll+0x114>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <xTaskResumeAll+0x2c>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	603b      	str	r3, [r7, #0]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005214:	f000 fc0e 	bl	8005a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005218:	4b38      	ldr	r3, [pc, #224]	; (80052fc <xTaskResumeAll+0x114>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	4a37      	ldr	r2, [pc, #220]	; (80052fc <xTaskResumeAll+0x114>)
 8005220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <xTaskResumeAll+0x114>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d161      	bne.n	80052ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800522a:	4b35      	ldr	r3, [pc, #212]	; (8005300 <xTaskResumeAll+0x118>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d05d      	beq.n	80052ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005232:	e02e      	b.n	8005292 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005234:	4b33      	ldr	r3, [pc, #204]	; (8005304 <xTaskResumeAll+0x11c>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3318      	adds	r3, #24
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fd50 	bl	8004ce6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3304      	adds	r3, #4
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fd4b 	bl	8004ce6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	2201      	movs	r2, #1
 8005256:	409a      	lsls	r2, r3
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <xTaskResumeAll+0x120>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <xTaskResumeAll+0x120>)
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4a27      	ldr	r2, [pc, #156]	; (800530c <xTaskResumeAll+0x124>)
 8005270:	441a      	add	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3304      	adds	r3, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7ff fcd7 	bl	8004c2c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005282:	4b23      	ldr	r3, [pc, #140]	; (8005310 <xTaskResumeAll+0x128>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	429a      	cmp	r2, r3
 800528a:	d302      	bcc.n	8005292 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <xTaskResumeAll+0x12c>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <xTaskResumeAll+0x11c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1cc      	bne.n	8005234 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052a0:	f000 fa12 	bl	80056c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <xTaskResumeAll+0x130>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d010      	beq.n	80052d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052b0:	f000 f836 	bl	8005320 <xTaskIncrementTick>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80052ba:	4b16      	ldr	r3, [pc, #88]	; (8005314 <xTaskResumeAll+0x12c>)
 80052bc:	2201      	movs	r2, #1
 80052be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1f1      	bne.n	80052b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <xTaskResumeAll+0x130>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052d2:	4b10      	ldr	r3, [pc, #64]	; (8005314 <xTaskResumeAll+0x12c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d009      	beq.n	80052ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052da:	2301      	movs	r3, #1
 80052dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <xTaskResumeAll+0x134>)
 80052e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ee:	f000 fbd1 	bl	8005a94 <vPortExitCritical>

	return xAlreadyYielded;
 80052f2:	68bb      	ldr	r3, [r7, #8]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000b44 	.word	0x20000b44
 8005300:	20000b1c 	.word	0x20000b1c
 8005304:	20000adc 	.word	0x20000adc
 8005308:	20000b24 	.word	0x20000b24
 800530c:	20000a20 	.word	0x20000a20
 8005310:	20000a1c 	.word	0x20000a1c
 8005314:	20000b30 	.word	0x20000b30
 8005318:	20000b2c 	.word	0x20000b2c
 800531c:	e000ed04 	.word	0xe000ed04

08005320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005326:	2300      	movs	r3, #0
 8005328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800532a:	4b4e      	ldr	r3, [pc, #312]	; (8005464 <xTaskIncrementTick+0x144>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 808e 	bne.w	8005450 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <xTaskIncrementTick+0x148>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800533c:	4a4a      	ldr	r2, [pc, #296]	; (8005468 <xTaskIncrementTick+0x148>)
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d120      	bne.n	800538a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005348:	4b48      	ldr	r3, [pc, #288]	; (800546c <xTaskIncrementTick+0x14c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <xTaskIncrementTick+0x48>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	603b      	str	r3, [r7, #0]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <xTaskIncrementTick+0x46>
 8005368:	4b40      	ldr	r3, [pc, #256]	; (800546c <xTaskIncrementTick+0x14c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	4b40      	ldr	r3, [pc, #256]	; (8005470 <xTaskIncrementTick+0x150>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3e      	ldr	r2, [pc, #248]	; (800546c <xTaskIncrementTick+0x14c>)
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	4a3e      	ldr	r2, [pc, #248]	; (8005470 <xTaskIncrementTick+0x150>)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <xTaskIncrementTick+0x154>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a3c      	ldr	r2, [pc, #240]	; (8005474 <xTaskIncrementTick+0x154>)
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	f000 f99f 	bl	80056c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800538a:	4b3b      	ldr	r3, [pc, #236]	; (8005478 <xTaskIncrementTick+0x158>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	429a      	cmp	r2, r3
 8005392:	d348      	bcc.n	8005426 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005394:	4b35      	ldr	r3, [pc, #212]	; (800546c <xTaskIncrementTick+0x14c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539e:	4b36      	ldr	r3, [pc, #216]	; (8005478 <xTaskIncrementTick+0x158>)
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	601a      	str	r2, [r3, #0]
					break;
 80053a6:	e03e      	b.n	8005426 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a8:	4b30      	ldr	r3, [pc, #192]	; (800546c <xTaskIncrementTick+0x14c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d203      	bcs.n	80053c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053c0:	4a2d      	ldr	r2, [pc, #180]	; (8005478 <xTaskIncrementTick+0x158>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053c6:	e02e      	b.n	8005426 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fc8a 	bl	8004ce6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3318      	adds	r3, #24
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fc81 	bl	8004ce6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	2201      	movs	r2, #1
 80053ea:	409a      	lsls	r2, r3
 80053ec:	4b23      	ldr	r3, [pc, #140]	; (800547c <xTaskIncrementTick+0x15c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	4a22      	ldr	r2, [pc, #136]	; (800547c <xTaskIncrementTick+0x15c>)
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4a1f      	ldr	r2, [pc, #124]	; (8005480 <xTaskIncrementTick+0x160>)
 8005404:	441a      	add	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3304      	adds	r3, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4610      	mov	r0, r2
 800540e:	f7ff fc0d 	bl	8004c2c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <xTaskIncrementTick+0x164>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	429a      	cmp	r2, r3
 800541e:	d3b9      	bcc.n	8005394 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005420:	2301      	movs	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005424:	e7b6      	b.n	8005394 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <xTaskIncrementTick+0x164>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800542c:	4914      	ldr	r1, [pc, #80]	; (8005480 <xTaskIncrementTick+0x160>)
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d901      	bls.n	8005442 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800543e:	2301      	movs	r3, #1
 8005440:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <xTaskIncrementTick+0x168>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800544a:	2301      	movs	r3, #1
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e004      	b.n	800545a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <xTaskIncrementTick+0x16c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3301      	adds	r3, #1
 8005456:	4a0d      	ldr	r2, [pc, #52]	; (800548c <xTaskIncrementTick+0x16c>)
 8005458:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800545a:	697b      	ldr	r3, [r7, #20]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000b44 	.word	0x20000b44
 8005468:	20000b20 	.word	0x20000b20
 800546c:	20000ad4 	.word	0x20000ad4
 8005470:	20000ad8 	.word	0x20000ad8
 8005474:	20000b34 	.word	0x20000b34
 8005478:	20000b3c 	.word	0x20000b3c
 800547c:	20000b24 	.word	0x20000b24
 8005480:	20000a20 	.word	0x20000a20
 8005484:	20000a1c 	.word	0x20000a1c
 8005488:	20000b30 	.word	0x20000b30
 800548c:	20000b2c 	.word	0x20000b2c

08005490 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005496:	4b29      	ldr	r3, [pc, #164]	; (800553c <vTaskSwitchContext+0xac>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800549e:	4b28      	ldr	r3, [pc, #160]	; (8005540 <vTaskSwitchContext+0xb0>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054a4:	e044      	b.n	8005530 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80054a6:	4b26      	ldr	r3, [pc, #152]	; (8005540 <vTaskSwitchContext+0xb0>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ac:	4b25      	ldr	r3, [pc, #148]	; (8005544 <vTaskSwitchContext+0xb4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	fab3 f383 	clz	r3, r3
 80054b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80054ba:	7afb      	ldrb	r3, [r7, #11]
 80054bc:	f1c3 031f 	rsb	r3, r3, #31
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	4921      	ldr	r1, [pc, #132]	; (8005548 <vTaskSwitchContext+0xb8>)
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	607b      	str	r3, [r7, #4]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <vTaskSwitchContext+0x5a>
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <vTaskSwitchContext+0xb8>)
 80054f8:	4413      	add	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3308      	adds	r3, #8
 800550e:	429a      	cmp	r2, r3
 8005510:	d104      	bne.n	800551c <vTaskSwitchContext+0x8c>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	605a      	str	r2, [r3, #4]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <vTaskSwitchContext+0xbc>)
 8005524:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005526:	4b09      	ldr	r3, [pc, #36]	; (800554c <vTaskSwitchContext+0xbc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	334c      	adds	r3, #76	; 0x4c
 800552c:	4a08      	ldr	r2, [pc, #32]	; (8005550 <vTaskSwitchContext+0xc0>)
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	20000b44 	.word	0x20000b44
 8005540:	20000b30 	.word	0x20000b30
 8005544:	20000b24 	.word	0x20000b24
 8005548:	20000a20 	.word	0x20000a20
 800554c:	20000a1c 	.word	0x20000a1c
 8005550:	20000010 	.word	0x20000010

08005554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800555c:	f000 f852 	bl	8005604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005560:	4b06      	ldr	r3, [pc, #24]	; (800557c <prvIdleTask+0x28>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d9f9      	bls.n	800555c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <prvIdleTask+0x2c>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005578:	e7f0      	b.n	800555c <prvIdleTask+0x8>
 800557a:	bf00      	nop
 800557c:	20000a20 	.word	0x20000a20
 8005580:	e000ed04 	.word	0xe000ed04

08005584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	e00c      	b.n	80055aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4a12      	ldr	r2, [pc, #72]	; (80055e4 <prvInitialiseTaskLists+0x60>)
 800559c:	4413      	add	r3, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff fb17 	bl	8004bd2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3301      	adds	r3, #1
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b06      	cmp	r3, #6
 80055ae:	d9ef      	bls.n	8005590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055b0:	480d      	ldr	r0, [pc, #52]	; (80055e8 <prvInitialiseTaskLists+0x64>)
 80055b2:	f7ff fb0e 	bl	8004bd2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055b6:	480d      	ldr	r0, [pc, #52]	; (80055ec <prvInitialiseTaskLists+0x68>)
 80055b8:	f7ff fb0b 	bl	8004bd2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055bc:	480c      	ldr	r0, [pc, #48]	; (80055f0 <prvInitialiseTaskLists+0x6c>)
 80055be:	f7ff fb08 	bl	8004bd2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055c2:	480c      	ldr	r0, [pc, #48]	; (80055f4 <prvInitialiseTaskLists+0x70>)
 80055c4:	f7ff fb05 	bl	8004bd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055c8:	480b      	ldr	r0, [pc, #44]	; (80055f8 <prvInitialiseTaskLists+0x74>)
 80055ca:	f7ff fb02 	bl	8004bd2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <prvInitialiseTaskLists+0x78>)
 80055d0:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <prvInitialiseTaskLists+0x64>)
 80055d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <prvInitialiseTaskLists+0x7c>)
 80055d6:	4a05      	ldr	r2, [pc, #20]	; (80055ec <prvInitialiseTaskLists+0x68>)
 80055d8:	601a      	str	r2, [r3, #0]
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000a20 	.word	0x20000a20
 80055e8:	20000aac 	.word	0x20000aac
 80055ec:	20000ac0 	.word	0x20000ac0
 80055f0:	20000adc 	.word	0x20000adc
 80055f4:	20000af0 	.word	0x20000af0
 80055f8:	20000b08 	.word	0x20000b08
 80055fc:	20000ad4 	.word	0x20000ad4
 8005600:	20000ad8 	.word	0x20000ad8

08005604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800560a:	e019      	b.n	8005640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800560c:	f000 fa12 	bl	8005a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005610:	4b10      	ldr	r3, [pc, #64]	; (8005654 <prvCheckTasksWaitingTermination+0x50>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fb62 	bl	8004ce6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005622:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <prvCheckTasksWaitingTermination+0x54>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3b01      	subs	r3, #1
 8005628:	4a0b      	ldr	r2, [pc, #44]	; (8005658 <prvCheckTasksWaitingTermination+0x54>)
 800562a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <prvCheckTasksWaitingTermination+0x58>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3b01      	subs	r3, #1
 8005632:	4a0a      	ldr	r2, [pc, #40]	; (800565c <prvCheckTasksWaitingTermination+0x58>)
 8005634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005636:	f000 fa2d 	bl	8005a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f810 	bl	8005660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <prvCheckTasksWaitingTermination+0x58>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e1      	bne.n	800560c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000af0 	.word	0x20000af0
 8005658:	20000b1c 	.word	0x20000b1c
 800565c:	20000b04 	.word	0x20000b04

08005660 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	334c      	adds	r3, #76	; 0x4c
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fd35 	bl	80060dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d108      	bne.n	800568e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fb85 	bl	8005d90 <vPortFree>
				vPortFree( pxTCB );
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fb82 	bl	8005d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800568c:	e018      	b.n	80056c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d103      	bne.n	80056a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fb79 	bl	8005d90 <vPortFree>
	}
 800569e:	e00f      	b.n	80056c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d00a      	beq.n	80056c0 <prvDeleteTCB+0x60>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	60fb      	str	r3, [r7, #12]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <prvDeleteTCB+0x5e>
	}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <prvResetNextTaskUnblockTime+0x38>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <prvResetNextTaskUnblockTime+0x3c>)
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056e0:	e008      	b.n	80056f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e2:	4b07      	ldr	r3, [pc, #28]	; (8005700 <prvResetNextTaskUnblockTime+0x38>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a04      	ldr	r2, [pc, #16]	; (8005704 <prvResetNextTaskUnblockTime+0x3c>)
 80056f2:	6013      	str	r3, [r2, #0]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	20000ad4 	.word	0x20000ad4
 8005704:	20000b3c 	.word	0x20000b3c

08005708 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005712:	4b29      	ldr	r3, [pc, #164]	; (80057b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005718:	4b28      	ldr	r3, [pc, #160]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3304      	adds	r3, #4
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fae1 	bl	8004ce6 <uxListRemove>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	2201      	movs	r2, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43da      	mvns	r2, r3
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4013      	ands	r3, r2
 800573e:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005740:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005748:	d10a      	bne.n	8005760 <prvAddCurrentTaskToDelayedList+0x58>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	481a      	ldr	r0, [pc, #104]	; (80057c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800575a:	f7ff fa67 	bl	8004c2c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800575e:	e026      	b.n	80057ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	429a      	cmp	r2, r3
 8005776:	d209      	bcs.n	800578c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005778:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f7ff fa75 	bl	8004c74 <vListInsert>
}
 800578a:	e010      	b.n	80057ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3304      	adds	r3, #4
 8005796:	4619      	mov	r1, r3
 8005798:	4610      	mov	r0, r2
 800579a:	f7ff fa6b 	bl	8004c74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d202      	bcs.n	80057ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6013      	str	r3, [r2, #0]
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000b20 	.word	0x20000b20
 80057bc:	20000a1c 	.word	0x20000a1c
 80057c0:	20000b24 	.word	0x20000b24
 80057c4:	20000b08 	.word	0x20000b08
 80057c8:	20000ad8 	.word	0x20000ad8
 80057cc:	20000ad4 	.word	0x20000ad4
 80057d0:	20000b3c 	.word	0x20000b3c

080057d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3b04      	subs	r3, #4
 80057e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3b04      	subs	r3, #4
 80057f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b04      	subs	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005804:	4a0c      	ldr	r2, [pc, #48]	; (8005838 <pxPortInitialiseStack+0x64>)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3b14      	subs	r3, #20
 800580e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3b04      	subs	r3, #4
 800581a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f06f 0202 	mvn.w	r2, #2
 8005822:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3b20      	subs	r3, #32
 8005828:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800582a:	68fb      	ldr	r3, [r7, #12]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	0800583d 	.word	0x0800583d

0800583c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <prvTaskExitError+0x54>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d00a      	beq.n	8005866 <prvTaskExitError+0x2a>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	60fb      	str	r3, [r7, #12]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <prvTaskExitError+0x28>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60bb      	str	r3, [r7, #8]
}
 8005878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800587a:	bf00      	nop
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0fc      	beq.n	800587c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	2000000c 	.word	0x2000000c
	...

080058a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <pxCurrentTCBConst2>)
 80058a2:	6819      	ldr	r1, [r3, #0]
 80058a4:	6808      	ldr	r0, [r1, #0]
 80058a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058aa:	f380 8809 	msr	PSP, r0
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8811 	msr	BASEPRI, r0
 80058ba:	4770      	bx	lr
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst2>:
 80058c0:	20000a1c 	.word	0x20000a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058c8:	4808      	ldr	r0, [pc, #32]	; (80058ec <prvPortStartFirstTask+0x24>)
 80058ca:	6800      	ldr	r0, [r0, #0]
 80058cc:	6800      	ldr	r0, [r0, #0]
 80058ce:	f380 8808 	msr	MSP, r0
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f380 8814 	msr	CONTROL, r0
 80058da:	b662      	cpsie	i
 80058dc:	b661      	cpsie	f
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	df00      	svc	0
 80058e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ea:	bf00      	nop
 80058ec:	e000ed08 	.word	0xe000ed08

080058f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058f6:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <xPortStartScheduler+0x120>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a46      	ldr	r2, [pc, #280]	; (8005a14 <xPortStartScheduler+0x124>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10a      	bne.n	8005916 <xPortStartScheduler+0x26>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	613b      	str	r3, [r7, #16]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005916:	4b3e      	ldr	r3, [pc, #248]	; (8005a10 <xPortStartScheduler+0x120>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a3f      	ldr	r2, [pc, #252]	; (8005a18 <xPortStartScheduler+0x128>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d10a      	bne.n	8005936 <xPortStartScheduler+0x46>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	60fb      	str	r3, [r7, #12]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005936:	4b39      	ldr	r3, [pc, #228]	; (8005a1c <xPortStartScheduler+0x12c>)
 8005938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	22ff      	movs	r2, #255	; 0xff
 8005946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4b31      	ldr	r3, [pc, #196]	; (8005a20 <xPortStartScheduler+0x130>)
 800595c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800595e:	4b31      	ldr	r3, [pc, #196]	; (8005a24 <xPortStartScheduler+0x134>)
 8005960:	2207      	movs	r2, #7
 8005962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005964:	e009      	b.n	800597a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <xPortStartScheduler+0x134>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3b01      	subs	r3, #1
 800596c:	4a2d      	ldr	r2, [pc, #180]	; (8005a24 <xPortStartScheduler+0x134>)
 800596e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b80      	cmp	r3, #128	; 0x80
 8005984:	d0ef      	beq.n	8005966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005986:	4b27      	ldr	r3, [pc, #156]	; (8005a24 <xPortStartScheduler+0x134>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1c3 0307 	rsb	r3, r3, #7
 800598e:	2b04      	cmp	r3, #4
 8005990:	d00a      	beq.n	80059a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059a8:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <xPortStartScheduler+0x134>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	021b      	lsls	r3, r3, #8
 80059ae:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <xPortStartScheduler+0x134>)
 80059b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059b2:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <xPortStartScheduler+0x134>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ba:	4a1a      	ldr	r2, [pc, #104]	; (8005a24 <xPortStartScheduler+0x134>)
 80059bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059c6:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <xPortStartScheduler+0x138>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <xPortStartScheduler+0x138>)
 80059cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059d2:	4b15      	ldr	r3, [pc, #84]	; (8005a28 <xPortStartScheduler+0x138>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a14      	ldr	r2, [pc, #80]	; (8005a28 <xPortStartScheduler+0x138>)
 80059d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059de:	f000 f8dd 	bl	8005b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059e2:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <xPortStartScheduler+0x13c>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059e8:	f000 f8fc 	bl	8005be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059ec:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <xPortStartScheduler+0x140>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <xPortStartScheduler+0x140>)
 80059f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059f8:	f7ff ff66 	bl	80058c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059fc:	f7ff fd48 	bl	8005490 <vTaskSwitchContext>
	prvTaskExitError();
 8005a00:	f7ff ff1c 	bl	800583c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000ed00 	.word	0xe000ed00
 8005a14:	410fc271 	.word	0x410fc271
 8005a18:	410fc270 	.word	0x410fc270
 8005a1c:	e000e400 	.word	0xe000e400
 8005a20:	20000b48 	.word	0x20000b48
 8005a24:	20000b4c 	.word	0x20000b4c
 8005a28:	e000ed20 	.word	0xe000ed20
 8005a2c:	2000000c 	.word	0x2000000c
 8005a30:	e000ef34 	.word	0xe000ef34

08005a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	607b      	str	r3, [r7, #4]
}
 8005a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <vPortEnterCritical+0x58>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3301      	adds	r3, #1
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <vPortEnterCritical+0x58>)
 8005a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a58:	4b0c      	ldr	r3, [pc, #48]	; (8005a8c <vPortEnterCritical+0x58>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d10f      	bne.n	8005a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <vPortEnterCritical+0x5c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00a      	beq.n	8005a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	603b      	str	r3, [r7, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <vPortEnterCritical+0x4a>
	}
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2000000c 	.word	0x2000000c
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <vPortExitCritical+0x50>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <vPortExitCritical+0x24>
	__asm volatile
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	607b      	str	r3, [r7, #4]
}
 8005ab4:	bf00      	nop
 8005ab6:	e7fe      	b.n	8005ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <vPortExitCritical+0x50>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <vPortExitCritical+0x50>)
 8005ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ac2:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <vPortExitCritical+0x50>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d105      	bne.n	8005ad6 <vPortExitCritical+0x42>
 8005aca:	2300      	movs	r3, #0
 8005acc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	2000000c 	.word	0x2000000c
	...

08005af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005af0:	f3ef 8009 	mrs	r0, PSP
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <pxCurrentTCBConst>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f01e 0f10 	tst.w	lr, #16
 8005b00:	bf08      	it	eq
 8005b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0a:	6010      	str	r0, [r2, #0]
 8005b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b14:	f380 8811 	msr	BASEPRI, r0
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f7ff fcb6 	bl	8005490 <vTaskSwitchContext>
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f380 8811 	msr	BASEPRI, r0
 8005b2c:	bc09      	pop	{r0, r3}
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	6808      	ldr	r0, [r1, #0]
 8005b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b36:	f01e 0f10 	tst.w	lr, #16
 8005b3a:	bf08      	it	eq
 8005b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b40:	f380 8809 	msr	PSP, r0
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w

08005b50 <pxCurrentTCBConst>:
 8005b50:	20000a1c 	.word	0x20000a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b72:	f7ff fbd5 	bl	8005320 <xTaskIncrementTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <SysTick_Handler+0x40>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
}
 8005b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	; (8005bd4 <vPortSetupTimerInterrupt+0x38>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <vPortSetupTimerInterrupt+0x3c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <vPortSetupTimerInterrupt+0x40>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <vPortSetupTimerInterrupt+0x44>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bbe:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000e010 	.word	0xe000e010
 8005bd4:	e000e018 	.word	0xe000e018
 8005bd8:	20000000 	.word	0x20000000
 8005bdc:	10624dd3 	.word	0x10624dd3
 8005be0:	e000e014 	.word	0xe000e014

08005be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bf4 <vPortEnableVFP+0x10>
 8005be8:	6801      	ldr	r1, [r0, #0]
 8005bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bee:	6001      	str	r1, [r0, #0]
 8005bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bf2:	bf00      	nop
 8005bf4:	e000ed88 	.word	0xe000ed88

08005bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08a      	sub	sp, #40	; 0x28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c04:	f7ff fae2 	bl	80051cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c08:	4b5b      	ldr	r3, [pc, #364]	; (8005d78 <pvPortMalloc+0x180>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c10:	f000 f920 	bl	8005e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c14:	4b59      	ldr	r3, [pc, #356]	; (8005d7c <pvPortMalloc+0x184>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f040 8093 	bne.w	8005d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01d      	beq.n	8005c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c28:	2208      	movs	r2, #8
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d014      	beq.n	8005c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f023 0307 	bic.w	r3, r3, #7
 8005c40:	3308      	adds	r3, #8
 8005c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <pvPortMalloc+0x6c>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	617b      	str	r3, [r7, #20]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d06e      	beq.n	8005d48 <pvPortMalloc+0x150>
 8005c6a:	4b45      	ldr	r3, [pc, #276]	; (8005d80 <pvPortMalloc+0x188>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d869      	bhi.n	8005d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c74:	4b43      	ldr	r3, [pc, #268]	; (8005d84 <pvPortMalloc+0x18c>)
 8005c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c78:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <pvPortMalloc+0x18c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c7e:	e004      	b.n	8005c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d903      	bls.n	8005c9c <pvPortMalloc+0xa4>
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f1      	bne.n	8005c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c9c:	4b36      	ldr	r3, [pc, #216]	; (8005d78 <pvPortMalloc+0x180>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d050      	beq.n	8005d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2208      	movs	r2, #8
 8005cac:	4413      	add	r3, r2
 8005cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d91f      	bls.n	8005d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	613b      	str	r3, [r7, #16]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d02:	69b8      	ldr	r0, [r7, #24]
 8005d04:	f000 f908 	bl	8005f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d08:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <pvPortMalloc+0x188>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <pvPortMalloc+0x188>)
 8005d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d16:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <pvPortMalloc+0x188>)
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	4b1b      	ldr	r3, [pc, #108]	; (8005d88 <pvPortMalloc+0x190>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d203      	bcs.n	8005d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d22:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <pvPortMalloc+0x188>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a18      	ldr	r2, [pc, #96]	; (8005d88 <pvPortMalloc+0x190>)
 8005d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <pvPortMalloc+0x184>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <pvPortMalloc+0x194>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a11      	ldr	r2, [pc, #68]	; (8005d8c <pvPortMalloc+0x194>)
 8005d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d48:	f7ff fa4e 	bl	80051e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <pvPortMalloc+0x174>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	60fb      	str	r3, [r7, #12]
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <pvPortMalloc+0x172>
	return pvReturn;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3728      	adds	r7, #40	; 0x28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20004758 	.word	0x20004758
 8005d7c:	2000476c 	.word	0x2000476c
 8005d80:	2000475c 	.word	0x2000475c
 8005d84:	20004750 	.word	0x20004750
 8005d88:	20004760 	.word	0x20004760
 8005d8c:	20004764 	.word	0x20004764

08005d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d04d      	beq.n	8005e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005da2:	2308      	movs	r3, #8
 8005da4:	425b      	negs	r3, r3
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4b24      	ldr	r3, [pc, #144]	; (8005e48 <vPortFree+0xb8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <vPortFree+0x44>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	60fb      	str	r3, [r7, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <vPortFree+0x62>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60bb      	str	r3, [r7, #8]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <vPortFree+0xb8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01e      	beq.n	8005e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d11a      	bne.n	8005e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <vPortFree+0xb8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	43db      	mvns	r3, r3
 8005e12:	401a      	ands	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e18:	f7ff f9d8 	bl	80051cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <vPortFree+0xbc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4413      	add	r3, r2
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <vPortFree+0xbc>)
 8005e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e2a:	6938      	ldr	r0, [r7, #16]
 8005e2c:	f000 f874 	bl	8005f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e30:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <vPortFree+0xc0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	4a06      	ldr	r2, [pc, #24]	; (8005e50 <vPortFree+0xc0>)
 8005e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e3a:	f7ff f9d5 	bl	80051e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e3e:	bf00      	nop
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	2000476c 	.word	0x2000476c
 8005e4c:	2000475c 	.word	0x2000475c
 8005e50:	20004768 	.word	0x20004768

08005e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e60:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <prvHeapInit+0xac>)
 8005e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3307      	adds	r3, #7
 8005e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0307 	bic.w	r3, r3, #7
 8005e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	4a1f      	ldr	r2, [pc, #124]	; (8005f00 <prvHeapInit+0xac>)
 8005e84:	4413      	add	r3, r2
 8005e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <prvHeapInit+0xb0>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e92:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <prvHeapInit+0xb0>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0307 	bic.w	r3, r3, #7
 8005eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <prvHeapInit+0xb4>)
 8005eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <prvHeapInit+0xb4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ebe:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <prvHeapInit+0xb4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	1ad2      	subs	r2, r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <prvHeapInit+0xb4>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <prvHeapInit+0xb8>)
 8005ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <prvHeapInit+0xbc>)
 8005eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <prvHeapInit+0xc0>)
 8005eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ef2:	601a      	str	r2, [r3, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20000b50 	.word	0x20000b50
 8005f04:	20004750 	.word	0x20004750
 8005f08:	20004758 	.word	0x20004758
 8005f0c:	20004760 	.word	0x20004760
 8005f10:	2000475c 	.word	0x2000475c
 8005f14:	2000476c 	.word	0x2000476c

08005f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f20:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <prvInsertBlockIntoFreeList+0xac>)
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	e002      	b.n	8005f2c <prvInsertBlockIntoFreeList+0x14>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d8f7      	bhi.n	8005f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4413      	add	r3, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d108      	bne.n	8005f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	441a      	add	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	441a      	add	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d118      	bne.n	8005fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d00d      	beq.n	8005f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	441a      	add	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e008      	b.n	8005fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	e003      	b.n	8005fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d002      	beq.n	8005fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20004750 	.word	0x20004750
 8005fc8:	20004758 	.word	0x20004758

08005fcc <__libc_init_array>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	4d0d      	ldr	r5, [pc, #52]	; (8006004 <__libc_init_array+0x38>)
 8005fd0:	4c0d      	ldr	r4, [pc, #52]	; (8006008 <__libc_init_array+0x3c>)
 8005fd2:	1b64      	subs	r4, r4, r5
 8005fd4:	10a4      	asrs	r4, r4, #2
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	42a6      	cmp	r6, r4
 8005fda:	d109      	bne.n	8005ff0 <__libc_init_array+0x24>
 8005fdc:	4d0b      	ldr	r5, [pc, #44]	; (800600c <__libc_init_array+0x40>)
 8005fde:	4c0c      	ldr	r4, [pc, #48]	; (8006010 <__libc_init_array+0x44>)
 8005fe0:	f000 f8e4 	bl	80061ac <_init>
 8005fe4:	1b64      	subs	r4, r4, r5
 8005fe6:	10a4      	asrs	r4, r4, #2
 8005fe8:	2600      	movs	r6, #0
 8005fea:	42a6      	cmp	r6, r4
 8005fec:	d105      	bne.n	8005ffa <__libc_init_array+0x2e>
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ff4:	4798      	blx	r3
 8005ff6:	3601      	adds	r6, #1
 8005ff8:	e7ee      	b.n	8005fd8 <__libc_init_array+0xc>
 8005ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffe:	4798      	blx	r3
 8006000:	3601      	adds	r6, #1
 8006002:	e7f2      	b.n	8005fea <__libc_init_array+0x1e>
 8006004:	08006274 	.word	0x08006274
 8006008:	08006274 	.word	0x08006274
 800600c:	08006274 	.word	0x08006274
 8006010:	08006278 	.word	0x08006278

08006014 <__retarget_lock_acquire_recursive>:
 8006014:	4770      	bx	lr

08006016 <__retarget_lock_release_recursive>:
 8006016:	4770      	bx	lr

08006018 <memset>:
 8006018:	4402      	add	r2, r0
 800601a:	4603      	mov	r3, r0
 800601c:	4293      	cmp	r3, r2
 800601e:	d100      	bne.n	8006022 <memset+0xa>
 8006020:	4770      	bx	lr
 8006022:	f803 1b01 	strb.w	r1, [r3], #1
 8006026:	e7f9      	b.n	800601c <memset+0x4>

08006028 <_free_r>:
 8006028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800602a:	2900      	cmp	r1, #0
 800602c:	d044      	beq.n	80060b8 <_free_r+0x90>
 800602e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006032:	9001      	str	r0, [sp, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f1a1 0404 	sub.w	r4, r1, #4
 800603a:	bfb8      	it	lt
 800603c:	18e4      	addlt	r4, r4, r3
 800603e:	f000 f8a9 	bl	8006194 <__malloc_lock>
 8006042:	4a1e      	ldr	r2, [pc, #120]	; (80060bc <_free_r+0x94>)
 8006044:	9801      	ldr	r0, [sp, #4]
 8006046:	6813      	ldr	r3, [r2, #0]
 8006048:	b933      	cbnz	r3, 8006058 <_free_r+0x30>
 800604a:	6063      	str	r3, [r4, #4]
 800604c:	6014      	str	r4, [r2, #0]
 800604e:	b003      	add	sp, #12
 8006050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006054:	f000 b8a4 	b.w	80061a0 <__malloc_unlock>
 8006058:	42a3      	cmp	r3, r4
 800605a:	d908      	bls.n	800606e <_free_r+0x46>
 800605c:	6825      	ldr	r5, [r4, #0]
 800605e:	1961      	adds	r1, r4, r5
 8006060:	428b      	cmp	r3, r1
 8006062:	bf01      	itttt	eq
 8006064:	6819      	ldreq	r1, [r3, #0]
 8006066:	685b      	ldreq	r3, [r3, #4]
 8006068:	1949      	addeq	r1, r1, r5
 800606a:	6021      	streq	r1, [r4, #0]
 800606c:	e7ed      	b.n	800604a <_free_r+0x22>
 800606e:	461a      	mov	r2, r3
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b10b      	cbz	r3, 8006078 <_free_r+0x50>
 8006074:	42a3      	cmp	r3, r4
 8006076:	d9fa      	bls.n	800606e <_free_r+0x46>
 8006078:	6811      	ldr	r1, [r2, #0]
 800607a:	1855      	adds	r5, r2, r1
 800607c:	42a5      	cmp	r5, r4
 800607e:	d10b      	bne.n	8006098 <_free_r+0x70>
 8006080:	6824      	ldr	r4, [r4, #0]
 8006082:	4421      	add	r1, r4
 8006084:	1854      	adds	r4, r2, r1
 8006086:	42a3      	cmp	r3, r4
 8006088:	6011      	str	r1, [r2, #0]
 800608a:	d1e0      	bne.n	800604e <_free_r+0x26>
 800608c:	681c      	ldr	r4, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	6053      	str	r3, [r2, #4]
 8006092:	4421      	add	r1, r4
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	e7da      	b.n	800604e <_free_r+0x26>
 8006098:	d902      	bls.n	80060a0 <_free_r+0x78>
 800609a:	230c      	movs	r3, #12
 800609c:	6003      	str	r3, [r0, #0]
 800609e:	e7d6      	b.n	800604e <_free_r+0x26>
 80060a0:	6825      	ldr	r5, [r4, #0]
 80060a2:	1961      	adds	r1, r4, r5
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf04      	itt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	6063      	str	r3, [r4, #4]
 80060ae:	bf04      	itt	eq
 80060b0:	1949      	addeq	r1, r1, r5
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	6054      	str	r4, [r2, #4]
 80060b6:	e7ca      	b.n	800604e <_free_r+0x26>
 80060b8:	b003      	add	sp, #12
 80060ba:	bd30      	pop	{r4, r5, pc}
 80060bc:	20004774 	.word	0x20004774

080060c0 <cleanup_glue>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	460c      	mov	r4, r1
 80060c4:	6809      	ldr	r1, [r1, #0]
 80060c6:	4605      	mov	r5, r0
 80060c8:	b109      	cbz	r1, 80060ce <cleanup_glue+0xe>
 80060ca:	f7ff fff9 	bl	80060c0 <cleanup_glue>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060d6:	f7ff bfa7 	b.w	8006028 <_free_r>
	...

080060dc <_reclaim_reent>:
 80060dc:	4b2c      	ldr	r3, [pc, #176]	; (8006190 <_reclaim_reent+0xb4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4283      	cmp	r3, r0
 80060e2:	b570      	push	{r4, r5, r6, lr}
 80060e4:	4604      	mov	r4, r0
 80060e6:	d051      	beq.n	800618c <_reclaim_reent+0xb0>
 80060e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060ea:	b143      	cbz	r3, 80060fe <_reclaim_reent+0x22>
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d14a      	bne.n	8006188 <_reclaim_reent+0xac>
 80060f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060f4:	6819      	ldr	r1, [r3, #0]
 80060f6:	b111      	cbz	r1, 80060fe <_reclaim_reent+0x22>
 80060f8:	4620      	mov	r0, r4
 80060fa:	f7ff ff95 	bl	8006028 <_free_r>
 80060fe:	6961      	ldr	r1, [r4, #20]
 8006100:	b111      	cbz	r1, 8006108 <_reclaim_reent+0x2c>
 8006102:	4620      	mov	r0, r4
 8006104:	f7ff ff90 	bl	8006028 <_free_r>
 8006108:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800610a:	b111      	cbz	r1, 8006112 <_reclaim_reent+0x36>
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff ff8b 	bl	8006028 <_free_r>
 8006112:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006114:	b111      	cbz	r1, 800611c <_reclaim_reent+0x40>
 8006116:	4620      	mov	r0, r4
 8006118:	f7ff ff86 	bl	8006028 <_free_r>
 800611c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800611e:	b111      	cbz	r1, 8006126 <_reclaim_reent+0x4a>
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff ff81 	bl	8006028 <_free_r>
 8006126:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006128:	b111      	cbz	r1, 8006130 <_reclaim_reent+0x54>
 800612a:	4620      	mov	r0, r4
 800612c:	f7ff ff7c 	bl	8006028 <_free_r>
 8006130:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006132:	b111      	cbz	r1, 800613a <_reclaim_reent+0x5e>
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff ff77 	bl	8006028 <_free_r>
 800613a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800613c:	b111      	cbz	r1, 8006144 <_reclaim_reent+0x68>
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ff72 	bl	8006028 <_free_r>
 8006144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006146:	b111      	cbz	r1, 800614e <_reclaim_reent+0x72>
 8006148:	4620      	mov	r0, r4
 800614a:	f7ff ff6d 	bl	8006028 <_free_r>
 800614e:	69a3      	ldr	r3, [r4, #24]
 8006150:	b1e3      	cbz	r3, 800618c <_reclaim_reent+0xb0>
 8006152:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006154:	4620      	mov	r0, r4
 8006156:	4798      	blx	r3
 8006158:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800615a:	b1b9      	cbz	r1, 800618c <_reclaim_reent+0xb0>
 800615c:	4620      	mov	r0, r4
 800615e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006162:	f7ff bfad 	b.w	80060c0 <cleanup_glue>
 8006166:	5949      	ldr	r1, [r1, r5]
 8006168:	b941      	cbnz	r1, 800617c <_reclaim_reent+0xa0>
 800616a:	3504      	adds	r5, #4
 800616c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800616e:	2d80      	cmp	r5, #128	; 0x80
 8006170:	68d9      	ldr	r1, [r3, #12]
 8006172:	d1f8      	bne.n	8006166 <_reclaim_reent+0x8a>
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff ff57 	bl	8006028 <_free_r>
 800617a:	e7ba      	b.n	80060f2 <_reclaim_reent+0x16>
 800617c:	680e      	ldr	r6, [r1, #0]
 800617e:	4620      	mov	r0, r4
 8006180:	f7ff ff52 	bl	8006028 <_free_r>
 8006184:	4631      	mov	r1, r6
 8006186:	e7ef      	b.n	8006168 <_reclaim_reent+0x8c>
 8006188:	2500      	movs	r5, #0
 800618a:	e7ef      	b.n	800616c <_reclaim_reent+0x90>
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	bf00      	nop
 8006190:	20000010 	.word	0x20000010

08006194 <__malloc_lock>:
 8006194:	4801      	ldr	r0, [pc, #4]	; (800619c <__malloc_lock+0x8>)
 8006196:	f7ff bf3d 	b.w	8006014 <__retarget_lock_acquire_recursive>
 800619a:	bf00      	nop
 800619c:	20004770 	.word	0x20004770

080061a0 <__malloc_unlock>:
 80061a0:	4801      	ldr	r0, [pc, #4]	; (80061a8 <__malloc_unlock+0x8>)
 80061a2:	f7ff bf38 	b.w	8006016 <__retarget_lock_release_recursive>
 80061a6:	bf00      	nop
 80061a8:	20004770 	.word	0x20004770

080061ac <_init>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr

080061b8 <_fini>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr
