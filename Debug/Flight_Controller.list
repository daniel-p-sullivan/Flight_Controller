
Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080096a0  080096a0  000196a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009770  08009770  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009770  08009770  00019770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009778  08009778  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a8  20000080  08009800  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004328  08009800  00024328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000245e8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec1  00000000  00000000  00044698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00049560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  0004ac08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029202  00000000  00000000  0004c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a98  00000000  00000000  00075322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c67  00000000  00000000  00096dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000615c  00000000  00000000  00178a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009688 	.word	0x08009688

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08009688 	.word	0x08009688

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <_ZN9actuators7BLHelisC1E17TIM_HandleTypeDef>:
#include "blhelis.hpp"
#include "../state/state.hpp"

namespace actuators{

BLHelis::BLHelis(TIM_HandleTypeDef htim8){
 8000514:	b084      	sub	sp, #16
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	f107 0014 	add.w	r0, r7, #20
 8000522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->timer = &htim8;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f107 0214 	add.w	r2, r7, #20
 800052c:	601a      	str	r2, [r3, #0]
	this->Init_Motors();
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f808 	bl	8000544 <_ZN9actuators7BLHelis11Init_MotorsEv>
}
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000540:	b004      	add	sp, #16
 8000542:	4770      	bx	lr

08000544 <_ZN9actuators7BLHelis11Init_MotorsEv>:

void BLHelis::Init_Motors(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(this->timer);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f005 fae3 	bl	8005b1c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_1);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fc0f 	bl	8005d80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_2);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2104      	movs	r1, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f005 fc09 	bl	8005d80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_3);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2108      	movs	r1, #8
 8000574:	4618      	mov	r0, r3
 8000576:	f005 fc03 	bl	8005d80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_4);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	210c      	movs	r1, #12
 8000580:	4618      	mov	r0, r3
 8000582:	f005 fbfd 	bl	8005d80 <HAL_TIM_PWM_Start>
	static uint16_t mc1_l = MOTOR_1MS;
	static uint16_t mc1_h = MOTOR_13MS;
	static uint16_t mc1 = 0;
	static uint16_t step_count = 1000;
	static uint8_t delay = 10;
	float step = (mc1_h - mc1_l) / step_count;
 8000586:	4b4d      	ldr	r3, [pc, #308]	; (80006bc <_ZN9actuators7BLHelis11Init_MotorsEv+0x178>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	4a4c      	ldr	r2, [pc, #304]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 8000594:	8812      	ldrh	r2, [r2, #0]
 8000596:	fb93 f3f2 	sdiv	r3, r3, r2
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	edc7 7a04 	vstr	s15, [r7, #16]

	motor_sp msp;

	//delay for motor startup????
	//vTaskDelay(10000);
	for(uint16_t i = 0; i < (step_count/2); i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	82fb      	strh	r3, [r7, #22]
 80005aa:	4b46      	ldr	r3, [pc, #280]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	085b      	lsrs	r3, r3, #1
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	8afa      	ldrh	r2, [r7, #22]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d22c      	bcs.n	8000612 <_ZN9actuators7BLHelis11Init_MotorsEv+0xce>
		mc1 = mc1_l + i * (int)step;
 80005b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80005bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005c0:	ee17 3a90 	vmov	r3, s15
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	8afa      	ldrh	r2, [r7, #22]
 80005c8:	fb12 f303 	smulbb	r3, r2, r3
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005d8:	801a      	strh	r2, [r3, #0]
		msp = {mc1, mc1, mc1, mc1};
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005dc:	8818      	ldrh	r0, [r3, #0]
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e0:	8819      	ldrh	r1, [r3, #0]
 80005e2:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	8138      	strh	r0, [r7, #8]
 80005ec:	8179      	strh	r1, [r7, #10]
 80005ee:	81ba      	strh	r2, [r7, #12]
 80005f0:	81fb      	strh	r3, [r7, #14]
		this->Update_Motor_SP(msp);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f8f8 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
		vTaskDelay(delay);
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <_ZN9actuators7BLHelis11Init_MotorsEv+0x188>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fccd 	bl	8007fa4 <vTaskDelay>
	for(uint16_t i = 0; i < (step_count/2); i++){
 800060a:	8afb      	ldrh	r3, [r7, #22]
 800060c:	3301      	adds	r3, #1
 800060e:	82fb      	strh	r3, [r7, #22]
 8000610:	e7cb      	b.n	80005aa <_ZN9actuators7BLHelis11Init_MotorsEv+0x66>
	}
	for(uint16_t i = 0; i < (step_count/2); i++){
 8000612:	2300      	movs	r3, #0
 8000614:	82bb      	strh	r3, [r7, #20]
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	085b      	lsrs	r3, r3, #1
 800061c:	b29b      	uxth	r3, r3
 800061e:	8aba      	ldrh	r2, [r7, #20]
 8000620:	429a      	cmp	r2, r3
 8000622:	d22c      	bcs.n	800067e <_ZN9actuators7BLHelis11Init_MotorsEv+0x13a>
		mc1 = mc1_h - i * (int)step;
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <_ZN9actuators7BLHelis11Init_MotorsEv+0x178>)
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	edd7 7a04 	vldr	s15, [r7, #16]
 800062c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000630:	ee17 3a90 	vmov	r3, s15
 8000634:	b29b      	uxth	r3, r3
 8000636:	8ab9      	ldrh	r1, [r7, #20]
 8000638:	fb11 f303 	smulbb	r3, r1, r3
 800063c:	b29b      	uxth	r3, r3
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000644:	801a      	strh	r2, [r3, #0]
		msp = {mc1, mc1, mc1, mc1};
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000648:	8818      	ldrh	r0, [r3, #0]
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 800064c:	8819      	ldrh	r1, [r3, #0]
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000650:	881a      	ldrh	r2, [r3, #0]
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	8138      	strh	r0, [r7, #8]
 8000658:	8179      	strh	r1, [r7, #10]
 800065a:	81ba      	strh	r2, [r7, #12]
 800065c:	81fb      	strh	r3, [r7, #14]
		this->Update_Motor_SP(msp);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f8c2 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
		vTaskDelay(delay);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <_ZN9actuators7BLHelis11Init_MotorsEv+0x188>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f007 fc97 	bl	8007fa4 <vTaskDelay>
	for(uint16_t i = 0; i < (step_count/2); i++){
 8000676:	8abb      	ldrh	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	82bb      	strh	r3, [r7, #20]
 800067c:	e7cb      	b.n	8000616 <_ZN9actuators7BLHelis11Init_MotorsEv+0xd2>
	}
	mc1 = mc1_l;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000684:	801a      	strh	r2, [r3, #0]
	msp = {mc1, mc1, mc1, mc1};
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000688:	8818      	ldrh	r0, [r3, #0]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 800068c:	8819      	ldrh	r1, [r3, #0]
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000690:	881a      	ldrh	r2, [r3, #0]
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	8138      	strh	r0, [r7, #8]
 8000698:	8179      	strh	r1, [r7, #10]
 800069a:	81ba      	strh	r2, [r7, #12]
 800069c:	81fb      	strh	r3, [r7, #14]
	this->Update_Motor_SP(msp);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f8a2 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
	vTaskDelay(2000);
 80006ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006b0:	f007 fc78 	bl	8007fa4 <vTaskDelay>
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000002 	.word	0x20000002
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000004 	.word	0x20000004
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	20000006 	.word	0x20000006

080006d0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE>:

void BLHelis::actuateMotors(state::QuadControlActions& ac){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]

	static uint16_t m1_sp, m2_sp, m3_sp, m4_sp;

	//mix the controller output
	m1_sp = ac.u1 + ac.u2 + ac.u3 + ac.u4;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	ed93 7a00 	vldr	s14, [r3]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80006e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80006f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000702:	ee17 3a90 	vmov	r3, s15
 8000706:	b29a      	uxth	r2, r3
 8000708:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x110>)
 800070a:	801a      	strh	r2, [r3, #0]
	m2_sp = ac.u1 - ac.u2 + ac.u3 - ac.u4;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	ed93 7a00 	vldr	s14, [r3]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	edd3 7a01 	vldr	s15, [r3, #4]
 8000718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	edd3 7a03 	vldr	s15, [r3, #12]
 800072c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000734:	ee17 3a90 	vmov	r3, s15
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x114>)
 800073c:	801a      	strh	r2, [r3, #0]
	m3_sp = ac.u1 + ac.u2 - ac.u3 - ac.u4;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	ed93 7a00 	vldr	s14, [r3]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	edd3 7a01 	vldr	s15, [r3, #4]
 800074a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	edd3 7a02 	vldr	s15, [r3, #8]
 8000754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	edd3 7a03 	vldr	s15, [r3, #12]
 800075e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	ee17 3a90 	vmov	r3, s15
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x118>)
 800076e:	801a      	strh	r2, [r3, #0]
	m4_sp = ac.u1 - ac.u2 - ac.u3 + ac.u4;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	ed93 7a00 	vldr	s14, [r3]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edd3 7a01 	vldr	s15, [r3, #4]
 800077c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	edd3 7a02 	vldr	s15, [r3, #8]
 8000786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000798:	ee17 3a90 	vmov	r3, s15
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x11c>)
 80007a0:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_1, m1_sp);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x110>)
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_2, m2_sp);
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x114>)
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_3, m3_sp);
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x118>)
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_4, m4_sp);
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x11c>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000009e 	.word	0x2000009e
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	200000a2 	.word	0x200000a2
 80007ec:	200000a4 	.word	0x200000a4

080007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>:
	this->Update_Motor_SP(msp);
	vTaskDelay(2000);

}

void BLHelis::Update_Motor_SP(motor_sp msp){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	e883 0006 	stmia.w	r3, {r1, r2}
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_1, msp.m1_sp);
 80007fe:	88ba      	ldrh	r2, [r7, #4]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_2, msp.m2_sp);
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_3, msp.m3_sp);
 8000812:	893a      	ldrh	r2, [r7, #8]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_4, msp.m4_sp);
 800081c:	897a      	ldrh	r2, [r7, #10]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef>:

#include "nrf24.hpp"

namespace communications{

NRF24::NRF24(SPI_HandleTypeDef spi) : p0_address{0xe7, 0xe7, 0xe7, 0xe7, 0xe7}{
 8000834:	b084      	sub	sp, #16
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a48      	ldr	r2, [pc, #288]	; (800096c <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x138>)
 800084a:	3325      	adds	r3, #37	; 0x25
 800084c:	6810      	ldr	r0, [r2, #0]
 800084e:	6018      	str	r0, [r3, #0]
 8000850:	7912      	ldrb	r2, [r2, #4]
 8000852:	711a      	strb	r2, [r3, #4]

	//Save the SPI handle
	this->spi = &spi;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800085a:	601a      	str	r2, [r3, #0]

	//CONFIGURE THE payload_tx_buf TO ALLOW FOR PAYLOAD READING
	this->payload_tx_buf[0] = this->R_RX_PAYLOAD;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2261      	movs	r2, #97	; 0x61
 8000860:	711a      	strb	r2, [r3, #4]
	for(int i = 1; i < PAYLOAD_SIZE+1; i++){
 8000862:	2301      	movs	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	2b20      	cmp	r3, #32
 800086a:	dc09      	bgt.n	8000880 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x4c>
			this->payload_tx_buf[i] = 0xff; //pad rest of the buffer with NOPs
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	4413      	add	r3, r2
 8000872:	3304      	adds	r3, #4
 8000874:	22ff      	movs	r2, #255	; 0xff
 8000876:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < PAYLOAD_SIZE+1; i++){
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e7f2      	b.n	8000866 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x32>
	}

	//set CE low before configuring the NRF?
	HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000886:	483a      	ldr	r0, [pc, #232]	; (8000970 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x13c>)
 8000888:	f002 fa18 	bl	8002cbc <HAL_GPIO_WritePin>

	//CSN must be high, transitioning to low starts SPI
	End_SPI();
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f98f 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>

	//DISABLE AUTO-ACK
	uint8_t disable_autoack = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	74fb      	strb	r3, [r7, #19]
	uint8_t disable_autoretransmit = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	74bb      	strb	r3, [r7, #18]
	Write_Register(EN_AA, &disable_autoack);
 800089a:	f107 0313 	add.w	r3, r7, #19
 800089e:	461a      	mov	r2, r3
 80008a0:	2101      	movs	r1, #1
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f88e 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>
	Write_Register(SETUP_RETR, &disable_autoretransmit);
 80008a8:	f107 0312 	add.w	r3, r7, #18
 80008ac:	461a      	mov	r2, r3
 80008ae:	2104      	movs	r1, #4
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f887 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>


	//SET THE PAYLOAD SIZE
	uint8_t size_readback;
	while(size_readback != PAYLOAD_SIZE){
 80008b6:	7c7b      	ldrb	r3, [r7, #17]
 80008b8:	2b20      	cmp	r3, #32
 80008ba:	d00e      	beq.n	80008da <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xa6>
		//write the payload size and verify
		Set_Payload_Size(PAYLOAD_SIZE);
 80008bc:	2120      	movs	r1, #32
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f920 	bl	8000b04 <_ZN14communications5NRF2416Set_Payload_SizeEh>
		vTaskDelay(3);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f007 fb6d 	bl	8007fa4 <vTaskDelay>
		Read_Register((uint8_t)RX_PW_P0, &size_readback);
 80008ca:	f107 0311 	add.w	r3, r7, #17
 80008ce:	461a      	mov	r2, r3
 80008d0:	2111      	movs	r1, #17
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f84e 	bl	8000974 <_ZN14communications5NRF2413Read_RegisterEhPh>
	while(size_readback != PAYLOAD_SIZE){
 80008d8:	e7ed      	b.n	80008b6 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x82>
	}


	//CONFIGURE THE ADDRESS FOR PIPE0
	uint8_t p0_address_readback[5];
	while(!array_eq(p0_address_readback, this->p0_address, (uint8_t)5)){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80008e0:	f107 010c 	add.w	r1, r7, #12
 80008e4:	2305      	movs	r3, #5
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 f972 	bl	8000bd0 <_ZN14communications5NRF248array_eqEPhS1_h>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f083 0301 	eor.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d012      	beq.n	800091e <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xea>
		//write the address for pipe0, verify it's correct
		Write_MB_Register((uint8_t)RX_ADDR_P0, this->p0_address, sizeof(this->p0_address));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80008fe:	2305      	movs	r3, #5
 8000900:	210a      	movs	r1, #10
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f8c2 	bl	8000a8c <_ZN14communications5NRF2417Write_MB_RegisterEhPhh>
		vTaskDelay(3);
 8000908:	2003      	movs	r0, #3
 800090a:	f007 fb4b 	bl	8007fa4 <vTaskDelay>
		Read_MB_Register((uint8_t)RX_ADDR_P0, p0_address_readback, sizeof(this->p0_address));
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	2305      	movs	r3, #5
 8000914:	210a      	movs	r1, #10
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 f880 	bl	8000a1c <_ZN14communications5NRF2416Read_MB_RegisterEhPhh>
	while(!array_eq(p0_address_readback, this->p0_address, (uint8_t)5)){
 800091c:	e7dd      	b.n	80008da <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xa6>
	}


	//SET THE COMMUNICATION SPEED
	Set_Data_Rate(this->nrf24_comm_speed);
 800091e:	2100      	movs	r1, #0
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 f90b 	bl	8000b3c <_ZN14communications5NRF2413Set_Data_RateENS0_11nrf24_speedE>

	//POWER ON AND SET TO PRIM_RX MODE
	uint8_t config_data = 0x00 | NRF24_PWR_UP_On | NRF24_PRIM_RX_On;
 8000926:	2303      	movs	r3, #3
 8000928:	72fb      	strb	r3, [r7, #11]
	uint8_t config_readback = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	72bb      	strb	r3, [r7, #10]
	while(config_readback != config_data){
 800092e:	7aba      	ldrb	r2, [r7, #10]
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	429a      	cmp	r2, r3
 8000934:	d011      	beq.n	800095a <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x126>
		//write the config and verify
		Write_Register((uint8_t)CONFIG, &config_data);
 8000936:	f107 030b 	add.w	r3, r7, #11
 800093a:	461a      	mov	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f840 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>
		vTaskDelay(3);
 8000944:	2003      	movs	r0, #3
 8000946:	f007 fb2d 	bl	8007fa4 <vTaskDelay>
		Read_Register((uint8_t)CONFIG, &config_readback);
 800094a:	f107 030a 	add.w	r3, r7, #10
 800094e:	461a      	mov	r2, r3
 8000950:	2100      	movs	r1, #0
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f80e 	bl	8000974 <_ZN14communications5NRF2413Read_RegisterEhPh>
	while(config_readback != config_data){
 8000958:	e7e9      	b.n	800092e <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xfa>

	}

}
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000966:	b004      	add	sp, #16
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	080096a0 	.word	0x080096a0
 8000970:	40020400 	.word	0x40020400

08000974 <_ZN14communications5NRF2413Read_RegisterEhPh>:

void NRF24::Read_Register(uint8_t register_address, uint8_t* data){
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	460b      	mov	r3, r1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	72fb      	strb	r3, [r7, #11]

	static uint8_t command;
	command = this->R_REGISTER | register_address;
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <_ZN14communications5NRF2413Read_RegisterEhPh+0x4c>)
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	7013      	strb	r3, [r2, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f000 f8fd 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	230a      	movs	r3, #10
 8000994:	2201      	movs	r2, #1
 8000996:	490a      	ldr	r1, [pc, #40]	; (80009c0 <_ZN14communications5NRF2413Read_RegisterEhPh+0x4c>)
 8000998:	f004 fb51 	bl	800503e <HAL_SPI_Transmit>
 800099c:	4603      	mov	r3, r0
 800099e:	75fb      	strb	r3, [r7, #23]
	hal_status = HAL_SPI_Receive(this->spi, data, 1, (uint32_t)10);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	230a      	movs	r3, #10
 80009a6:	2201      	movs	r2, #1
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	f004 fc84 	bl	80052b6 <HAL_SPI_Receive>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]

	//deselect the comms by setting CSN high
	End_SPI();
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 f8fc 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>


}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000a6 	.word	0x200000a6

080009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>:

void NRF24::Write_Register(uint8_t register_address, uint8_t* data){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	460b      	mov	r3, r1
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	72fb      	strb	r3, [r7, #11]
	static uint8_t command;
	command = this->W_REGISTER | register_address;
 80009d2:	7afb      	ldrb	r3, [r7, #11]
 80009d4:	f043 0320 	orr.w	r3, r3, #32
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <_ZN14communications5NRF2414Write_RegisterEhPh+0x54>)
 80009dc:	701a      	strb	r2, [r3, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f8d2 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	230a      	movs	r3, #10
 80009ea:	2201      	movs	r2, #1
 80009ec:	490a      	ldr	r1, [pc, #40]	; (8000a18 <_ZN14communications5NRF2414Write_RegisterEhPh+0x54>)
 80009ee:	f004 fb26 	bl	800503e <HAL_SPI_Transmit>
 80009f2:	4603      	mov	r3, r0
 80009f4:	75fb      	strb	r3, [r7, #23]
	hal_status = HAL_SPI_Transmit(this->spi, data, 1, (uint32_t)10);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	230a      	movs	r3, #10
 80009fc:	2201      	movs	r2, #1
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f004 fb1d 	bl	800503e <HAL_SPI_Transmit>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]

	//deselect the comms by setting CSN high
	End_SPI();
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f000 f8d1 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>


}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000a7 	.word	0x200000a7

08000a1c <_ZN14communications5NRF2416Read_MB_RegisterEhPhh>:

void NRF24::Read_MB_Register(uint8_t register_address, uint8_t* buf, uint8_t len){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	461a      	mov	r2, r3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	72fb      	strb	r3, [r7, #11]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	72bb      	strb	r3, [r7, #10]

	static uint8_t command;
	command = this->R_REGISTER | register_address;
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x6c>)
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	7013      	strb	r3, [r2, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 f8a6 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	230a      	movs	r3, #10
 8000a42:	2201      	movs	r2, #1
 8000a44:	4910      	ldr	r1, [pc, #64]	; (8000a88 <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x6c>)
 8000a46:	f004 fafa 	bl	800503e <HAL_SPI_Transmit>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	72ba      	strb	r2, [r7, #10]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00b      	beq.n	8000a7a <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x5e>
		hal_status = HAL_SPI_Receive(this->spi, buf++, 1, (uint32_t)10);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	1c4b      	adds	r3, r1, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f004 fc21 	bl	80052b6 <HAL_SPI_Receive>
 8000a74:	4603      	mov	r3, r0
 8000a76:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000a78:	e7e9      	b.n	8000a4e <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x32>
	}

	//deselect the comms by setting CSN high
	End_SPI();
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 f898 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>



}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000a8 	.word	0x200000a8

08000a8c <_ZN14communications5NRF2417Write_MB_RegisterEhPhh>:


void NRF24::Write_MB_Register(uint8_t register_address, uint8_t* data, uint8_t len){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	72fb      	strb	r3, [r7, #11]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	72bb      	strb	r3, [r7, #10]

	static uint8_t command;
	command = this->W_REGISTER | register_address;
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x74>)
 8000aaa:	701a      	strb	r2, [r3, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 f86b 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4911      	ldr	r1, [pc, #68]	; (8000b00 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x74>)
 8000abc:	f004 fabf 	bl	800503e <HAL_SPI_Transmit>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000ac4:	7abb      	ldrb	r3, [r7, #10]
 8000ac6:	1e5a      	subs	r2, r3, #1
 8000ac8:	72ba      	strb	r2, [r7, #10]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bf14      	ite	ne
 8000ace:	2301      	movne	r3, #1
 8000ad0:	2300      	moveq	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00b      	beq.n	8000af0 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x64>
		hal_status = HAL_SPI_Transmit(this->spi, data++, 1, (uint32_t)10);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	1c4b      	adds	r3, r1, #1
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f004 faaa 	bl	800503e <HAL_SPI_Transmit>
 8000aea:	4603      	mov	r3, r0
 8000aec:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000aee:	e7e9      	b.n	8000ac4 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x38>
	}

	//deselect the comms by setting CSN high
	End_SPI();
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 f85d 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>


}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000a9 	.word	0x200000a9

08000b04 <_ZN14communications5NRF2416Set_Payload_SizeEh>:
		Read_Payload();
	}

}

void NRF24::Set_Payload_Size(uint8_t size){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]

	//5 total pipes to set to the correct size
	for(int i = 0; i < 6; i++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	dc0c      	bgt.n	8000b34 <_ZN14communications5NRF2416Set_Payload_SizeEh+0x30>
		Write_Register((uint8_t)(RX_PW_P0 + i), &size);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3311      	adds	r3, #17
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	1cfa      	adds	r2, r7, #3
 8000b24:	4619      	mov	r1, r3
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff4c 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>
	for(int i = 0; i < 6; i++){
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e7ef      	b.n	8000b14 <_ZN14communications5NRF2416Set_Payload_SizeEh+0x10>
	}

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZN14communications5NRF2413Set_Data_RateENS0_11nrf24_speedE>:
	//deselect the comms by setting CSN high
	End_SPI();

}

void NRF24::Set_Data_Rate(enum nrf24_speed s){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]

	uint8_t dr_low = (s & 0x02) >> 1;
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	085b      	lsrs	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
	uint8_t dr_high = s & 0x01;
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	73bb      	strb	r3, [r7, #14]
	uint8_t data = (dr_low << RF_DR_LOW_Pos) | (dr_high << RF_DR_HIGH_Pos);
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	015b      	lsls	r3, r3, #5
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	737b      	strb	r3, [r7, #13]
	Write_Register((uint8_t)RF_SETUP, &data);
 8000b70:	f107 030d 	add.w	r3, r7, #13
 8000b74:	461a      	mov	r2, r3
 8000b76:	2106      	movs	r1, #6
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff23 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <_ZN14communications5NRF249Begin_SPIEv>:

void NRF24::Begin_SPI(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	//bring CSN low to select the comms
	HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <_ZN14communications5NRF249Begin_SPIEv+0x24>)
 8000b98:	f002 f890 	bl	8002cbc <HAL_GPIO_WritePin>
	vTaskDelay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f007 fa01 	bl	8007fa4 <vTaskDelay>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40020400 	.word	0x40020400

08000bb0 <_ZN14communications5NRF247End_SPIEv>:
void NRF24::End_SPI(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	//deselect the comms by setting CSN high
	HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	4803      	ldr	r0, [pc, #12]	; (8000bcc <_ZN14communications5NRF247End_SPIEv+0x1c>)
 8000bc0:	f002 f87c 	bl	8002cbc <HAL_GPIO_WritePin>

}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <_ZN14communications5NRF248array_eqEPhS1_h>:
	}else{
		return false;
	}
}

bool NRF24::array_eq(uint8_t* arr1, uint8_t* arr2, uint8_t len){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	70fb      	strb	r3, [r7, #3]
	while(len--){
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	70fa      	strb	r2, [r7, #3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d010      	beq.n	8000c14 <_ZN14communications5NRF248array_eqEPhS1_h+0x44>
		if(*(arr1++) != *(arr2++)){
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	60ba      	str	r2, [r7, #8]
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	1c59      	adds	r1, r3, #1
 8000bfe:	6079      	str	r1, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0e6      	beq.n	8000bde <_ZN14communications5NRF248array_eqEPhS1_h+0xe>
			return false;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e000      	b.n	8000c16 <_ZN14communications5NRF248array_eqEPhS1_h+0x46>
		}
	}

	return true;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_ZN7control2PIC1Effff>:
#include "../state/trajectories.hpp"
#include "../model/models.hpp"

namespace control{

PI::PI(float sp, float dt, float Kp, float Ki){
 8000c22:	b480      	push	{r7}
 8000c24:	b087      	sub	sp, #28
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6178      	str	r0, [r7, #20]
 8000c2a:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c2e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000c32:	ed87 1a02 	vstr	s2, [r7, #8]
 8000c36:	edc7 1a01 	vstr	s3, [r7, #4]
		this->setpoint = sp;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	601a      	str	r2, [r3, #0]
		this->dt = dt;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]
		this->Kp = Kp;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	609a      	str	r2, [r3, #8]
		this->Ki = Ki;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	60da      	str	r2, [r3, #12]
}
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	4618      	mov	r0, r3
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_ZN7control2PI10calcOutputEf>:

float PI::calcOutput(float stateEstimate){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	ed87 0a00 	vstr	s0, [r7]
		static float error = 0;
		static float ierror = 0;

		error = this->setpoint - stateEstimate;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	ed93 7a00 	vldr	s14, [r3]
 8000c72:	edd7 7a00 	vldr	s15, [r7]
 8000c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <_ZN7control2PI10calcOutputEf+0xa8>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
		ierror += this->dt * error;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <_ZN7control2PI10calcOutputEf+0xa8>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000c9c:	edc3 7a00 	vstr	s15, [r3]
		if(ierror > 10){
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb2:	dd03      	ble.n	8000cbc <_ZN7control2PI10calcOutputEf+0x5c>
			ierror = 10;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <_ZN7control2PI10calcOutputEf+0xb0>)
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e00c      	b.n	8000cd6 <_ZN7control2PI10calcOutputEf+0x76>
		}
		else if(ierror < -10){
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cce:	d502      	bpl.n	8000cd6 <_ZN7control2PI10calcOutputEf+0x76>
			ierror = -10;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <_ZN7control2PI10calcOutputEf+0xb4>)
 8000cd4:	601a      	str	r2, [r3, #0]
		}
		return (this->Kp * error + this->Ki * ierror);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <_ZN7control2PI10calcOutputEf+0xa8>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200000ac 	.word	0x200000ac
 8000d0c:	200000b0 	.word	0x200000b0
 8000d10:	41200000 	.word	0x41200000
 8000d14:	c1200000 	.word	0xc1200000

08000d18 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <vApplicationGetIdleTaskMemory+0x30>)
 8000d2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2280      	movs	r2, #128	; 0x80
 8000d34:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000b4 	.word	0x200000b4
 8000d48:	20000168 	.word	0x20000168

08000d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	b0cf      	sub	sp, #316	; 0x13c
 8000d50:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d52:	f001 fce3 	bl	800271c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d56:	f000 f8f3 	bl	8000f40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5a:	f000 fb49 	bl	80013f0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000d5e:	f000 fb19 	bl	8001394 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000d62:	f000 f987 	bl	8001074 <_ZL12MX_I2C1_Initv>
  MX_SPI2_Init();
 8000d66:	f000 f9b9 	bl	80010dc <_ZL12MX_SPI2_Initv>
  MX_TIM8_Init();
 8000d6a:	f000 f9f3 	bl	8001154 <_ZL12MX_TIM8_Initv>
  MX_UART4_Init();
 8000d6e:	f000 fae3 	bl	8001338 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */

  I2C_HandleTypeDef* phi2c1 = &hi2c1;
 8000d72:	4b68      	ldr	r3, [pc, #416]	; (8000f14 <main+0x1c8>)
 8000d74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  I2C_HandleTypeDef& rhi2c1 = hi2c1;
 8000d78:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <main+0x1c8>)
 8000d7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  /* USER CODE END 2 */

  //required devices
  sensors::BNO055 imu(rhi2c1);
 8000d7e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000d82:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fea6 	bl	8001ad8 <_ZN7sensors6BNO055C1ER17I2C_HandleTypeDef>
  actuators::BLHelis motors(htim8);
 8000d8c:	4e62      	ldr	r6, [pc, #392]	; (8000f18 <main+0x1cc>)
 8000d8e:	f107 0cd4 	add.w	ip, r7, #212	; 0xd4
 8000d92:	466d      	mov	r5, sp
 8000d94:	f106 040c 	add.w	r4, r6, #12
 8000d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000da8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000dac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000db0:	4660      	mov	r0, ip
 8000db2:	f7ff fbaf 	bl	8000514 <_ZN9actuators7BLHelisC1E17TIM_HandleTypeDef>
  communications::NRF24 comms(hspi2);
 8000db6:	4c59      	ldr	r4, [pc, #356]	; (8000f1c <main+0x1d0>)
 8000db8:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 8000dbc:	4668      	mov	r0, sp
 8000dbe:	f104 030c 	add.w	r3, r4, #12
 8000dc2:	224c      	movs	r2, #76	; 0x4c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f008 fb87 	bl	80094d8 <memcpy>
 8000dca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000dce:	4628      	mov	r0, r5
 8000dd0:	f7ff fd30 	bl	8000834 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef>
  threads::actuatorThreadArgs actuatorArgs;
  threads::sensorThreadArgs sensorArgs;
  threads::initializerThreadArgs initializerArgs;

  //create the mutexes
  SemaphoreHandle_t xSharedStateMutex = xSemaphoreCreateMutex();
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f006 fb98 	bl	800750a <xQueueCreateMutex>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
  SemaphoreHandle_t xSharedOutputMutex = xSemaphoreCreateMutex();
 8000dde:	2001      	movs	r0, #1
 8000de0:	f006 fb93 	bl	800750a <xQueueCreateMutex>
 8000de4:	4603      	mov	r3, r0
 8000de6:	65bb      	str	r3, [r7, #88]	; 0x58
  SemaphoreHandle_t xInitializerMutex = xSemaphoreCreateMutex();
 8000de8:	2001      	movs	r0, #1
 8000dea:	f006 fb8e 	bl	800750a <xQueueCreateMutex>
 8000dee:	4603      	mov	r3, r0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  TaskHandle_t xInitializerThreadHandle;
  BaseType_t xRet;


  //open the mutexes
  xSemaphoreGive(xSharedStateMutex);
 8000df2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000df4:	2300      	movs	r3, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f006 fb9f 	bl	800753c <xQueueGenericSend>
  xSemaphoreGive(xSharedOutputMutex);
 8000dfe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000e00:	2300      	movs	r3, #0
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	f006 fb99 	bl	800753c <xQueueGenericSend>
  xSemaphoreGive(xInitializerMutex);
 8000e0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	f006 fb93 	bl	800753c <xQueueGenericSend>

  //controller thread arguments
  controllerArgs.pxSharedOutputMutex = &xSharedOutputMutex;
 8000e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  controllerArgs.pxSharedStateMutex = &xSharedStateMutex;
 8000e1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  controllerArgs.state = &sharedState;
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  controllerArgs.output = &sharedOutput;
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  controllerArgs.pxInitializerMutex = &xInitializerMutex;
 8000e36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  //sensor thread arguments
  sensorArgs.state = &sharedState;
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	677b      	str	r3, [r7, #116]	; 0x74
  sensorArgs.pxSharedStateMutex = &xSharedStateMutex;
 8000e44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e48:	67fb      	str	r3, [r7, #124]	; 0x7c
  sensorArgs.pxInitializerMutex = &xInitializerMutex;
 8000e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  //actuator thread arguments
  actuatorArgs.pxSharedOutputMutex = &xSharedOutputMutex;
 8000e52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  actuatorArgs.motors = &motors;
 8000e5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  actuatorArgs.output = &sharedOutput;
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  actuatorArgs.pxInitializerMutex = &xInitializerMutex;
 8000e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  //initializer thread arguments
  initializerArgs.pxIMU = &imu;
 8000e72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e76:	663b      	str	r3, [r7, #96]	; 0x60
  initializerArgs.pxComms = &comms;
 8000e78:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
  initializerArgs.pxMotors = &motors;
 8000e7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e82:	667b      	str	r3, [r7, #100]	; 0x64
  initializerArgs.pxInitializerMutex = &xInitializerMutex;
 8000e84:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e88:	66fb      	str	r3, [r7, #108]	; 0x6c
  initializerArgs.pxInitializerThreadHandle = &xInitializerThreadHandle;
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	673b      	str	r3, [r7, #112]	; 0x70

  //create all tasks
  xRet = xTaskCreate(threads::initializerThread,
 8000e8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	2306      	movs	r3, #6
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea0:	491f      	ldr	r1, [pc, #124]	; (8000f20 <main+0x1d4>)
 8000ea2:	4820      	ldr	r0, [pc, #128]	; (8000f24 <main+0x1d8>)
 8000ea4:	f006 feb3 	bl	8007c0e <xTaskCreate>
 8000ea8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
					 1024,
					 (void*)&initializerArgs,
					 configMAX_PRIORITIES-1, //highest prio, will run first
					 &xInitializerThreadHandle);

  xRet = xTaskCreate(threads::sensorThread,
 8000eac:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ec0:	4919      	ldr	r1, [pc, #100]	; (8000f28 <main+0x1dc>)
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <main+0x1e0>)
 8000ec4:	f006 fea3 	bl	8007c0e <xTaskCreate>
 8000ec8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  	  	  			 1024,
  	  	  			 (void*)&sensorArgs,
  	  	  			 configMAX_PRIORITIES-2,
  	  	  			 &xSensorThreadHandle);

  xRet = xTaskCreate(threads::controllerThread,
 8000ecc:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4613      	mov	r3, r2
 8000edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee0:	4913      	ldr	r1, [pc, #76]	; (8000f30 <main+0x1e4>)
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <main+0x1e8>)
 8000ee4:	f006 fe93 	bl	8007c0e <xTaskCreate>
 8000ee8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  					 1024,
  					 (void*)&controllerArgs,
  					 configMAX_PRIORITIES-2,
  					 &xControllerThreadHandle);

  xRet = xTaskCreate(threads::actuatorThread,
 8000eec:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	4613      	mov	r3, r2
 8000efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f00:	490d      	ldr	r1, [pc, #52]	; (8000f38 <main+0x1ec>)
 8000f02:	480e      	ldr	r0, [pc, #56]	; (8000f3c <main+0x1f0>)
 8000f04:	f006 fe83 	bl	8007c0e <xTaskCreate>
 8000f08:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  	  	  			 (void*)&actuatorArgs,
  					 configMAX_PRIORITIES-2,
  	  	  			 &xActuatorThreadHandle);

  //start the RTOS
  vTaskStartScheduler();
 8000f0c:	f007 f87e 	bl	800800c <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <main+0x1c4>
 8000f12:	bf00      	nop
 8000f14:	20000368 	.word	0x20000368
 8000f18:	20000414 	.word	0x20000414
 8000f1c:	200003bc 	.word	0x200003bc
 8000f20:	080096a8 	.word	0x080096a8
 8000f24:	08002511 	.word	0x08002511
 8000f28:	080096bc 	.word	0x080096bc
 8000f2c:	08002625 	.word	0x08002625
 8000f30:	080096cc 	.word	0x080096cc
 8000f34:	0800236d 	.word	0x0800236d
 8000f38:	080096e0 	.word	0x080096e0
 8000f3c:	080022e9 	.word	0x080022e9

08000f40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0ac      	sub	sp, #176	; 0xb0
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f4a:	2234      	movs	r2, #52	; 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 fad0 	bl	80094f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	225c      	movs	r2, #92	; 0x5c
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f008 fac1 	bl	80094f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	4b3d      	ldr	r3, [pc, #244]	; (800106c <_Z18SystemClock_Configv+0x12c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a3c      	ldr	r2, [pc, #240]	; (800106c <_Z18SystemClock_Configv+0x12c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <_Z18SystemClock_Configv+0x12c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <_Z18SystemClock_Configv+0x130>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f9a:	4a35      	ldr	r2, [pc, #212]	; (8001070 <_Z18SystemClock_Configv+0x130>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <_Z18SystemClock_Configv+0x130>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fce:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 fcff 	bl	80049f0 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8001002:	f000 faa7 	bl	8001554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2302      	movs	r3, #2
 800100c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001020:	2102      	movs	r1, #2
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fe3e 	bl	8003ca4 <HAL_RCC_ClockConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	bf14      	ite	ne
 800102e:	2301      	movne	r3, #1
 8001030:	2300      	moveq	r3, #0
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8001038:	f000 fa8c 	bl	8001554 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800103c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001040:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001042:	2300      	movs	r3, #0
 8001044:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4618      	mov	r0, r3
 800104c:	f002 ff76 	bl	8003f3c <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf14      	ite	ne
 8001056:	2301      	movne	r3, #1
 8001058:	2300      	moveq	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <_Z18SystemClock_Configv+0x124>
  {
    Error_Handler();
 8001060:	f000 fa78 	bl	8001554 <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	37b0      	adds	r7, #176	; 0xb0
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40007000 	.word	0x40007000

08001074 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800107a:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <_ZL12MX_I2C1_Initv+0x60>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001080:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <_ZL12MX_I2C1_Initv+0x64>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 8001092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b0:	4807      	ldr	r0, [pc, #28]	; (80010d0 <_ZL12MX_I2C1_Initv+0x5c>)
 80010b2:	f001 fe37 	bl	8002d24 <HAL_I2C_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80010c6:	f000 fa45 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000368 	.word	0x20000368
 80010d4:	40005400 	.word	0x40005400
 80010d8:	00061a80 	.word	0x00061a80

080010dc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 80010e2:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <_ZL12MX_SPI2_Initv+0x74>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 80010e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 8001108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 8001128:	220a      	movs	r2, #10
 800112a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <_ZL12MX_SPI2_Initv+0x70>)
 800112e:	f003 fefd 	bl	8004f2c <HAL_SPI_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf14      	ite	ne
 8001138:	2301      	movne	r3, #1
 800113a:	2300      	moveq	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8001142:	f000 fa07 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200003bc 	.word	0x200003bc
 8001150:	40003800 	.word	0x40003800

08001154 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b096      	sub	sp, #88	; 0x58
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	2220      	movs	r2, #32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f008 f9b1 	bl	80094f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001192:	4b67      	ldr	r3, [pc, #412]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001194:	4a67      	ldr	r2, [pc, #412]	; (8001334 <_ZL12MX_TIM8_Initv+0x1e0>)
 8001196:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 26;
 8001198:	4b65      	ldr	r3, [pc, #404]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 800119a:	221a      	movs	r2, #26
 800119c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b64      	ldr	r3, [pc, #400]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 62418;
 80011a4:	4b62      	ldr	r3, [pc, #392]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011a6:	f24f 32d2 	movw	r2, #62418	; 0xf3d2
 80011aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b60      	ldr	r3, [pc, #384]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011b2:	4b5f      	ldr	r3, [pc, #380]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b5d      	ldr	r3, [pc, #372]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011be:	485c      	ldr	r0, [pc, #368]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011c0:	f004 fc5c 	bl	8005a7c <HAL_TIM_Base_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 80011d4:	f000 f9be 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011e2:	4619      	mov	r1, r3
 80011e4:	4852      	ldr	r0, [pc, #328]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011e6:	f005 f85d 	bl	80062a4 <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf14      	ite	ne
 80011f0:	2301      	movne	r3, #1
 80011f2:	2300      	moveq	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 80011fa:	f000 f9ab 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011fe:	484c      	ldr	r0, [pc, #304]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001200:	f004 fd64 	bl	8005ccc <HAL_TIM_PWM_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 8001214:	f000 f99e 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001220:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001224:	4619      	mov	r1, r3
 8001226:	4842      	ldr	r0, [pc, #264]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001228:	f005 fc3c 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf14      	ite	ne
 8001232:	2301      	movne	r3, #1
 8001234:	2300      	moveq	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 800123c:	f000 f98a 	bl	8001554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4832      	ldr	r0, [pc, #200]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001266:	f004 ff5b 	bl	8006120 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <_ZL12MX_TIM8_Initv+0x12a>
  {
    Error_Handler();
 800127a:	f000 f96b 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	2204      	movs	r2, #4
 8001284:	4619      	mov	r1, r3
 8001286:	482a      	ldr	r0, [pc, #168]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001288:	f004 ff4a 	bl	8006120 <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <_ZL12MX_TIM8_Initv+0x14c>
  {
    Error_Handler();
 800129c:	f000 f95a 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2208      	movs	r2, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	4821      	ldr	r0, [pc, #132]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80012aa:	f004 ff39 	bl	8006120 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	bf14      	ite	ne
 80012b4:	2301      	movne	r3, #1
 80012b6:	2300      	moveq	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_ZL12MX_TIM8_Initv+0x16e>
  {
    Error_Handler();
 80012be:	f000 f949 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	220c      	movs	r2, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4819      	ldr	r0, [pc, #100]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 80012cc:	f004 ff28 	bl	8006120 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <_ZL12MX_TIM8_Initv+0x190>
  {
    Error_Handler();
 80012e0:	f000 f938 	bl	8001554 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001308:	f005 fc48 	bl	8006b9c <HAL_TIMEx_ConfigBreakDeadTime>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	bf14      	ite	ne
 8001312:	2301      	movne	r3, #1
 8001314:	2300      	moveq	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <_ZL12MX_TIM8_Initv+0x1cc>
  {
    Error_Handler();
 800131c:	f000 f91a 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001322:	f000 fa47 	bl	80017b4 <HAL_TIM_MspPostInit>

}
 8001326:	bf00      	nop
 8001328:	3758      	adds	r7, #88	; 0x58
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000414 	.word	0x20000414
 8001334:	40010400 	.word	0x40010400

08001338 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 800133e:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_ZL13MX_UART4_Initv+0x58>)
 8001340:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <_ZL13MX_UART4_Initv+0x54>)
 8001370:	f005 fc7a 	bl	8006c68 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	bf14      	ite	ne
 800137a:	2301      	movne	r3, #1
 800137c:	2300      	moveq	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8001384:	f000 f8e6 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200004a4 	.word	0x200004a4
 8001390:	40004c00 	.word	0x40004c00

08001394 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800139a:	4a14      	ldr	r2, [pc, #80]	; (80013ec <_ZL19MX_USART2_UART_Initv+0x58>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013cc:	f005 fc4c 	bl	8006c68 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf14      	ite	ne
 80013d6:	2301      	movne	r3, #1
 80013d8:	2300      	moveq	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80013e0:	f000 f8b8 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200004e8 	.word	0x200004e8
 80013ec:	40004400 	.word	0x40004400

080013f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a36      	ldr	r2, [pc, #216]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a28      	ldr	r2, [pc, #160]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <_ZL12MX_GPIO_Initv+0x114>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	4823      	ldr	r0, [pc, #140]	; (8001508 <_ZL12MX_GPIO_Initv+0x118>)
 800147c:	f001 fc1e 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001486:	4821      	ldr	r0, [pc, #132]	; (800150c <_ZL12MX_GPIO_Initv+0x11c>)
 8001488:	f001 fc18 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001492:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	481b      	ldr	r0, [pc, #108]	; (8001510 <_ZL12MX_GPIO_Initv+0x120>)
 80014a4:	f001 fa5e 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014a8:	2320      	movs	r3, #32
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4812      	ldr	r0, [pc, #72]	; (8001508 <_ZL12MX_GPIO_Initv+0x118>)
 80014c0:	f001 fa50 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_RX_DR_Pin */
  GPIO_InitStruct.Pin = NRF24_RX_DR_Pin;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_RX_DR_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <_ZL12MX_GPIO_Initv+0x118>)
 80014da:	f001 fa43 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80014de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <_ZL12MX_GPIO_Initv+0x11c>)
 80014f8:	f001 fa34 	bl	8002964 <HAL_GPIO_Init>

}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800

08001514 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM10){
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d104      	bne.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  counter++;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800152e:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 800153a:	f001 f911 	bl	8002760 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40014400 	.word	0x40014400
 800154c:	2000052c 	.word	0x2000052c
 8001550:	40001000 	.word	0x40001000

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_MspInit+0x54>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_MspInit+0x54>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x54>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_MspInit+0x54>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_MspInit+0x54>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_MspInit+0x54>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	210f      	movs	r1, #15
 80015a2:	f06f 0001 	mvn.w	r0, #1
 80015a6:	f001 f9b3 	bl	8002910 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <HAL_I2C_MspInit+0x84>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d12b      	bne.n	8001632 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_I2C_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015f6:	23c0      	movs	r3, #192	; 0xc0
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fa:	2312      	movs	r3, #18
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001606:	2304      	movs	r3, #4
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_I2C_MspInit+0x8c>)
 8001612:	f001 f9a7 	bl	8002964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_I2C_MspInit+0x88>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a08      	ldr	r2, [pc, #32]	; (8001640 <HAL_I2C_MspInit+0x88>)
 8001620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_I2C_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40005400 	.word	0x40005400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400

08001648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a30      	ldr	r2, [pc, #192]	; (8001728 <HAL_SPI_MspInit+0xe0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d15a      	bne.n	8001720 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_SPI_MspInit+0xe4>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a2e      	ldr	r2, [pc, #184]	; (800172c <HAL_SPI_MspInit+0xe4>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_SPI_MspInit+0xe4>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_SPI_MspInit+0xe4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a27      	ldr	r2, [pc, #156]	; (800172c <HAL_SPI_MspInit+0xe4>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_SPI_MspInit+0xe4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_SPI_MspInit+0xe4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <HAL_SPI_MspInit+0xe4>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_SPI_MspInit+0xe4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016be:	2302      	movs	r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80016ce:	2307      	movs	r3, #7
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4815      	ldr	r0, [pc, #84]	; (8001730 <HAL_SPI_MspInit+0xe8>)
 80016da:	f001 f943 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016de:	2304      	movs	r3, #4
 80016e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016ee:	2305      	movs	r3, #5
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <HAL_SPI_MspInit+0xe8>)
 80016fa:	f001 f933 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001710:	2305      	movs	r3, #5
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <HAL_SPI_MspInit+0xec>)
 800171c:	f001 f922 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40003800 	.word	0x40003800
 800172c:	40023800 	.word	0x40023800
 8001730:	40020800 	.word	0x40020800
 8001734:	40020400 	.word	0x40020400

08001738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <HAL_TIM_Base_MspInit+0x70>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10e      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_TIM_Base_MspInit+0x74>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_TIM_Base_MspInit+0x74>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_TIM_Base_MspInit+0x74>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001766:	e01a      	b.n	800179e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_TIM_Base_MspInit+0x78>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d115      	bne.n	800179e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_TIM_Base_MspInit+0x74>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <HAL_TIM_Base_MspInit+0x74>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_TIM_Base_MspInit+0x74>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	2019      	movs	r0, #25
 8001794:	f001 f8bc 	bl	8002910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001798:	2019      	movs	r0, #25
 800179a:	f001 f8d5 	bl	8002948 <HAL_NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40010400 	.word	0x40010400
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40014400 	.word	0x40014400

080017b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_TIM_MspPostInit+0x68>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d11e      	bne.n	8001814 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_TIM_MspPostInit+0x6c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_TIM_MspPostInit+0x6c>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_TIM_MspPostInit+0x6c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80017f2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80017f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001804:	2303      	movs	r3, #3
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_TIM_MspPostInit+0x70>)
 8001810:	f001 f8a8 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40010400 	.word	0x40010400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020800 	.word	0x40020800

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a41      	ldr	r2, [pc, #260]	; (800194c <HAL_UART_MspInit+0x124>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d14b      	bne.n	80018e2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	4b40      	ldr	r3, [pc, #256]	; (8001950 <HAL_UART_MspInit+0x128>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a3f      	ldr	r2, [pc, #252]	; (8001950 <HAL_UART_MspInit+0x128>)
 8001854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b3d      	ldr	r3, [pc, #244]	; (8001950 <HAL_UART_MspInit+0x128>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_UART_MspInit+0x128>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a38      	ldr	r2, [pc, #224]	; (8001950 <HAL_UART_MspInit+0x128>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b36      	ldr	r3, [pc, #216]	; (8001950 <HAL_UART_MspInit+0x128>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_UART_MspInit+0x128>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a31      	ldr	r2, [pc, #196]	; (8001950 <HAL_UART_MspInit+0x128>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_UART_MspInit+0x128>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800189e:	2302      	movs	r3, #2
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018ae:	2308      	movs	r3, #8
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	4826      	ldr	r0, [pc, #152]	; (8001954 <HAL_UART_MspInit+0x12c>)
 80018ba:	f001 f853 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018d0:	2308      	movs	r3, #8
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	481f      	ldr	r0, [pc, #124]	; (8001958 <HAL_UART_MspInit+0x130>)
 80018dc:	f001 f842 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018e0:	e030      	b.n	8001944 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1d      	ldr	r2, [pc, #116]	; (800195c <HAL_UART_MspInit+0x134>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d12b      	bne.n	8001944 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_UART_MspInit+0x128>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a16      	ldr	r2, [pc, #88]	; (8001950 <HAL_UART_MspInit+0x128>)
 80018f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_UART_MspInit+0x128>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_UART_MspInit+0x128>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_UART_MspInit+0x128>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_UART_MspInit+0x128>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001924:	230c      	movs	r3, #12
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001934:	2307      	movs	r3, #7
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <HAL_UART_MspInit+0x12c>)
 8001940:	f001 f810 	bl	8002964 <HAL_GPIO_Init>
}
 8001944:	bf00      	nop
 8001946:	3730      	adds	r7, #48	; 0x30
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40004c00 	.word	0x40004c00
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020800 	.word	0x40020800
 800195c:	40004400 	.word	0x40004400

08001960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_InitTick+0xe4>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a32      	ldr	r2, [pc, #200]	; (8001a44 <HAL_InitTick+0xe4>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_InitTick+0xe4>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800198c:	f107 0210 	add.w	r2, r7, #16
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fa9e 	bl	8003ed8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019a6:	f002 fa6f 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 80019aa:	6378      	str	r0, [r7, #52]	; 0x34
 80019ac:	e004      	b.n	80019b8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019ae:	f002 fa6b 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 80019b2:	4603      	mov	r3, r0
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_InitTick+0xe8>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	3b01      	subs	r3, #1
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_InitTick+0xec>)
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_InitTick+0xf0>)
 80019ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_InitTick+0xec>)
 80019ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <HAL_InitTick+0xec>)
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_InitTick+0xec>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_InitTick+0xec>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_InitTick+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019ec:	4817      	ldr	r0, [pc, #92]	; (8001a4c <HAL_InitTick+0xec>)
 80019ee:	f004 f845 	bl	8005a7c <HAL_TIM_Base_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d11b      	bne.n	8001a38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a00:	4812      	ldr	r0, [pc, #72]	; (8001a4c <HAL_InitTick+0xec>)
 8001a02:	f004 f8f3 	bl	8005bec <HAL_TIM_Base_Start_IT>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d111      	bne.n	8001a38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a14:	2036      	movs	r0, #54	; 0x36
 8001a16:	f000 ff97 	bl	8002948 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d808      	bhi.n	8001a32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	2036      	movs	r0, #54	; 0x36
 8001a26:	f000 ff73 	bl	8002910 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_InitTick+0xf4>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e002      	b.n	8001a38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3738      	adds	r7, #56	; 0x38
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	20000530 	.word	0x20000530
 8001a50:	40001000 	.word	0x40001000
 8001a54:	20000010 	.word	0x20000010

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a8a:	f004 fa41 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000045c 	.word	0x2000045c

08001a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <TIM6_DAC_IRQHandler+0x10>)
 8001a9e:	f004 fa37 	bl	8005f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000530 	.word	0x20000530

08001aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <SystemInit+0x28>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <SystemInit+0x28>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SystemInit+0x28>)
 8001ac2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <_ZN7sensors6BNO055C1ER17I2C_HandleTypeDef>:
#include "bno055.hpp"
#include "../state/state.hpp"

namespace sensors{

BNO055::BNO055(I2C_HandleTypeDef& rhi2c1) : i2c(rhi2c1){}
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <_ZN7sensors6BNO05512configSensorEv>:

bool BNO055::configSensor(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	6078      	str	r0, [r7, #4]

	static uint8_t op_mode = IMU_OP_MODE;

	HAL_StatusTypeDef hal_status = HAL_I2C_Mem_Write((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_CONFIG_R, I2C_MEMADD_SIZE_8BIT, &op_mode, I2C_MEMADD_SIZE_8BIT, (uint32_t)1000);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b08:	9302      	str	r3, [sp, #8]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <_ZN7sensors6BNO05512configSensorEv+0x48>)
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2301      	movs	r3, #1
 8001b14:	223d      	movs	r2, #61	; 0x3d
 8001b16:	2150      	movs	r1, #80	; 0x50
 8001b18:	f001 fa48 	bl	8002fac <HAL_I2C_Mem_Write>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]


	if(hal_status == HAL_BUSY){
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d104      	bne.n	8001b30 <_ZN7sensors6BNO05512configSensorEv+0x38>

		//i2c dead lock, BNO055 is holding the bus
		this->I2C1_ClearBusyFlagErratum();
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fab6 	bl	8002098 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv>
		return false;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e003      	b.n	8001b38 <_ZN7sensors6BNO05512configSensorEv+0x40>

	}

	//add in a delay to allow for the sensor to properly switch operating modes
	vTaskDelay(100);
 8001b30:	2064      	movs	r0, #100	; 0x64
 8001b32:	f006 fa37 	bl	8007fa4 <vTaskDelay>

	return true;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000000c 	.word	0x2000000c

08001b44 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv>:

bool BNO055::Read_IMU_Calib_Status(void){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	6078      	str	r0, [r7, #4]
	static uint16_t calib_stat_address = 0x35;
	static uint8_t IMU_full_calib = 0x3C;
	static uint8_t calib;
	static HAL_StatusTypeDef hal_status;

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_CALIB_STAT_R, I2C_MEMADD_SIZE_8BIT, &calib, I2C_MEMADD_SIZE_8BIT, (uint32_t)1000000);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x4c>)
 8001b52:	9302      	str	r3, [sp, #8]
 8001b54:	2301      	movs	r3, #1
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x50>)
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2235      	movs	r2, #53	; 0x35
 8001b60:	2150      	movs	r1, #80	; 0x50
 8001b62:	f001 fb1d 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x54>)
 8001b6c:	701a      	strb	r2, [r3, #0]

	if(hal_status != HAL_OK){
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x54>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x36>

		return false;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e006      	b.n	8001b88 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x44>

	}
	else{

		//value of 3C means full calibration
		if(calib == IMU_FULL_CALIB){
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x50>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b3c      	cmp	r3, #60	; 0x3c
 8001b80:	d101      	bne.n	8001b86 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x42>

			return true;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x44>

		}
		else{

			return false;
 8001b86:	2300      	movs	r3, #0

		}
	}

}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	000f4240 	.word	0x000f4240
 8001b94:	20000578 	.word	0x20000578
 8001b98:	20000579 	.word	0x20000579

08001b9c <_ZN7sensors6BNO05517Read_Calib_ParamsEv>:
	}

}


bool BNO055::Read_Calib_Params(void){
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	; 0x30
 8001ba0:	af04      	add	r7, sp, #16
 8001ba2:	6078      	str	r0, [r7, #4]
	static uint8_t axo_lsb, axo_msb, ayo_lsb, ayo_msb, azo_lsb, azo_msb;
	static uint8_t gxo_lsb, gxo_msb, gyo_lsb, gyo_msb, gzo_lsb, gzo_msb;
	static HAL_StatusTypeDef hal_status;


	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_X_LSB_R, I2C_MEMADD_SIZE_8BIT, &axo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	2319      	movs	r3, #25
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	2301      	movs	r3, #1
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	4b8c      	ldr	r3, [pc, #560]	; (8001de4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x248>)
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	2255      	movs	r2, #85	; 0x55
 8001bb8:	2150      	movs	r1, #80	; 0x50
 8001bba:	f001 faf1 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001bc4:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_X_MSB_R, I2C_MEMADD_SIZE_8BIT, &axo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	2319      	movs	r3, #25
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	4b86      	ldr	r3, [pc, #536]	; (8001dec <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x250>)
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2256      	movs	r2, #86	; 0x56
 8001bda:	2150      	movs	r1, #80	; 0x50
 8001bdc:	f001 fae0 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001be0:	4603      	mov	r3, r0
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001be6:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Y_LSB_R, I2C_MEMADD_SIZE_8BIT, &ayo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	2319      	movs	r3, #25
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	4b7e      	ldr	r3, [pc, #504]	; (8001df0 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x254>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	2257      	movs	r2, #87	; 0x57
 8001bfc:	2150      	movs	r1, #80	; 0x50
 8001bfe:	f001 facf 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c08:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Y_MSB_R, I2C_MEMADD_SIZE_8BIT, &ayo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	2319      	movs	r3, #25
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	4b77      	ldr	r3, [pc, #476]	; (8001df4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x258>)
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	2258      	movs	r2, #88	; 0x58
 8001c1e:	2150      	movs	r1, #80	; 0x50
 8001c20:	f001 fabe 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c2a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Z_LSB_R, I2C_MEMADD_SIZE_8BIT, &azo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	2319      	movs	r3, #25
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	2301      	movs	r3, #1
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x25c>)
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	2259      	movs	r2, #89	; 0x59
 8001c40:	2150      	movs	r1, #80	; 0x50
 8001c42:	f001 faad 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c4c:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Z_MSB_R, I2C_MEMADD_SIZE_8BIT, &azo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	2319      	movs	r3, #25
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	2301      	movs	r3, #1
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	4b68      	ldr	r3, [pc, #416]	; (8001dfc <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x260>)
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2301      	movs	r3, #1
 8001c60:	2260      	movs	r2, #96	; 0x60
 8001c62:	2150      	movs	r1, #80	; 0x50
 8001c64:	f001 fa9c 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c6e:	701a      	strb	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_X_LSB_R, I2C_MEMADD_SIZE_8BIT, &gxo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	2319      	movs	r3, #25
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	4b60      	ldr	r3, [pc, #384]	; (8001e00 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x264>)
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2301      	movs	r3, #1
 8001c82:	2261      	movs	r2, #97	; 0x61
 8001c84:	2150      	movs	r1, #80	; 0x50
 8001c86:	f001 fa8b 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c90:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_X_MSB_R, I2C_MEMADD_SIZE_8BIT, &gxo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	2319      	movs	r3, #25
 8001c98:	9302      	str	r3, [sp, #8]
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x268>)
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	2262      	movs	r2, #98	; 0x62
 8001ca6:	2150      	movs	r1, #80	; 0x50
 8001ca8:	f001 fa7a 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001cb2:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Y_LSB_R, I2C_MEMADD_SIZE_8BIT, &gyo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	2319      	movs	r3, #25
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	4b51      	ldr	r3, [pc, #324]	; (8001e08 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x26c>)
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2263      	movs	r2, #99	; 0x63
 8001cc8:	2150      	movs	r1, #80	; 0x50
 8001cca:	f001 fa69 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b45      	ldr	r3, [pc, #276]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001cd4:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Y_MSB_R, I2C_MEMADD_SIZE_8BIT, &gyo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	2319      	movs	r3, #25
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x270>)
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	2264      	movs	r2, #100	; 0x64
 8001cea:	2150      	movs	r1, #80	; 0x50
 8001cec:	f001 fa58 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001cf6:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Z_LSB_R, I2C_MEMADD_SIZE_8BIT, &gzo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	2319      	movs	r3, #25
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2301      	movs	r3, #1
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x274>)
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	2265      	movs	r2, #101	; 0x65
 8001d0c:	2150      	movs	r1, #80	; 0x50
 8001d0e:	f001 fa47 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001d18:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Z_MSB_R, I2C_MEMADD_SIZE_8BIT, &gzo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	2319      	movs	r3, #25
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	2301      	movs	r3, #1
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x278>)
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	2266      	movs	r2, #102	; 0x66
 8001d2e:	2150      	movs	r1, #80	; 0x50
 8001d30:	f001 fa36 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001d3a:	701a      	strb	r2, [r3, #0]

	uint16_t axo = (axo_msb << 8) | axo_lsb;
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x250>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x248>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	83fb      	strh	r3, [r7, #30]
	uint16_t ayo = (ayo_msb << 8) | ayo_lsb;
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x258>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	b21a      	sxth	r2, r3
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x254>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b21b      	sxth	r3, r3
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	b21b      	sxth	r3, r3
 8001d62:	83bb      	strh	r3, [r7, #28]
	uint16_t azo = (azo_msb << 8) | azo_lsb;
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x260>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x25c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	837b      	strh	r3, [r7, #26]

	uint16_t gxo = (gxo_msb << 8) | gxo_lsb;
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x268>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x264>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b21b      	sxth	r3, r3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	833b      	strh	r3, [r7, #24]
	uint16_t gyo = (gyo_msb << 8) | gyo_lsb;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x270>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b21a      	sxth	r2, r3
 8001d94:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x26c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	82fb      	strh	r3, [r7, #22]
	uint16_t gzo = (gzo_msb << 8) | gzo_lsb;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x278>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x274>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b21b      	sxth	r3, r3
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	82bb      	strh	r3, [r7, #20]

	uint16_t offsets[6];
	offsets[0] = axo;
 8001db4:	8bfb      	ldrh	r3, [r7, #30]
 8001db6:	813b      	strh	r3, [r7, #8]
	offsets[1] = ayo;
 8001db8:	8bbb      	ldrh	r3, [r7, #28]
 8001dba:	817b      	strh	r3, [r7, #10]
	offsets[2] = azo;
 8001dbc:	8b7b      	ldrh	r3, [r7, #26]
 8001dbe:	81bb      	strh	r3, [r7, #12]
	offsets[3] = gxo;
 8001dc0:	8b3b      	ldrh	r3, [r7, #24]
 8001dc2:	81fb      	strh	r3, [r7, #14]
	offsets[4] = gyo;
 8001dc4:	8afb      	ldrh	r3, [r7, #22]
 8001dc6:	823b      	strh	r3, [r7, #16]
	offsets[5] = gzo;
 8001dc8:	8abb      	ldrh	r3, [r7, #20]
 8001dca:	827b      	strh	r3, [r7, #18]


	if(hal_status != HAL_OK){
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x23c>
		return false;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x23e>
	}
	else{
		return true;
 8001dd8:	2301      	movs	r3, #1
	}

}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000057a 	.word	0x2000057a
 8001de8:	20000586 	.word	0x20000586
 8001dec:	2000057b 	.word	0x2000057b
 8001df0:	2000057c 	.word	0x2000057c
 8001df4:	2000057d 	.word	0x2000057d
 8001df8:	2000057e 	.word	0x2000057e
 8001dfc:	2000057f 	.word	0x2000057f
 8001e00:	20000580 	.word	0x20000580
 8001e04:	20000581 	.word	0x20000581
 8001e08:	20000582 	.word	0x20000582
 8001e0c:	20000583 	.word	0x20000583
 8001e10:	20000584 	.word	0x20000584
 8001e14:	20000585 	.word	0x20000585

08001e18 <_ZN7sensors6BNO0557readIMUEv>:

state::QuadStateVector& BNO055::readIMU(void){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	6078      	str	r0, [r7, #4]
	static uint8_t gx_lsb, gx_msb, gy_lsb, gy_msb, gz_lsb, gz_msb;

	static state::QuadStateVector sample_i = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	static HAL_StatusTypeDef hal_status;

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_X_LSB_R, 1, &ax_lsb, 1, 25);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	2319      	movs	r3, #25
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <_ZN7sensors6BNO0557readIMUEv+0x248>)
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	2208      	movs	r2, #8
 8001e34:	2150      	movs	r1, #80	; 0x50
 8001e36:	f001 f9b3 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001e40:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_X_MSB_R, 1, &ax_msb, 1, 25);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	2319      	movs	r3, #25
 8001e48:	9302      	str	r3, [sp, #8]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	4b86      	ldr	r3, [pc, #536]	; (8002068 <_ZN7sensors6BNO0557readIMUEv+0x250>)
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2301      	movs	r3, #1
 8001e54:	2209      	movs	r2, #9
 8001e56:	2150      	movs	r1, #80	; 0x50
 8001e58:	f001 f9a2 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001e62:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Y_LSB_R, 1, &ay_lsb, 1, 25);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	2319      	movs	r3, #25
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	4b7e      	ldr	r3, [pc, #504]	; (800206c <_ZN7sensors6BNO0557readIMUEv+0x254>)
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2301      	movs	r3, #1
 8001e76:	220a      	movs	r2, #10
 8001e78:	2150      	movs	r1, #80	; 0x50
 8001e7a:	f001 f991 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b78      	ldr	r3, [pc, #480]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001e84:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Y_MSB_R, 1, &ay_msb, 1, 25);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	2319      	movs	r3, #25
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	4b77      	ldr	r3, [pc, #476]	; (8002070 <_ZN7sensors6BNO0557readIMUEv+0x258>)
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2301      	movs	r3, #1
 8001e98:	220b      	movs	r2, #11
 8001e9a:	2150      	movs	r1, #80	; 0x50
 8001e9c:	f001 f980 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001ea6:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Z_LSB_R, 1, &az_lsb, 1, 25);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	2319      	movs	r3, #25
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <_ZN7sensors6BNO0557readIMUEv+0x25c>)
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	220c      	movs	r2, #12
 8001ebc:	2150      	movs	r1, #80	; 0x50
 8001ebe:	f001 f96f 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001ec8:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Z_MSB_R, 1, &az_msb, 1, 25);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	2319      	movs	r3, #25
 8001ed0:	9302      	str	r3, [sp, #8]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	4b68      	ldr	r3, [pc, #416]	; (8002078 <_ZN7sensors6BNO0557readIMUEv+0x260>)
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2301      	movs	r3, #1
 8001edc:	220d      	movs	r2, #13
 8001ede:	2150      	movs	r1, #80	; 0x50
 8001ee0:	f001 f95e 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001eea:	701a      	strb	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_X_LSB_R, 1, &gx_lsb, 1, 25);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	2319      	movs	r3, #25
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	4b60      	ldr	r3, [pc, #384]	; (800207c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	2214      	movs	r2, #20
 8001f00:	2150      	movs	r1, #80	; 0x50
 8001f02:	f001 f94d 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b56      	ldr	r3, [pc, #344]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f0c:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_X_MSB_R, 1, &gx_msb, 1, 25);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	2319      	movs	r3, #25
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	2301      	movs	r3, #1
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	4b59      	ldr	r3, [pc, #356]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x268>)
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	2215      	movs	r2, #21
 8001f22:	2150      	movs	r1, #80	; 0x50
 8001f24:	f001 f93c 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f2e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Y_LSB_R, 1, &gy_lsb, 1, 25);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	2319      	movs	r3, #25
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	4b51      	ldr	r3, [pc, #324]	; (8002084 <_ZN7sensors6BNO0557readIMUEv+0x26c>)
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2301      	movs	r3, #1
 8001f42:	2216      	movs	r2, #22
 8001f44:	2150      	movs	r1, #80	; 0x50
 8001f46:	f001 f92b 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f50:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Y_MSB_R, 1, &gy_msb, 1, 25);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	2319      	movs	r3, #25
 8001f58:	9302      	str	r3, [sp, #8]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <_ZN7sensors6BNO0557readIMUEv+0x270>)
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	2217      	movs	r2, #23
 8001f66:	2150      	movs	r1, #80	; 0x50
 8001f68:	f001 f91a 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f72:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Z_LSB_R, 1, &gz_lsb, 1, 25);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	2319      	movs	r3, #25
 8001f7a:	9302      	str	r3, [sp, #8]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <_ZN7sensors6BNO0557readIMUEv+0x274>)
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2301      	movs	r3, #1
 8001f86:	2218      	movs	r2, #24
 8001f88:	2150      	movs	r1, #80	; 0x50
 8001f8a:	f001 f909 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f94:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Z_MSB_R, 1, &gz_msb, 1, 25);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	2319      	movs	r3, #25
 8001f9c:	9302      	str	r3, [sp, #8]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <_ZN7sensors6BNO0557readIMUEv+0x278>)
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2219      	movs	r2, #25
 8001faa:	2150      	movs	r1, #80	; 0x50
 8001fac:	f001 f8f8 	bl	80031a0 <HAL_I2C_Mem_Read>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001fb6:	701a      	strb	r2, [r3, #0]

	sample_i.dx = ((ax_msb << 8) | ax_lsb);
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <_ZN7sensors6BNO0557readIMUEv+0x250>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	4a28      	ldr	r2, [pc, #160]	; (8002060 <_ZN7sensors6BNO0557readIMUEv+0x248>)
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8001fce:	edc3 7a07 	vstr	s15, [r3, #28]
	sample_i.dy = ((ay_msb << 8) | ay_lsb);
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <_ZN7sensors6BNO0557readIMUEv+0x258>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <_ZN7sensors6BNO0557readIMUEv+0x254>)
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe6:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8001fe8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	sample_i.dz = ((az_msb << 8) | az_lsb);
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <_ZN7sensors6BNO0557readIMUEv+0x260>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	4a20      	ldr	r2, [pc, #128]	; (8002074 <_ZN7sensors6BNO0557readIMUEv+0x25c>)
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	ee07 3a90 	vmov	s15, r3
 8001ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002000:	4b24      	ldr	r3, [pc, #144]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8002002:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	sample_i.dpsi = ((gx_msb << 8) | gx_lsb);
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x268>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <_ZN7sensors6BNO0557readIMUEv+0x264>)
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 800201c:	edc3 7a05 	vstr	s15, [r3, #20]
	sample_i.dtheta = ((gy_msb << 8) | gy_lsb);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <_ZN7sensors6BNO0557readIMUEv+0x270>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <_ZN7sensors6BNO0557readIMUEv+0x26c>)
 8002028:	7812      	ldrb	r2, [r2, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8002036:	edc3 7a03 	vstr	s15, [r3, #12]
	sample_i.dphi = ((gz_msb << 8) | gz_lsb);
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <_ZN7sensors6BNO0557readIMUEv+0x278>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <_ZN7sensors6BNO0557readIMUEv+0x274>)
 8002042:	7812      	ldrb	r2, [r2, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8002050:	edc3 7a01 	vstr	s15, [r3, #4]

	return sample_i;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x27c>)

}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000587 	.word	0x20000587
 8002064:	200005c4 	.word	0x200005c4
 8002068:	20000588 	.word	0x20000588
 800206c:	20000589 	.word	0x20000589
 8002070:	2000058a 	.word	0x2000058a
 8002074:	2000058b 	.word	0x2000058b
 8002078:	2000058c 	.word	0x2000058c
 800207c:	2000058d 	.word	0x2000058d
 8002080:	2000058e 	.word	0x2000058e
 8002084:	2000058f 	.word	0x2000058f
 8002088:	20000590 	.word	0x20000590
 800208c:	20000591 	.word	0x20000591
 8002090:	20000592 	.word	0x20000592
 8002094:	20000594 	.word	0x20000594

08002098 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv>:
//}


//FROM https://electronics.stackexchange.com/questions/351972/hal-i2c-hangs-cannot-be-solved-with-standard-routine-use-to-unlock-i2c/351977
void BNO055::I2C1_ClearBusyFlagErratum(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;
    int timeout =100;
 80020a0:	2364      	movs	r3, #100	; 0x64
 80020a2:	623b      	str	r3, [r7, #32]
    int timeout_cnt=0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24

    // 1. Clear PE bit.
    ((&(this->i2c)))->Instance->CR1 &= ~(0x0001);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 80020bc:	2311      	movs	r3, #17
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 80020c0:	2304      	movs	r3, #4
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	4619      	mov	r1, r3
 80020d6:	4883      	ldr	r0, [pc, #524]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80020d8:	f000 fc44 	bl	8002964 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 80020dc:	2201      	movs	r2, #1
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	4880      	ldr	r0, [pc, #512]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80020e2:	f000 fdeb 	bl	8002cbc <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin          = I2C1_SDA_PIN;
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	487c      	ldr	r0, [pc, #496]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80020f2:	f000 fc37 	bl	8002964 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	487a      	ldr	r0, [pc, #488]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80020fc:	f000 fdde 	bl	8002cbc <HAL_GPIO_WritePin>


    // 3. Check SCL and SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	4878      	ldr	r0, [pc, #480]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002104:	f000 fdc2 	bl	8002c8c <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	2b01      	cmp	r3, #1
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x92>
    {
        timeout_cnt++;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3301      	adds	r3, #1
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	429a      	cmp	r2, r3
 8002124:	f300 80cf 	bgt.w	80022c6 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x22e>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8002128:	e7ea      	b.n	8002100 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x68>
            return;
    }

    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	486d      	ldr	r0, [pc, #436]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800212e:	f000 fdad 	bl	8002c8c <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b01      	cmp	r3, #1
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d013      	beq.n	800216a <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0xd2>
    {
        //Move clock to release I2C
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4867      	ldr	r0, [pc, #412]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002148:	f000 fdb8 	bl	8002cbc <HAL_GPIO_WritePin>
        asm("nop");
 800214c:	bf00      	nop
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 800214e:	2201      	movs	r2, #1
 8002150:	2140      	movs	r1, #64	; 0x40
 8002152:	4864      	ldr	r0, [pc, #400]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002154:	f000 fdb2 	bl	8002cbc <HAL_GPIO_WritePin>

        timeout_cnt++;
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	3301      	adds	r3, #1
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 800215e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	429a      	cmp	r2, r3
 8002164:	f300 80b1 	bgt.w	80022ca <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x232>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8002168:	e7df      	b.n	800212a <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x92>
            return;
    }

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	485d      	ldr	r0, [pc, #372]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002170:	f000 fda4 	bl	8002cbc <HAL_GPIO_WritePin>

    //  5. Check SDA Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	485b      	ldr	r0, [pc, #364]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002178:	f000 fd88 	bl	8002c8c <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf14      	ite	ne
 8002182:	2301      	movne	r3, #1
 8002184:	2300      	moveq	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x106>
    {
        timeout_cnt++;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	3301      	adds	r3, #1
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8002192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	429a      	cmp	r2, r3
 8002198:	f300 8099 	bgt.w	80022ce <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x236>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 800219c:	e7ea      	b.n	8002174 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0xdc>
            return;
    }

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	2140      	movs	r1, #64	; 0x40
 80021a2:	4850      	ldr	r0, [pc, #320]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021a4:	f000 fd8a 	bl	8002cbc <HAL_GPIO_WritePin>

    //  7. Check SCL Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80021a8:	2140      	movs	r1, #64	; 0x40
 80021aa:	484e      	ldr	r0, [pc, #312]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021ac:	f000 fd6e 	bl	8002c8c <HAL_GPIO_ReadPin>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x13a>
    {
        timeout_cnt++;
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	3301      	adds	r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	f300 8081 	bgt.w	80022d2 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x23a>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80021d0:	e7ea      	b.n	80021a8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x110>
            return;
    }

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	4843      	ldr	r0, [pc, #268]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021d8:	f000 fd70 	bl	8002cbc <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80021dc:	2140      	movs	r1, #64	; 0x40
 80021de:	4841      	ldr	r0, [pc, #260]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021e0:	f000 fd54 	bl	8002c8c <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x16c>
    {
        timeout_cnt++;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3301      	adds	r3, #1
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	429a      	cmp	r2, r3
 8002200:	dc69      	bgt.n	80022d6 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x23e>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8002202:	e7eb      	b.n	80021dc <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x144>
            return;
    }

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8002204:	2201      	movs	r2, #1
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	4836      	ldr	r0, [pc, #216]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800220a:	f000 fd57 	bl	8002cbc <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 800220e:	2180      	movs	r1, #128	; 0x80
 8002210:	4834      	ldr	r0, [pc, #208]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002212:	f000 fd3b 	bl	8002c8c <HAL_GPIO_ReadPin>
 8002216:	4603      	mov	r3, r0
 8002218:	2b01      	cmp	r3, #1
 800221a:	bf14      	ite	ne
 800221c:	2301      	movne	r3, #1
 800221e:	2300      	moveq	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x19e>
    {
        timeout_cnt++;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	3301      	adds	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	429a      	cmp	r2, r3
 8002232:	dc52      	bgt.n	80022da <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x242>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8002234:	e7eb      	b.n	800220e <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x176>
            return;
    }

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002236:	2312      	movs	r3, #18
 8002238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223a:	2301      	movs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002242:	2304      	movs	r3, #4
 8002244:	61fb      	str	r3, [r7, #28]

    GPIO_InitStruct.Pin = I2C1_SCL_PIN;
 8002246:	2340      	movs	r3, #64	; 0x40
 8002248:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4619      	mov	r1, r3
 8002250:	4824      	ldr	r0, [pc, #144]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002252:	f000 fb87 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_PIN;
 8002256:	2380      	movs	r3, #128	; 0x80
 8002258:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4619      	mov	r1, r3
 8002260:	4820      	ldr	r0, [pc, #128]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002262:	f000 fb7f 	bl	8002964 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8002266:	2201      	movs	r2, #1
 8002268:	2140      	movs	r1, #64	; 0x40
 800226a:	481e      	ldr	r0, [pc, #120]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800226c:	f000 fd26 	bl	8002cbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8002270:	2201      	movs	r2, #1
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	481b      	ldr	r0, [pc, #108]	; (80022e4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002276:	f000 fd21 	bl	8002cbc <HAL_GPIO_WritePin>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    ((&(this->i2c)))->Instance->CR1 |= 0x8000;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800228c:	601a      	str	r2, [r3, #0]

    asm("nop");
 800228e:	bf00      	nop

    // 14. Clear SWRST bit in I2Cx_CR1 register.
    ((&(this->i2c)))->Instance->CR1 &= ~0x8000;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a2:	601a      	str	r2, [r3, #0]

    asm("nop");
 80022a4:	bf00      	nop

    // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
    ((&(this->i2c)))->Instance->CR1 |= 0x0001;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

    // Call initialization function.
    HAL_I2C_Init(((&(this->i2c))));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fd30 	bl	8002d24 <HAL_I2C_Init>
 80022c4:	e00a      	b.n	80022dc <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022c6:	bf00      	nop
 80022c8:	e008      	b.n	80022dc <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022ca:	bf00      	nop
 80022cc:	e006      	b.n	80022dc <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022ce:	bf00      	nop
 80022d0:	e004      	b.n	80022dc <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022d2:	bf00      	nop
 80022d4:	e002      	b.n	80022dc <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022d6:	bf00      	nop
 80022d8:	e000      	b.n	80022dc <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022da:	bf00      	nop
}
 80022dc:	3728      	adds	r7, #40	; 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40020400 	.word	0x40020400

080022e8 <_ZN7threads14actuatorThreadEPv>:
#include "actuatorthread.hpp"

namespace threads{


void actuatorThread(void* pvParameters){
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b08d      	sub	sp, #52	; 0x34
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]


	state::QuadControlActions* globalOutputRef = ((actuatorThreadArgs*)pvParameters)->output;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	actuators::BLHelis* motorsRef = ((actuatorThreadArgs*)pvParameters)->motors;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
	state::QuadControlActions localOutput;
	SemaphoreHandle_t xSharedOutputMutex = *(((actuatorThreadArgs*)pvParameters)->pxSharedOutputMutex);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
	SemaphoreHandle_t xInitializerMutex = *((actuatorThreadArgs*)pvParameters)->pxInitializerMutex;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	623b      	str	r3, [r7, #32]

	const TickType_t xFrequency = 1000; //scheduler is running at 1Khz, this thread will be able to run at that freq too
 800230c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002310:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;

	xSemaphoreTake(xInitializerMutex, (TickType_t)1000); //needs to get this mutex to continue exec
 8002312:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002316:	6a38      	ldr	r0, [r7, #32]
 8002318:	f005 fa0e 	bl	8007738 <xQueueSemaphoreTake>
													  //cannot grab this until initialization is done
	xSemaphoreGive(xInitializerMutex); //proceed into inf loop now that initialization is done
 800231c:	2300      	movs	r3, #0
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	6a38      	ldr	r0, [r7, #32]
 8002324:	f005 f90a 	bl	800753c <xQueueGenericSend>

	while(1){

		xLastWakeTime = xTaskGetTickCount();
 8002328:	f005 ff84 	bl	8008234 <xTaskGetTickCount>
 800232c:	4603      	mov	r3, r0
 800232e:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002338:	4618      	mov	r0, r3
 800233a:	f005 fdb5 	bl	8007ea8 <vTaskDelayUntil>

		//get measurement
		xSemaphoreTake(xSharedOutputMutex, (TickType_t)0);
 800233e:	2100      	movs	r1, #0
 8002340:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002342:	f005 f9f9 	bl	8007738 <xQueueSemaphoreTake>
		localOutput = *globalOutputRef; //copy the output into local var then release
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	f107 040c 	add.w	r4, r7, #12
 800234c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedOutputMutex);
 8002352:	2300      	movs	r3, #0
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800235a:	f005 f8ef 	bl	800753c <xQueueGenericSend>

		motorsRef->actuateMotors(localOutput);
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4619      	mov	r1, r3
 8002364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002366:	f7fe f9b3 	bl	80006d0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE>
		xLastWakeTime = xTaskGetTickCount();
 800236a:	e7dd      	b.n	8002328 <_ZN7threads14actuatorThreadEPv+0x40>

0800236c <_ZN7threads16controllerThreadEPv>:

#include "controllerthread.hpp"

namespace threads{

void controllerThread(void* pvParameters){
 800236c:	b5b0      	push	{r4, r5, r7, lr}
 800236e:	b0aa      	sub	sp, #168	; 0xa8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]


	control::PI thrustController = control::PI(0, 0.1, 10, 2);
 8002374:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002378:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800237c:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8002380:	eddf 0a61 	vldr	s1, [pc, #388]	; 8002508 <_ZN7threads16controllerThreadEPv+0x19c>
 8002384:	ed9f 0a61 	vldr	s0, [pc, #388]	; 800250c <_ZN7threads16controllerThreadEPv+0x1a0>
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fc4a 	bl	8000c22 <_ZN7control2PIC1Effff>
	control::PI yawController = control::PI(0, 0.1, 10, 2);
 800238e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002392:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002396:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800239a:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8002508 <_ZN7threads16controllerThreadEPv+0x19c>
 800239e:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 800250c <_ZN7threads16controllerThreadEPv+0x1a0>
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fc3d 	bl	8000c22 <_ZN7control2PIC1Effff>
	control::PI rollController = control::PI(0, 0.1, 10, 2);
 80023a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023ac:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80023b0:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80023b4:	eddf 0a54 	vldr	s1, [pc, #336]	; 8002508 <_ZN7threads16controllerThreadEPv+0x19c>
 80023b8:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800250c <_ZN7threads16controllerThreadEPv+0x1a0>
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fc30 	bl	8000c22 <_ZN7control2PIC1Effff>
	control::PI pitchController = control::PI(0, 0.1, 10, 2);
 80023c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023c6:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80023ca:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80023ce:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8002508 <_ZN7threads16controllerThreadEPv+0x19c>
 80023d2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800250c <_ZN7threads16controllerThreadEPv+0x1a0>
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fc23 	bl	8000c22 <_ZN7control2PIC1Effff>
	state::QuadStateVector localState;
	state::QuadControlActions localOutput;
	state::QuadStateVector* globalStateRef = ((controllerThreadArgs*)pvParameters)->state;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	state::QuadControlActions* globalOutputRef = ((controllerThreadArgs*)pvParameters)->output;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	SemaphoreHandle_t xSharedStateMutex = *(((controllerThreadArgs*)pvParameters)->pxSharedStateMutex);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	SemaphoreHandle_t xSharedOutputMutex = *(((controllerThreadArgs*)pvParameters)->pxSharedOutputMutex);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	SemaphoreHandle_t xInitializerMutex = *(((controllerThreadArgs*)pvParameters)->pxInitializerMutex);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const TickType_t xFrequency = 1000;
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	TickType_t xLastWakeTime;


	xSemaphoreTake(xInitializerMutex, (TickType_t)1000); //needs to get this mutex to continue exec
 8002412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002416:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800241a:	f005 f98d 	bl	8007738 <xQueueSemaphoreTake>
														  //cannot grab this until initialization is done
	xSemaphoreGive(xInitializerMutex); //proceed into inf loop now that initialization is done
 800241e:	2300      	movs	r3, #0
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002428:	f005 f888 	bl	800753c <xQueueGenericSend>

	while(1){
		xLastWakeTime = xTaskGetTickCount();
 800242c:	f005 ff02 	bl	8008234 <xTaskGetTickCount>
 8002430:	4603      	mov	r3, r0
 8002432:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks than instantly returns
 8002434:	f107 030c 	add.w	r3, r7, #12
 8002438:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800243c:	4618      	mov	r0, r3
 800243e:	f005 fd33 	bl	8007ea8 <vTaskDelayUntil>

		xSemaphoreTake(xSharedStateMutex, (TickType_t) 0); //nonblocking
 8002442:	2100      	movs	r1, #0
 8002444:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002448:	f005 f976 	bl	8007738 <xQueueSemaphoreTake>
		localState = *globalStateRef;
 800244c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002450:	f107 0420 	add.w	r4, r7, #32
 8002454:	461d      	mov	r5, r3
 8002456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedStateMutex);
 8002466:	2300      	movs	r3, #0
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002470:	f005 f864 	bl	800753c <xQueueGenericSend>


		localOutput.u1 = thrustController.calcOutput(localState.z);
 8002474:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002478:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800247c:	eeb0 0a67 	vmov.f32	s0, s15
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fbed 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 8002486:	eef0 7a40 	vmov.f32	s15, s0
 800248a:	edc7 7a04 	vstr	s15, [r7, #16]
		localOutput.u2 = rollController.calcOutput(localState.psi);
 800248e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002492:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002496:	eeb0 0a67 	vmov.f32	s0, s15
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fbe0 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 80024a0:	eef0 7a40 	vmov.f32	s15, s0
 80024a4:	edc7 7a05 	vstr	s15, [r7, #20]
		localOutput.u3 = pitchController.calcOutput(localState.theta);
 80024a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024b0:	eeb0 0a67 	vmov.f32	s0, s15
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fbd3 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 80024ba:	eef0 7a40 	vmov.f32	s15, s0
 80024be:	edc7 7a06 	vstr	s15, [r7, #24]
		localOutput.u4 = yawController.calcOutput(localState.phi);
 80024c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80024c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fbc6 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 80024d4:	eef0 7a40 	vmov.f32	s15, s0
 80024d8:	edc7 7a07 	vstr	s15, [r7, #28]

		xSemaphoreTake(xSharedOutputMutex, (TickType_t) 0);
 80024dc:	2100      	movs	r1, #0
 80024de:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80024e2:	f005 f929 	bl	8007738 <xQueueSemaphoreTake>
		*globalOutputRef = localOutput;
 80024e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ea:	461c      	mov	r4, r3
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedOutputMutex);
 80024f6:	2300      	movs	r3, #0
 80024f8:	2200      	movs	r2, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002500:	f005 f81c 	bl	800753c <xQueueGenericSend>
		xLastWakeTime = xTaskGetTickCount();
 8002504:	e792      	b.n	800242c <_ZN7threads16controllerThreadEPv+0xc0>
 8002506:	bf00      	nop
 8002508:	3dcccccd 	.word	0x3dcccccd
 800250c:	00000000 	.word	0x00000000

08002510 <_ZN7threads17initializerThreadEPv>:
#include "initializerthread.hpp"

namespace threads{


void initializerThread(void* pvParameters){
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

	//disable irq until this thread completes
	portENTER_CRITICAL();
 8002518:	f006 fcec 	bl	8008ef4 <vPortEnterCritical>

	//system state variable
	enum System_State sys_state = INIT;
 800251c:	2300      	movs	r3, #0
 800251e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//calibration flags
	bool imu_config_flag, imu_calib_flag = false;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	sensors::BNO055* localImuRef = ((initializerThreadArgs*)pvParameters)->pxIMU;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	623b      	str	r3, [r7, #32]
	actuators::BLHelis* localMotorsRef = ((initializerThreadArgs*)pvParameters)->pxMotors;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	61fb      	str	r3, [r7, #28]
	communications::NRF24* localCommsRef = ((initializerThreadArgs*)pvParameters)->pxComms;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	61bb      	str	r3, [r7, #24]
	SemaphoreHandle_t xInitializerMutex = *((initializerThreadArgs*)pvParameters)->pxInitializerMutex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60bb      	str	r3, [r7, #8]
	TaskHandle_t* localHandle = ((initializerThreadArgs*)pvParameters)->pxInitializerThreadHandle;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	617b      	str	r3, [r7, #20]

	auto retvar = xSemaphoreTake(xInitializerMutex, (TickType_t)0);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f005 f8f3 	bl	8007738 <xQueueSemaphoreTake>
 8002552:	6138      	str	r0, [r7, #16]
	vTaskDelay(10000);
 8002554:	f242 7010 	movw	r0, #10000	; 0x2710
 8002558:	f005 fd24 	bl	8007fa4 <vTaskDelay>

	//initializer thread is a state machine
	while(1){

		switch(sys_state){
 800255c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002560:	2b07      	cmp	r3, #7
 8002562:	d8fb      	bhi.n	800255c <_ZN7threads17initializerThreadEPv+0x4c>
 8002564:	a201      	add	r2, pc, #4	; (adr r2, 800256c <_ZN7threads17initializerThreadEPv+0x5c>)
 8002566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256a:	bf00      	nop
 800256c:	0800258d 	.word	0x0800258d
 8002570:	080025ab 	.word	0x080025ab
 8002574:	080025d1 	.word	0x080025d1
 8002578:	080025f9 	.word	0x080025f9
 800257c:	08002601 	.word	0x08002601
 8002580:	08002609 	.word	0x08002609
 8002584:	08002611 	.word	0x08002611
 8002588:	0800255d 	.word	0x0800255d

			  	  case INIT:
			  	  	  {
			  	  		  vTaskDelay(100);
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	f005 fd09 	bl	8007fa4 <vTaskDelay>
			  	  		  imu_config_flag = localImuRef->configSensor();
 8002592:	6a38      	ldr	r0, [r7, #32]
 8002594:	f7ff fab0 	bl	8001af8 <_ZN7sensors6BNO05512configSensorEv>
 8002598:	4603      	mov	r3, r0
 800259a:	73bb      	strb	r3, [r7, #14]

			  	  		  if(imu_config_flag){
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03a      	beq.n	8002618 <_ZN7threads17initializerThreadEPv+0x108>
			  	  			  sys_state = IMU_CALIB_INIT;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  		  }
			  	  	  }
			  		  break;
 80025a8:	e036      	b.n	8002618 <_ZN7threads17initializerThreadEPv+0x108>

			  	  case IMU_CALIB_INIT:
			  	  	  {
					  	  //CODE FOR CALIBRATING THE SENSOR
			  		  	  imu_calib_flag = localImuRef->Read_IMU_Calib_Status();
 80025aa:	6a38      	ldr	r0, [r7, #32]
 80025ac:	f7ff faca 	bl	8001b44 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  		  	  bool test = localImuRef->Read_Calib_Params();
 80025b6:	6a38      	ldr	r0, [r7, #32]
 80025b8:	f7ff faf0 	bl	8001b9c <_ZN7sensors6BNO05517Read_Calib_ParamsEv>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]

			  		  	  if(imu_calib_flag){
 80025c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d029      	beq.n	800261c <_ZN7threads17initializerThreadEPv+0x10c>
			  			  	  sys_state = IMU_CALIB_DONE;
 80025c8:	2302      	movs	r3, #2
 80025ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  		  	  }
			  	  	  }
			  		  break;
 80025ce:	e025      	b.n	800261c <_ZN7threads17initializerThreadEPv+0x10c>


			  	  case IMU_CALIB_DONE:
			  	  	  {
			  		  	  //blink an LED, transistion to RTOS
					  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80025d0:	2120      	movs	r1, #32
 80025d2:	4813      	ldr	r0, [pc, #76]	; (8002620 <_ZN7threads17initializerThreadEPv+0x110>)
 80025d4:	f000 fb8b 	bl	8002cee <HAL_GPIO_TogglePin>
					  	  vTaskDelay(1000);
 80025d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025dc:	f005 fce2 	bl	8007fa4 <vTaskDelay>
					  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80025e0:	2120      	movs	r1, #32
 80025e2:	480f      	ldr	r0, [pc, #60]	; (8002620 <_ZN7threads17initializerThreadEPv+0x110>)
 80025e4:	f000 fb83 	bl	8002cee <HAL_GPIO_TogglePin>
					  	  vTaskDelay(1000);
 80025e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ec:	f005 fcda 	bl	8007fa4 <vTaskDelay>
					  	  sys_state = MOTOR_INIT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  		  break;
 80025f6:	e012      	b.n	800261e <_ZN7threads17initializerThreadEPv+0x10e>

			  	  case MOTOR_INIT:
			  	  	  {
			  	  		  sys_state = MOTOR_INIT_DONE;
 80025f8:	2304      	movs	r3, #4
 80025fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  		  break;
 80025fe:	e00e      	b.n	800261e <_ZN7threads17initializerThreadEPv+0x10e>

			  	  case MOTOR_INIT_DONE:
			  	  	  {
			  		  	  sys_state = COMMS_INIT;
 8002600:	2305      	movs	r3, #5
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  	  	  break;
 8002606:	e00a      	b.n	800261e <_ZN7threads17initializerThreadEPv+0x10e>

			  	  case COMMS_INIT:
			  	  	  {
			  	  		  sys_state = COMMS_INIT_DONE;
 8002608:	2306      	movs	r3, #6
 800260a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  	  	  break;
 800260e:	e006      	b.n	800261e <_ZN7threads17initializerThreadEPv+0x10e>


			  	  case COMMS_INIT_DONE:
			  	  	  {
			  	  		  sys_state = RTOS;
 8002610:	2307      	movs	r3, #7
 8002612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  	  	  break;
 8002616:	e002      	b.n	800261e <_ZN7threads17initializerThreadEPv+0x10e>
			  		  break;
 8002618:	bf00      	nop
 800261a:	e79f      	b.n	800255c <_ZN7threads17initializerThreadEPv+0x4c>
			  		  break;
 800261c:	bf00      	nop
			  	  	  }
			  	  	  break;


		}
	}
 800261e:	e79d      	b.n	800255c <_ZN7threads17initializerThreadEPv+0x4c>
 8002620:	40020000 	.word	0x40020000

08002624 <_ZN7threads12sensorThreadEPv>:
#include "FreeRTOS.h"

namespace threads{


void sensorThread(void* pvParameters){
 8002624:	b5b0      	push	{r4, r5, r7, lr}
 8002626:	b096      	sub	sp, #88	; 0x58
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

	state::QuadStateVector localState;
	state::QuadStateVector* globalStateRef = ((sensorThreadArgs*)pvParameters)->state;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	657b      	str	r3, [r7, #84]	; 0x54
	sensors::BNO055* imuRef = ((sensorThreadArgs*)pvParameters)->imu;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
	SemaphoreHandle_t xSharedStateMutex = *(((sensorThreadArgs*)pvParameters)->pxSharedStateMutex);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
	SemaphoreHandle_t xInitializerMutex = *(((sensorThreadArgs*)pvParameters)->pxInitializerMutex);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48

	const TickType_t xFrequency = 1000; //scheduler is running at 1Khz, this thread will be able to run at that freq too
 8002648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264c:	647b      	str	r3, [r7, #68]	; 0x44
	TickType_t xLastWakeTime;

	auto retvar = xSemaphoreTake(xInitializerMutex, (TickType_t)1000); //needs to get this mutex to continue exec
 800264e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002652:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002654:	f005 f870 	bl	8007738 <xQueueSemaphoreTake>
 8002658:	6438      	str	r0, [r7, #64]	; 0x40
															  //cannot grab this until initialization is done
	xSemaphoreGive(xInitializerMutex); //proceed into inf loop now that initialization is done
 800265a:	2300      	movs	r3, #0
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002662:	f004 ff6b 	bl	800753c <xQueueGenericSend>


	while(1){

		xLastWakeTime = xTaskGetTickCount();
 8002666:	f005 fde5 	bl	8008234 <xTaskGetTickCount>
 800266a:	4603      	mov	r3, r0
 800266c:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002676:	4618      	mov	r0, r3
 8002678:	f005 fc16 	bl	8007ea8 <vTaskDelayUntil>


		localState = imuRef->readIMU();
 800267c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800267e:	f7ff fbcb 	bl	8001e18 <_ZN7sensors6BNO0557readIMUEv>
 8002682:	4603      	mov	r3, r0
 8002684:	f107 0410 	add.w	r4, r7, #16
 8002688:	461d      	mov	r5, r3
 800268a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800268c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800268e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002692:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002696:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		xSemaphoreTake(xSharedStateMutex, (TickType_t) 0);
 800269a:	2100      	movs	r1, #0
 800269c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800269e:	f005 f84b 	bl	8007738 <xQueueSemaphoreTake>
		*globalStateRef = localState;
 80026a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026a4:	461d      	mov	r5, r3
 80026a6:	f107 0410 	add.w	r4, r7, #16
 80026aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedStateMutex);
 80026ba:	2300      	movs	r3, #0
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026c2:	f004 ff3b 	bl	800753c <xQueueGenericSend>
		xLastWakeTime = xTaskGetTickCount();
 80026c6:	e7ce      	b.n	8002666 <_ZN7threads12sensorThreadEPv+0x42>

080026c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002700 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ce:	e003      	b.n	80026d8 <LoopCopyDataInit>

080026d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026d6:	3104      	adds	r1, #4

080026d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026d8:	480b      	ldr	r0, [pc, #44]	; (8002708 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e0:	d3f6      	bcc.n	80026d0 <CopyDataInit>
  ldr  r2, =_sbss
 80026e2:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026e4:	e002      	b.n	80026ec <LoopFillZerobss>

080026e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026e8:	f842 3b04 	str.w	r3, [r2], #4

080026ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f0:	d3f9      	bcc.n	80026e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026f2:	f7ff f9db 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f6:	f006 fec9 	bl	800948c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fa:	f7fe fb27 	bl	8000d4c <main>
  bx  lr    
 80026fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002700:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002704:	08009780 	.word	0x08009780
  ldr  r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800270c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002710:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002714:	20004328 	.word	0x20004328

08002718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC_IRQHandler>
	...

0800271c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_Init+0x40>)
 8002726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_Init+0x40>)
 8002732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002736:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_Init+0x40>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 f8d8 	bl	80028fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274a:	200f      	movs	r0, #15
 800274c:	f7ff f908 	bl	8001960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002750:	f7fe ff06 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x20>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x24>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_IncTick+0x24>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000014 	.word	0x20000014
 8002784:	200005c8 	.word	0x200005c8

08002788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200005c8 	.word	0x200005c8

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	; (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	; (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	; 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ff4c 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002922:	f7ff ff61 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 8002926:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	6978      	ldr	r0, [r7, #20]
 800292e:	f7ff ffb1 	bl	8002894 <NVIC_EncodePriority>
 8002932:	4602      	mov	r2, r0
 8002934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff80 	bl	8002840 <__NVIC_SetPriority>
}
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff54 	bl	8002804 <__NVIC_EnableIRQ>
}
 800295c:	bf00      	nop
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e165      	b.n	8002c4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	f040 8154 	bne.w	8002c46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d005      	beq.n	80029b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d130      	bne.n	8002a18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	2203      	movs	r2, #3
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029ec:	2201      	movs	r2, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 0201 	and.w	r2, r3, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d017      	beq.n	8002a54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d123      	bne.n	8002aa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	08da      	lsrs	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3208      	adds	r2, #8
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	08da      	lsrs	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3208      	adds	r2, #8
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0203 	and.w	r2, r3, #3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 80ae 	beq.w	8002c46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_GPIO_Init+0x300>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af2:	4a5c      	ldr	r2, [pc, #368]	; (8002c64 <HAL_GPIO_Init+0x300>)
 8002af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002af8:	6453      	str	r3, [r2, #68]	; 0x44
 8002afa:	4b5a      	ldr	r3, [pc, #360]	; (8002c64 <HAL_GPIO_Init+0x300>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_GPIO_Init+0x304>)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_GPIO_Init+0x308>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d025      	beq.n	8002b7e <HAL_GPIO_Init+0x21a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_GPIO_Init+0x30c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d01f      	beq.n	8002b7a <HAL_GPIO_Init+0x216>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d019      	beq.n	8002b76 <HAL_GPIO_Init+0x212>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4c      	ldr	r2, [pc, #304]	; (8002c78 <HAL_GPIO_Init+0x314>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d013      	beq.n	8002b72 <HAL_GPIO_Init+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_GPIO_Init+0x318>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00d      	beq.n	8002b6e <HAL_GPIO_Init+0x20a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4a      	ldr	r2, [pc, #296]	; (8002c80 <HAL_GPIO_Init+0x31c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a49      	ldr	r2, [pc, #292]	; (8002c84 <HAL_GPIO_Init+0x320>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_GPIO_Init+0x202>
 8002b62:	2306      	movs	r3, #6
 8002b64:	e00c      	b.n	8002b80 <HAL_GPIO_Init+0x21c>
 8002b66:	2307      	movs	r3, #7
 8002b68:	e00a      	b.n	8002b80 <HAL_GPIO_Init+0x21c>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x21c>
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x21c>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x21c>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x21c>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x21c>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	; (8002c68 <HAL_GPIO_Init+0x304>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a31      	ldr	r2, [pc, #196]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_GPIO_Init+0x324>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f ae96 	bls.w	8002980 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021400 	.word	0x40021400
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40013c00 	.word	0x40013c00

08002c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e001      	b.n	8002cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d00:	887a      	ldrh	r2, [r7, #2]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	041a      	lsls	r2, r3, #16
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	400b      	ands	r3, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e12b      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fc34 	bl	80015b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d88:	f001 f87e 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a81      	ldr	r2, [pc, #516]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d807      	bhi.n	8002da8 <HAL_I2C_Init+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_I2C_Init+0x278>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e006      	b.n	8002db6 <HAL_I2C_Init+0x92>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <HAL_I2C_Init+0x27c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0e7      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a78      	ldr	r2, [pc, #480]	; (8002fa4 <HAL_I2C_Init+0x280>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <HAL_I2C_Init+0xd4>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	e009      	b.n	8002e0c <HAL_I2C_Init+0xe8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_I2C_Init+0x284>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	495c      	ldr	r1, [pc, #368]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d819      	bhi.n	8002e60 <HAL_I2C_Init+0x13c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e59      	subs	r1, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e40:	400b      	ands	r3, r1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_I2C_Init+0x138>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e59      	subs	r1, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	e051      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e04f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d111      	bne.n	8002e8c <HAL_I2C_Init+0x168>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e012      	b.n	8002eb2 <HAL_I2C_Init+0x18e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	0099      	lsls	r1, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Init+0x196>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_I2C_Init+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6809      	ldr	r1, [r1, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6911      	ldr	r1, [r2, #16]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	000186a0 	.word	0x000186a0
 8002f9c:	001e847f 	.word	0x001e847f
 8002fa0:	003d08ff 	.word	0x003d08ff
 8002fa4:	431bde83 	.word	0x431bde83
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	817b      	strh	r3, [r7, #10]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	813b      	strh	r3, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fc6:	f7ff fbdf 	bl	8002788 <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	f040 80d9 	bne.w	800318c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2319      	movs	r3, #25
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	496d      	ldr	r1, [pc, #436]	; (8003198 <HAL_I2C_Mem_Write+0x1ec>)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 fc7f 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e0cc      	b.n	800318e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Mem_Write+0x56>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0c5      	b.n	800318e <HAL_I2C_Mem_Write+0x1e2>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b01      	cmp	r3, #1
 8003016:	d007      	beq.n	8003028 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2221      	movs	r2, #33	; 0x21
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_I2C_Mem_Write+0x1f0>)
 8003068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800306a:	88f8      	ldrh	r0, [r7, #6]
 800306c:	893a      	ldrh	r2, [r7, #8]
 800306e:	8979      	ldrh	r1, [r7, #10]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	4603      	mov	r3, r0
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fab6 	bl	80035ec <I2C_RequestMemoryWrite>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d052      	beq.n	800312c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e081      	b.n	800318e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fd00 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d107      	bne.n	80030b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06b      	b.n	800318e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d11b      	bne.n	800312c <HAL_I2C_Mem_Write+0x180>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d017      	beq.n	800312c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1aa      	bne.n	800308a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fcec 	bl	8003b16 <I2C_WaitOnBTFFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	2b04      	cmp	r3, #4
 800314a:	d107      	bne.n	800315c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e016      	b.n	800318e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	00100002 	.word	0x00100002
 800319c:	ffff0000 	.word	0xffff0000

080031a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08c      	sub	sp, #48	; 0x30
 80031a4:	af02      	add	r7, sp, #8
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	461a      	mov	r2, r3
 80031ae:	4603      	mov	r3, r0
 80031b0:	817b      	strh	r3, [r7, #10]
 80031b2:	460b      	mov	r3, r1
 80031b4:	813b      	strh	r3, [r7, #8]
 80031b6:	4613      	mov	r3, r2
 80031b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ba:	f7ff fae5 	bl	8002788 <HAL_GetTick>
 80031be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	f040 8208 	bne.w	80035de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2319      	movs	r3, #25
 80031d4:	2201      	movs	r2, #1
 80031d6:	497b      	ldr	r1, [pc, #492]	; (80033c4 <HAL_I2C_Mem_Read+0x224>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fb85 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80031e4:	2302      	movs	r3, #2
 80031e6:	e1fb      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_I2C_Mem_Read+0x56>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e1f4      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d007      	beq.n	800321c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2222      	movs	r2, #34	; 0x22
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4a5b      	ldr	r2, [pc, #364]	; (80033c8 <HAL_I2C_Mem_Read+0x228>)
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325e:	88f8      	ldrh	r0, [r7, #6]
 8003260:	893a      	ldrh	r2, [r7, #8]
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	4603      	mov	r3, r0
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fa52 	bl	8003718 <I2C_RequestMemoryRead>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1b0      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d113      	bne.n	80032ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003286:	2300      	movs	r3, #0
 8003288:	623b      	str	r3, [r7, #32]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	623b      	str	r3, [r7, #32]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	623b      	str	r3, [r7, #32]
 800329a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e184      	b.n	80035b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d11b      	bne.n	80032ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e164      	b.n	80035b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d11b      	bne.n	800332e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	e144      	b.n	80035b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003344:	e138      	b.n	80035b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	2b03      	cmp	r3, #3
 800334c:	f200 80f1 	bhi.w	8003532 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	2b01      	cmp	r3, #1
 8003356:	d123      	bne.n	80033a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fc1b 	bl	8003b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e139      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800339e:	e10b      	b.n	80035b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d14e      	bne.n	8003446 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ae:	2200      	movs	r2, #0
 80033b0:	4906      	ldr	r1, [pc, #24]	; (80033cc <HAL_I2C_Mem_Read+0x22c>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa98 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e10e      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
 80033c2:	bf00      	nop
 80033c4:	00100002 	.word	0x00100002
 80033c8:	ffff0000 	.word	0xffff0000
 80033cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003444:	e0b8      	b.n	80035b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	2200      	movs	r2, #0
 800344e:	4966      	ldr	r1, [pc, #408]	; (80035e8 <HAL_I2C_Mem_Read+0x448>)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fa49 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0bf      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	2200      	movs	r2, #0
 80034aa:	494f      	ldr	r1, [pc, #316]	; (80035e8 <HAL_I2C_Mem_Read+0x448>)
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fa1b 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e091      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c5a      	adds	r2, r3, #1
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003530:	e042      	b.n	80035b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fb2e 	bl	8003b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e04c      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d118      	bne.n	80035b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f aec2 	bne.w	8003346 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	00010004 	.word	0x00010004

080035ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	817b      	strh	r3, [r7, #10]
 80035fe:	460b      	mov	r3, r1
 8003600:	813b      	strh	r3, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003614:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	2200      	movs	r2, #0
 800361e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f960 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363c:	d103      	bne.n	8003646 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e05f      	b.n	800370a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003658:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	492d      	ldr	r1, [pc, #180]	; (8003714 <I2C_RequestMemoryWrite+0x128>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f998 	bl	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e04c      	b.n	800370a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa02 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e02b      	b.n	800370a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d105      	bne.n	80036c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b8:	893b      	ldrh	r3, [r7, #8]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	611a      	str	r2, [r3, #16]
 80036c2:	e021      	b.n	8003708 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036c4:	893b      	ldrh	r3, [r7, #8]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f9dc 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d107      	bne.n	80036fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e005      	b.n	800370a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036fe:	893b      	ldrh	r3, [r7, #8]
 8003700:	b2da      	uxtb	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	00010002 	.word	0x00010002

08003718 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003740:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003750:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	2200      	movs	r2, #0
 800375a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f8c2 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	d103      	bne.n	8003782 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003780:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0aa      	b.n	80038dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003786:	897b      	ldrh	r3, [r7, #10]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003794:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	4952      	ldr	r1, [pc, #328]	; (80038e4 <I2C_RequestMemoryRead+0x1cc>)
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f8fa 	bl	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e097      	b.n	80038dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	6a39      	ldr	r1, [r7, #32]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f964 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00d      	beq.n	80037ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d107      	bne.n	80037ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e076      	b.n	80038dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	611a      	str	r2, [r3, #16]
 80037fe:	e021      	b.n	8003844 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	b29b      	uxth	r3, r3
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	6a39      	ldr	r1, [r7, #32]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f93e 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00d      	beq.n	800383a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	2b04      	cmp	r3, #4
 8003824:	d107      	bne.n	8003836 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003834:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e050      	b.n	80038dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800383a:	893b      	ldrh	r3, [r7, #8]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	6a39      	ldr	r1, [r7, #32]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f923 	bl	8003a94 <I2C_WaitOnTXEFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00d      	beq.n	8003870 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	2b04      	cmp	r3, #4
 800385a:	d107      	bne.n	800386c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e035      	b.n	80038dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	2200      	movs	r2, #0
 8003888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f82b 	bl	80038e8 <I2C_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00d      	beq.n	80038b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a6:	d103      	bne.n	80038b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e013      	b.n	80038dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038b4:	897b      	ldrh	r3, [r7, #10]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	6a3a      	ldr	r2, [r7, #32]
 80038c8:	4906      	ldr	r1, [pc, #24]	; (80038e4 <I2C_RequestMemoryRead+0x1cc>)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f863 	bl	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	00010002 	.word	0x00010002

080038e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f8:	e025      	b.n	8003946 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d021      	beq.n	8003946 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003902:	f7fe ff41 	bl	8002788 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d116      	bne.n	8003946 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e023      	b.n	800398e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d10d      	bne.n	800396c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4013      	ands	r3, r2
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	e00c      	b.n	8003986 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4013      	ands	r3, r2
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf0c      	ite	eq
 800397e:	2301      	moveq	r3, #1
 8003980:	2300      	movne	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	429a      	cmp	r2, r3
 800398a:	d0b6      	beq.n	80038fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a4:	e051      	b.n	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039b4:	d123      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e046      	b.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d021      	beq.n	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a06:	f7fe febf 	bl	8002788 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d302      	bcc.n	8003a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d116      	bne.n	8003a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e020      	b.n	8003a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10c      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	e00b      	b.n	8003a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	43da      	mvns	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d18d      	bne.n	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aa0:	e02d      	b.n	8003afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f8ce 	bl	8003c44 <I2C_IsAcknowledgeFailed>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e02d      	b.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d021      	beq.n	8003afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aba:	f7fe fe65 	bl	8002788 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d302      	bcc.n	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d116      	bne.n	8003afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e007      	b.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b80      	cmp	r3, #128	; 0x80
 8003b0a:	d1ca      	bne.n	8003aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b22:	e02d      	b.n	8003b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f88d 	bl	8003c44 <I2C_IsAcknowledgeFailed>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e02d      	b.n	8003b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d021      	beq.n	8003b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3c:	f7fe fe24 	bl	8002788 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e007      	b.n	8003b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d1ca      	bne.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ba4:	e042      	b.n	8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d119      	bne.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0210 	mvn.w	r2, #16
 8003bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e029      	b.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be8:	f7fe fdce 	bl	8002788 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e007      	b.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d1b5      	bne.n	8003ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5a:	d11b      	bne.n	8003c94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f043 0204 	orr.w	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0cc      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d90c      	bls.n	8003ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b63      	ldr	r3, [pc, #396]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e0b8      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf8:	4b59      	ldr	r3, [pc, #356]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a58      	ldr	r2, [pc, #352]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d10:	4b53      	ldr	r3, [pc, #332]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a52      	ldr	r2, [pc, #328]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d1c:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	494d      	ldr	r1, [pc, #308]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d044      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d107      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d119      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e07f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d109      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e06f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d72:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e067      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4934      	ldr	r1, [pc, #208]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d94:	f7fe fcf8 	bl	8002788 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fe fcf4 	bl	8002788 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e04f      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d20c      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e032      	b.n	8003e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4916      	ldr	r1, [pc, #88]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	490e      	ldr	r1, [pc, #56]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e2a:	f000 fbb1 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	490a      	ldr	r1, [pc, #40]	; (8003e64 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	5ccb      	ldrb	r3, [r1, r3]
 8003e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1c8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd fd88 	bl	8001960 <HAL_InitTick>

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023c00 	.word	0x40023c00
 8003e60:	40023800 	.word	0x40023800
 8003e64:	080096f8 	.word	0x080096f8
 8003e68:	20000008 	.word	0x20000008
 8003e6c:	20000010 	.word	0x20000010

08003e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000008 	.word	0x20000008

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0a9b      	lsrs	r3, r3, #10
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4903      	ldr	r1, [pc, #12]	; (8003eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	08009708 	.word	0x08009708

08003eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eb4:	f7ff ffdc 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	0b5b      	lsrs	r3, r3, #13
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4903      	ldr	r1, [pc, #12]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	08009708 	.word	0x08009708

08003ed8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	220f      	movs	r2, #15
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 0203 	and.w	r2, r3, #3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_GetClockConfig+0x5c>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	08db      	lsrs	r3, r3, #3
 8003f12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <HAL_RCC_GetClockConfig+0x60>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 020f 	and.w	r2, r3, #15
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40023c00 	.word	0x40023c00

08003f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08c      	sub	sp, #48	; 0x30
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d010      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f74:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f7a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	496c      	ldr	r1, [pc, #432]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f92:	2301      	movs	r3, #1
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d010      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003fa2:	4b64      	ldr	r3, [pc, #400]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	4960      	ldr	r1, [pc, #384]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d017      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fd0:	4b58      	ldr	r3, [pc, #352]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fde:	4955      	ldr	r1, [pc, #340]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d017      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800400c:	4b49      	ldr	r3, [pc, #292]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800400e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004012:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	4946      	ldr	r1, [pc, #280]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402a:	d101      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800402c:	2301      	movs	r3, #1
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004038:	2301      	movs	r3, #1
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 808a 	beq.w	800415e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	4a38      	ldr	r2, [pc, #224]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004058:	6413      	str	r3, [r2, #64]	; 0x40
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004066:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a33      	ldr	r2, [pc, #204]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004072:	f7fe fb89 	bl	8002788 <HAL_GetTick>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800407a:	f7fe fb85 	bl	8002788 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e278      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800408c:	4b2a      	ldr	r3, [pc, #168]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d02f      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d028      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040be:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c0:	4b1e      	ldr	r3, [pc, #120]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d114      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040de:	f7fe fb53 	bl	8002788 <HAL_GetTick>
 80040e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e4:	e00a      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e6:	f7fe fb4f 	bl	8002788 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d901      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e240      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ee      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004114:	d114      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412a:	4902      	ldr	r1, [pc, #8]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800412c:	4313      	orrs	r3, r2
 800412e:	608b      	str	r3, [r1, #8]
 8004130:	e00c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470e40 	.word	0x42470e40
 8004140:	4b4a      	ldr	r3, [pc, #296]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a49      	ldr	r2, [pc, #292]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004146:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800414a:	6093      	str	r3, [r2, #8]
 800414c:	4b47      	ldr	r3, [pc, #284]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	4944      	ldr	r1, [pc, #272]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800415a:	4313      	orrs	r3, r2
 800415c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d004      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004170:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004172:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004180:	4b3a      	ldr	r3, [pc, #232]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	4937      	ldr	r1, [pc, #220]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041a2:	4b32      	ldr	r3, [pc, #200]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b0:	492e      	ldr	r1, [pc, #184]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d011      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	4926      	ldr	r1, [pc, #152]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e2:	d101      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80041e4:	2301      	movs	r3, #1
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80041f4:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	491a      	ldr	r1, [pc, #104]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	2b00      	cmp	r3, #0
 8004214:	d011      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004216:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	4911      	ldr	r1, [pc, #68]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004234:	d101      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004236:	2301      	movs	r3, #1
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d005      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004248:	f040 80ff 	bne.w	800444a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004252:	f7fe fa99 	bl	8002788 <HAL_GetTick>
 8004256:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004258:	e00e      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800425a:	f7fe fa95 	bl	8002788 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d907      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e188      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800426c:	40023800 	.word	0x40023800
 8004270:	424711e0 	.word	0x424711e0
 8004274:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004278:	4b7e      	ldr	r3, [pc, #504]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ea      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d028      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d124      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042ac:	4b71      	ldr	r3, [pc, #452]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	3301      	adds	r3, #1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042be:	4b6d      	ldr	r3, [pc, #436]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c4:	0e1b      	lsrs	r3, r3, #24
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	431a      	orrs	r2, r3
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	085b      	lsrs	r3, r3, #1
 80042dc:	3b01      	subs	r3, #1
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	4961      	ldr	r1, [pc, #388]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004314:	2b00      	cmp	r3, #0
 8004316:	d035      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004320:	d130      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004322:	4b54      	ldr	r3, [pc, #336]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004334:	4b4f      	ldr	r3, [pc, #316]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433a:	0f1b      	lsrs	r3, r3, #28
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	019b      	lsls	r3, r3, #6
 800434c:	431a      	orrs	r2, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	3b01      	subs	r3, #1
 8004354:	041b      	lsls	r3, r3, #16
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	431a      	orrs	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	071b      	lsls	r3, r3, #28
 8004364:	4943      	ldr	r1, [pc, #268]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800436c:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800436e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004372:	f023 021f 	bic.w	r2, r3, #31
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	493d      	ldr	r1, [pc, #244]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800438c:	2b00      	cmp	r3, #0
 800438e:	d029      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004398:	d124      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800439a:	4b36      	ldr	r3, [pc, #216]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	3301      	adds	r3, #1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043ac:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b2:	0f1b      	lsrs	r3, r3, #28
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	019b      	lsls	r3, r3, #6
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	3b01      	subs	r3, #1
 80043ce:	041b      	lsls	r3, r3, #16
 80043d0:	431a      	orrs	r2, r3
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	061b      	lsls	r3, r3, #24
 80043d6:	431a      	orrs	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	071b      	lsls	r3, r3, #28
 80043dc:	4925      	ldr	r1, [pc, #148]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d016      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	4917      	ldr	r1, [pc, #92]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004424:	f7fe f9b0 	bl	8002788 <HAL_GetTick>
 8004428:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800442c:	f7fe f9ac 	bl	8002788 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e09f      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	2b01      	cmp	r3, #1
 800444e:	f040 8095 	bne.w	800457c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004458:	f7fe f996 	bl	8002788 <HAL_GetTick>
 800445c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800445e:	e00f      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004460:	f7fe f992 	bl	8002788 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d908      	bls.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e085      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800
 8004478:	42470068 	.word	0x42470068
 800447c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004480:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448c:	d0e8      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02b      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d127      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	0c1b      	lsrs	r3, r3, #16
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	3301      	adds	r3, #1
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	431a      	orrs	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	4928      	ldr	r1, [pc, #160]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044ec:	4b26      	ldr	r3, [pc, #152]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	3b01      	subs	r3, #1
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	4922      	ldr	r1, [pc, #136]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01d      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451a:	d118      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800451c:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	0e1b      	lsrs	r3, r3, #24
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	019b      	lsls	r3, r3, #6
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	085b      	lsrs	r3, r3, #1
 800453c:	3b01      	subs	r3, #1
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	431a      	orrs	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	4910      	ldr	r1, [pc, #64]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004554:	f7fe f918 	bl	8002788 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800455a:	e008      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800455c:	f7fe f914 	bl	8002788 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e007      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800457a:	d1ef      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3730      	adds	r7, #48	; 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023800 	.word	0x40023800
 800458c:	42470070 	.word	0x42470070

08004590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004594:	b0ae      	sub	sp, #184	; 0xb8
 8004596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b6:	4bcb      	ldr	r3, [pc, #812]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	f200 8206 	bhi.w	80049d0 <HAL_RCC_GetSysClockFreq+0x440>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	08004601 	.word	0x08004601
 80045d0:	080049d1 	.word	0x080049d1
 80045d4:	080049d1 	.word	0x080049d1
 80045d8:	080049d1 	.word	0x080049d1
 80045dc:	08004609 	.word	0x08004609
 80045e0:	080049d1 	.word	0x080049d1
 80045e4:	080049d1 	.word	0x080049d1
 80045e8:	080049d1 	.word	0x080049d1
 80045ec:	08004611 	.word	0x08004611
 80045f0:	080049d1 	.word	0x080049d1
 80045f4:	080049d1 	.word	0x080049d1
 80045f8:	080049d1 	.word	0x080049d1
 80045fc:	08004801 	.word	0x08004801
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4bb9      	ldr	r3, [pc, #740]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004606:	e1e7      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004608:	4bb8      	ldr	r3, [pc, #736]	; (80048ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800460a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800460e:	e1e3      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004610:	4bb4      	ldr	r3, [pc, #720]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800461c:	4bb1      	ldr	r3, [pc, #708]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d071      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004628:	4bae      	ldr	r3, [pc, #696]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	099b      	lsrs	r3, r3, #6
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004634:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800464a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800464e:	4622      	mov	r2, r4
 8004650:	462b      	mov	r3, r5
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f04f 0100 	mov.w	r1, #0
 800465a:	0159      	lsls	r1, r3, #5
 800465c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004660:	0150      	lsls	r0, r2, #5
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4621      	mov	r1, r4
 8004668:	1a51      	subs	r1, r2, r1
 800466a:	6439      	str	r1, [r7, #64]	; 0x40
 800466c:	4629      	mov	r1, r5
 800466e:	eb63 0301 	sbc.w	r3, r3, r1
 8004672:	647b      	str	r3, [r7, #68]	; 0x44
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004680:	4649      	mov	r1, r9
 8004682:	018b      	lsls	r3, r1, #6
 8004684:	4641      	mov	r1, r8
 8004686:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800468a:	4641      	mov	r1, r8
 800468c:	018a      	lsls	r2, r1, #6
 800468e:	4641      	mov	r1, r8
 8004690:	1a51      	subs	r1, r2, r1
 8004692:	63b9      	str	r1, [r7, #56]	; 0x38
 8004694:	4649      	mov	r1, r9
 8004696:	eb63 0301 	sbc.w	r3, r3, r1
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80046a8:	4649      	mov	r1, r9
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	4641      	mov	r1, r8
 80046ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b2:	4641      	mov	r1, r8
 80046b4:	00ca      	lsls	r2, r1, #3
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	4622      	mov	r2, r4
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	633b      	str	r3, [r7, #48]	; 0x30
 80046c2:	462b      	mov	r3, r5
 80046c4:	460a      	mov	r2, r1
 80046c6:	eb42 0303 	adc.w	r3, r2, r3
 80046ca:	637b      	str	r3, [r7, #52]	; 0x34
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046d8:	4629      	mov	r1, r5
 80046da:	024b      	lsls	r3, r1, #9
 80046dc:	4621      	mov	r1, r4
 80046de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046e2:	4621      	mov	r1, r4
 80046e4:	024a      	lsls	r2, r1, #9
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80046fc:	f7fb fd88 	bl	8000210 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800470a:	e067      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	4b75      	ldr	r3, [pc, #468]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004718:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800471c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004724:	67bb      	str	r3, [r7, #120]	; 0x78
 8004726:	2300      	movs	r3, #0
 8004728:	67fb      	str	r3, [r7, #124]	; 0x7c
 800472a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800472e:	4622      	mov	r2, r4
 8004730:	462b      	mov	r3, r5
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	0159      	lsls	r1, r3, #5
 800473c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004740:	0150      	lsls	r0, r2, #5
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4621      	mov	r1, r4
 8004748:	1a51      	subs	r1, r2, r1
 800474a:	62b9      	str	r1, [r7, #40]	; 0x28
 800474c:	4629      	mov	r1, r5
 800474e:	eb63 0301 	sbc.w	r3, r3, r1
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004760:	4649      	mov	r1, r9
 8004762:	018b      	lsls	r3, r1, #6
 8004764:	4641      	mov	r1, r8
 8004766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800476a:	4641      	mov	r1, r8
 800476c:	018a      	lsls	r2, r1, #6
 800476e:	4641      	mov	r1, r8
 8004770:	ebb2 0a01 	subs.w	sl, r2, r1
 8004774:	4649      	mov	r1, r9
 8004776:	eb63 0b01 	sbc.w	fp, r3, r1
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004786:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800478a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478e:	4692      	mov	sl, r2
 8004790:	469b      	mov	fp, r3
 8004792:	4623      	mov	r3, r4
 8004794:	eb1a 0303 	adds.w	r3, sl, r3
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	462b      	mov	r3, r5
 800479c:	eb4b 0303 	adc.w	r3, fp, r3
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047ae:	4629      	mov	r1, r5
 80047b0:	028b      	lsls	r3, r1, #10
 80047b2:	4621      	mov	r1, r4
 80047b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b8:	4621      	mov	r1, r4
 80047ba:	028a      	lsls	r2, r1, #10
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047c4:	2200      	movs	r2, #0
 80047c6:	673b      	str	r3, [r7, #112]	; 0x70
 80047c8:	677a      	str	r2, [r7, #116]	; 0x74
 80047ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80047ce:	f7fb fd1f 	bl	8000210 <__aeabi_uldivmod>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	4613      	mov	r3, r2
 80047d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80047ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80047fe:	e0eb      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004800:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800480c:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d06b      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004818:	4b32      	ldr	r3, [pc, #200]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	099b      	lsrs	r3, r3, #6
 800481e:	2200      	movs	r2, #0
 8004820:	66bb      	str	r3, [r7, #104]	; 0x68
 8004822:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800482a:	663b      	str	r3, [r7, #96]	; 0x60
 800482c:	2300      	movs	r3, #0
 800482e:	667b      	str	r3, [r7, #100]	; 0x64
 8004830:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004834:	4622      	mov	r2, r4
 8004836:	462b      	mov	r3, r5
 8004838:	f04f 0000 	mov.w	r0, #0
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	0159      	lsls	r1, r3, #5
 8004842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004846:	0150      	lsls	r0, r2, #5
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4621      	mov	r1, r4
 800484e:	1a51      	subs	r1, r2, r1
 8004850:	61b9      	str	r1, [r7, #24]
 8004852:	4629      	mov	r1, r5
 8004854:	eb63 0301 	sbc.w	r3, r3, r1
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004866:	4659      	mov	r1, fp
 8004868:	018b      	lsls	r3, r1, #6
 800486a:	4651      	mov	r1, sl
 800486c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004870:	4651      	mov	r1, sl
 8004872:	018a      	lsls	r2, r1, #6
 8004874:	4651      	mov	r1, sl
 8004876:	ebb2 0801 	subs.w	r8, r2, r1
 800487a:	4659      	mov	r1, fp
 800487c:	eb63 0901 	sbc.w	r9, r3, r1
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800488c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004890:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004894:	4690      	mov	r8, r2
 8004896:	4699      	mov	r9, r3
 8004898:	4623      	mov	r3, r4
 800489a:	eb18 0303 	adds.w	r3, r8, r3
 800489e:	613b      	str	r3, [r7, #16]
 80048a0:	462b      	mov	r3, r5
 80048a2:	eb49 0303 	adc.w	r3, r9, r3
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048b4:	4629      	mov	r1, r5
 80048b6:	024b      	lsls	r3, r1, #9
 80048b8:	4621      	mov	r1, r4
 80048ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048be:	4621      	mov	r1, r4
 80048c0:	024a      	lsls	r2, r1, #9
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048ca:	2200      	movs	r2, #0
 80048cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80048d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048d4:	f7fb fc9c 	bl	8000210 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4613      	mov	r3, r2
 80048de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e2:	e065      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x420>
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f0:	4b3d      	ldr	r3, [pc, #244]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	099b      	lsrs	r3, r3, #6
 80048f6:	2200      	movs	r2, #0
 80048f8:	4618      	mov	r0, r3
 80048fa:	4611      	mov	r1, r2
 80048fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004900:	653b      	str	r3, [r7, #80]	; 0x50
 8004902:	2300      	movs	r3, #0
 8004904:	657b      	str	r3, [r7, #84]	; 0x54
 8004906:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800490a:	4642      	mov	r2, r8
 800490c:	464b      	mov	r3, r9
 800490e:	f04f 0000 	mov.w	r0, #0
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	0159      	lsls	r1, r3, #5
 8004918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491c:	0150      	lsls	r0, r2, #5
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4641      	mov	r1, r8
 8004924:	1a51      	subs	r1, r2, r1
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	4649      	mov	r1, r9
 800492a:	eb63 0301 	sbc.w	r3, r3, r1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800493c:	4659      	mov	r1, fp
 800493e:	018b      	lsls	r3, r1, #6
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004946:	4651      	mov	r1, sl
 8004948:	018a      	lsls	r2, r1, #6
 800494a:	4651      	mov	r1, sl
 800494c:	1a54      	subs	r4, r2, r1
 800494e:	4659      	mov	r1, fp
 8004950:	eb63 0501 	sbc.w	r5, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	00eb      	lsls	r3, r5, #3
 800495e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004962:	00e2      	lsls	r2, r4, #3
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	4643      	mov	r3, r8
 800496a:	18e3      	adds	r3, r4, r3
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	464b      	mov	r3, r9
 8004970:	eb45 0303 	adc.w	r3, r5, r3
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004982:	4629      	mov	r1, r5
 8004984:	028b      	lsls	r3, r1, #10
 8004986:	4621      	mov	r1, r4
 8004988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800498c:	4621      	mov	r1, r4
 800498e:	028a      	lsls	r2, r1, #10
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004998:	2200      	movs	r2, #0
 800499a:	64bb      	str	r3, [r7, #72]	; 0x48
 800499c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800499e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049a2:	f7fb fc35 	bl	8000210 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4613      	mov	r3, r2
 80049ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	0f1b      	lsrs	r3, r3, #28
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80049be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049ce:	e003      	b.n	80049d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80049d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	37b8      	adds	r7, #184	; 0xb8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
 80049ec:	00f42400 	.word	0x00f42400

080049f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e28d      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8083 	beq.w	8004b16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a10:	4b94      	ldr	r3, [pc, #592]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d019      	beq.n	8004a50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a1c:	4b91      	ldr	r3, [pc, #580]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d106      	bne.n	8004a36 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a28:	4b8e      	ldr	r3, [pc, #568]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a34:	d00c      	beq.n	8004a50 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a36:	4b8b      	ldr	r3, [pc, #556]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d112      	bne.n	8004a68 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a42:	4b88      	ldr	r3, [pc, #544]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a4e:	d10b      	bne.n	8004a68 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a50:	4b84      	ldr	r3, [pc, #528]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d05b      	beq.n	8004b14 <HAL_RCC_OscConfig+0x124>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d157      	bne.n	8004b14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e25a      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d106      	bne.n	8004a80 <HAL_RCC_OscConfig+0x90>
 8004a72:	4b7c      	ldr	r3, [pc, #496]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a7b      	ldr	r2, [pc, #492]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e01d      	b.n	8004abc <HAL_RCC_OscConfig+0xcc>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0xb4>
 8004a8a:	4b76      	ldr	r3, [pc, #472]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a75      	ldr	r2, [pc, #468]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	4b73      	ldr	r3, [pc, #460]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a72      	ldr	r2, [pc, #456]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e00b      	b.n	8004abc <HAL_RCC_OscConfig+0xcc>
 8004aa4:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a6e      	ldr	r2, [pc, #440]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b6c      	ldr	r3, [pc, #432]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a6b      	ldr	r2, [pc, #428]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d013      	beq.n	8004aec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fe60 	bl	8002788 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fd fe5c 	bl	8002788 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e21f      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	4b61      	ldr	r3, [pc, #388]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0xdc>
 8004aea:	e014      	b.n	8004b16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fd fe4c 	bl	8002788 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fd fe48 	bl	8002788 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	; 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e20b      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b06:	4b57      	ldr	r3, [pc, #348]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x104>
 8004b12:	e000      	b.n	8004b16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d06f      	beq.n	8004c02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b22:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d017      	beq.n	8004b5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b2e:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d105      	bne.n	8004b46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b3a:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b46:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d11c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b52:	4b44      	ldr	r3, [pc, #272]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d116      	bne.n	8004b8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	4b41      	ldr	r3, [pc, #260]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_RCC_OscConfig+0x186>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e1d3      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4937      	ldr	r1, [pc, #220]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	e03a      	b.n	8004c02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b94:	4b34      	ldr	r3, [pc, #208]	; (8004c68 <HAL_RCC_OscConfig+0x278>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fd fdf5 	bl	8002788 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba2:	f7fd fdf1 	bl	8002788 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1b4      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc0:	4b28      	ldr	r3, [pc, #160]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4925      	ldr	r1, [pc, #148]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]
 8004bd4:	e015      	b.n	8004c02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <HAL_RCC_OscConfig+0x278>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fd fdd4 	bl	8002788 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be4:	f7fd fdd0 	bl	8002788 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e193      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d036      	beq.n	8004c7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fd fdb4 	bl	8002788 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fd fdb0 	bl	8002788 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e173      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x234>
 8004c42:	e01b      	b.n	8004c7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_OscConfig+0x27c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c4a:	f7fd fd9d 	bl	8002788 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c50:	e00e      	b.n	8004c70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c52:	f7fd fd99 	bl	8002788 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d907      	bls.n	8004c70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e15c      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
 8004c64:	40023800 	.word	0x40023800
 8004c68:	42470000 	.word	0x42470000
 8004c6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	4b8a      	ldr	r3, [pc, #552]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ea      	bne.n	8004c52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8097 	beq.w	8004db8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8e:	4b83      	ldr	r3, [pc, #524]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10f      	bne.n	8004cba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	4b7f      	ldr	r3, [pc, #508]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	4a7e      	ldr	r2, [pc, #504]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cba:	4b79      	ldr	r3, [pc, #484]	; (8004ea0 <HAL_RCC_OscConfig+0x4b0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d118      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc6:	4b76      	ldr	r3, [pc, #472]	; (8004ea0 <HAL_RCC_OscConfig+0x4b0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a75      	ldr	r2, [pc, #468]	; (8004ea0 <HAL_RCC_OscConfig+0x4b0>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd2:	f7fd fd59 	bl	8002788 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fd fd55 	bl	8002788 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e118      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	4b6c      	ldr	r3, [pc, #432]	; (8004ea0 <HAL_RCC_OscConfig+0x4b0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x31e>
 8004d00:	4b66      	ldr	r3, [pc, #408]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0c:	e01c      	b.n	8004d48 <HAL_RCC_OscConfig+0x358>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x340>
 8004d16:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	4a60      	ldr	r2, [pc, #384]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d1c:	f043 0304 	orr.w	r3, r3, #4
 8004d20:	6713      	str	r3, [r2, #112]	; 0x70
 8004d22:	4b5e      	ldr	r3, [pc, #376]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4a5d      	ldr	r2, [pc, #372]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCC_OscConfig+0x358>
 8004d30:	4b5a      	ldr	r3, [pc, #360]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d34:	4a59      	ldr	r2, [pc, #356]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3c:	4b57      	ldr	r3, [pc, #348]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	4a56      	ldr	r2, [pc, #344]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d42:	f023 0304 	bic.w	r3, r3, #4
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d015      	beq.n	8004d7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fd fd1a 	bl	8002788 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d58:	f7fd fd16 	bl	8002788 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e0d7      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6e:	4b4b      	ldr	r3, [pc, #300]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0ee      	beq.n	8004d58 <HAL_RCC_OscConfig+0x368>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd fd04 	bl	8002788 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd fd00 	bl	8002788 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0c1      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9a:	4b40      	ldr	r3, [pc, #256]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ee      	bne.n	8004d84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d105      	bne.n	8004db8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dac:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	4a3a      	ldr	r2, [pc, #232]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80ad 	beq.w	8004f1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d060      	beq.n	8004e90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d145      	bne.n	8004e62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b33      	ldr	r3, [pc, #204]	; (8004ea4 <HAL_RCC_OscConfig+0x4b4>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fd fcd4 	bl	8002788 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fd fcd0 	bl	8002788 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e093      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df6:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	071b      	lsls	r3, r3, #28
 8004e2e:	491b      	ldr	r1, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e34:	4b1b      	ldr	r3, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x4b4>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3a:	f7fd fca5 	bl	8002788 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e42:	f7fd fca1 	bl	8002788 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e064      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x452>
 8004e60:	e05c      	b.n	8004f1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <HAL_RCC_OscConfig+0x4b4>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fc8e 	bl	8002788 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fc8a 	bl	8002788 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04d      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCC_OscConfig+0x4ac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x480>
 8004e8e:	e045      	b.n	8004f1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d107      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e040      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_RCC_OscConfig+0x538>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d030      	beq.n	8004f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d129      	bne.n	8004f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d122      	bne.n	8004f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ede:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d119      	bne.n	8004f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	085b      	lsrs	r3, r3, #1
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d10f      	bne.n	8004f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40023800 	.word	0x40023800

08004f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e07b      	b.n	8005036 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4e:	d009      	beq.n	8004f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
 8004f56:	e005      	b.n	8004f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc fb62 	bl	8001648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe8:	ea42 0103 	orr.w	r1, r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	f003 0104 	and.w	r1, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0210 	and.w	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005024:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b088      	sub	sp, #32
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_SPI_Transmit+0x22>
 800505c:	2302      	movs	r3, #2
 800505e:	e126      	b.n	80052ae <HAL_SPI_Transmit+0x270>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005068:	f7fd fb8e 	bl	8002788 <HAL_GetTick>
 800506c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d002      	beq.n	8005084 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800507e:	2302      	movs	r3, #2
 8005080:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005082:	e10b      	b.n	800529c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_Transmit+0x52>
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005094:	e102      	b.n	800529c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2203      	movs	r2, #3
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	88fa      	ldrh	r2, [r7, #6]
 80050ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d10f      	bne.n	80050fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d007      	beq.n	800511c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800511a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d14b      	bne.n	80051be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_SPI_Transmit+0xf6>
 800512e:	8afb      	ldrh	r3, [r7, #22]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d13e      	bne.n	80051b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005158:	e02b      	b.n	80051b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b02      	cmp	r3, #2
 8005166:	d112      	bne.n	800518e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	881a      	ldrh	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	1c9a      	adds	r2, r3, #2
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	86da      	strh	r2, [r3, #54]	; 0x36
 800518c:	e011      	b.n	80051b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800518e:	f7fd fafb 	bl	8002788 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d803      	bhi.n	80051a6 <HAL_SPI_Transmit+0x168>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_Transmit+0x16e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051b0:	e074      	b.n	800529c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1ce      	bne.n	800515a <HAL_SPI_Transmit+0x11c>
 80051bc:	e04c      	b.n	8005258 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_SPI_Transmit+0x18e>
 80051c6:	8afb      	ldrh	r3, [r7, #22]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d140      	bne.n	800524e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	330c      	adds	r3, #12
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051f2:	e02c      	b.n	800524e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d113      	bne.n	800522a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	86da      	strh	r2, [r3, #54]	; 0x36
 8005228:	e011      	b.n	800524e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522a:	f7fd faad 	bl	8002788 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d803      	bhi.n	8005242 <HAL_SPI_Transmit+0x204>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d102      	bne.n	8005248 <HAL_SPI_Transmit+0x20a>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800524c:	e026      	b.n	800529c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005252:	b29b      	uxth	r3, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1cd      	bne.n	80051f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 fbcb 	bl	80059f8 <SPI_EndRxTxTransaction>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005276:	2300      	movs	r3, #0
 8005278:	613b      	str	r3, [r7, #16]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e000      	b.n	800529c <HAL_SPI_Transmit+0x25e>
  }

error:
 800529a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b088      	sub	sp, #32
 80052ba:	af02      	add	r7, sp, #8
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d2:	d112      	bne.n	80052fa <HAL_SPI_Receive+0x44>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10e      	bne.n	80052fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2204      	movs	r2, #4
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052e4:	88fa      	ldrh	r2, [r7, #6]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	4613      	mov	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f8f1 	bl	80054d8 <HAL_SPI_TransmitReceive>
 80052f6:	4603      	mov	r3, r0
 80052f8:	e0ea      	b.n	80054d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005300:	2b01      	cmp	r3, #1
 8005302:	d101      	bne.n	8005308 <HAL_SPI_Receive+0x52>
 8005304:	2302      	movs	r3, #2
 8005306:	e0e3      	b.n	80054d0 <HAL_SPI_Receive+0x21a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005310:	f7fd fa3a 	bl	8002788 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005326:	e0ca      	b.n	80054be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Receive+0x7e>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005338:	e0c1      	b.n	80054be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2204      	movs	r2, #4
 800533e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005380:	d10f      	bne.n	80053a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005390:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b40      	cmp	r3, #64	; 0x40
 80053ae:	d007      	beq.n	80053c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d162      	bne.n	800548e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053c8:	e02e      	b.n	8005428 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d115      	bne.n	8005404 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f103 020c 	add.w	r2, r3, #12
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005402:	e011      	b.n	8005428 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005404:	f7fd f9c0 	bl	8002788 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d803      	bhi.n	800541c <HAL_SPI_Receive+0x166>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d102      	bne.n	8005422 <HAL_SPI_Receive+0x16c>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005426:	e04a      	b.n	80054be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1cb      	bne.n	80053ca <HAL_SPI_Receive+0x114>
 8005432:	e031      	b.n	8005498 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d113      	bne.n	800546a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	b292      	uxth	r2, r2
 800544e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005468:	e011      	b.n	800548e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546a:	f7fd f98d 	bl	8002788 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d803      	bhi.n	8005482 <HAL_SPI_Receive+0x1cc>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005480:	d102      	bne.n	8005488 <HAL_SPI_Receive+0x1d2>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800548c:	e017      	b.n	80054be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1cd      	bne.n	8005434 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fa45 	bl	800592c <SPI_EndRxTransaction>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
 80054ba:	e000      	b.n	80054be <HAL_SPI_Receive+0x208>
  }

error :
 80054bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08c      	sub	sp, #48	; 0x30
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e6:	2301      	movs	r3, #1
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x26>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e18a      	b.n	8005814 <HAL_SPI_TransmitReceive+0x33c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005506:	f7fd f93f 	bl	8002788 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800551c:	887b      	ldrh	r3, [r7, #2]
 800551e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005524:	2b01      	cmp	r3, #1
 8005526:	d00f      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x70>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552e:	d107      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d103      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x68>
 8005538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553c:	2b04      	cmp	r3, #4
 800553e:	d003      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005540:	2302      	movs	r3, #2
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005546:	e15b      	b.n	8005800 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_SPI_TransmitReceive+0x82>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_TransmitReceive+0x82>
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005560:	e14e      	b.n	8005800 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b04      	cmp	r3, #4
 800556c:	d003      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2205      	movs	r2, #5
 8005572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	887a      	ldrh	r2, [r7, #2]
 8005586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	887a      	ldrh	r2, [r7, #2]
 8005598:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	887a      	ldrh	r2, [r7, #2]
 800559e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	d007      	beq.n	80055ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d2:	d178      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x10a>
 80055dc:	8b7b      	ldrh	r3, [r7, #26]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d166      	bne.n	80056b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005606:	e053      	b.n	80056b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b02      	cmp	r3, #2
 8005614:	d11b      	bne.n	800564e <HAL_SPI_TransmitReceive+0x176>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d016      	beq.n	800564e <HAL_SPI_TransmitReceive+0x176>
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d113      	bne.n	800564e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d119      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x1b8>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d014      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	b292      	uxth	r2, r2
 8005672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800568c:	2301      	movs	r3, #1
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005690:	f7fd f87a 	bl	8002788 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800569c:	429a      	cmp	r2, r3
 800569e:	d807      	bhi.n	80056b0 <HAL_SPI_TransmitReceive+0x1d8>
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d003      	beq.n	80056b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056ae:	e0a7      	b.n	8005800 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1a6      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x130>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1a1      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x130>
 80056c4:	e07c      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_TransmitReceive+0x1fc>
 80056ce:	8b7b      	ldrh	r3, [r7, #26]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d16b      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	7812      	ldrb	r2, [r2, #0]
 80056e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056fa:	e057      	b.n	80057ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b02      	cmp	r3, #2
 8005708:	d11c      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x26c>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d017      	beq.n	8005744 <HAL_SPI_TransmitReceive+0x26c>
 8005714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005716:	2b01      	cmp	r3, #1
 8005718:	d114      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	7812      	ldrb	r2, [r2, #0]
 8005726:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b01      	cmp	r3, #1
 8005750:	d119      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x2ae>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d014      	beq.n	8005786 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005782:	2301      	movs	r3, #1
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005786:	f7fc ffff 	bl	8002788 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005792:	429a      	cmp	r2, r3
 8005794:	d803      	bhi.n	800579e <HAL_SPI_TransmitReceive+0x2c6>
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d102      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x2cc>
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057aa:	e029      	b.n	8005800 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1a2      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x224>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d19d      	bne.n	80056fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f917 	bl	80059f8 <SPI_EndRxTxTransaction>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d006      	beq.n	80057de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057dc:	e010      	b.n	8005800 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	e000      	b.n	8005800 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005814:	4618      	mov	r0, r3
 8005816:	3730      	adds	r7, #48	; 0x30
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800582c:	f7fc ffac 	bl	8002788 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	4413      	add	r3, r2
 800583a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800583c:	f7fc ffa4 	bl	8002788 <HAL_GetTick>
 8005840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005842:	4b39      	ldr	r3, [pc, #228]	; (8005928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	015b      	lsls	r3, r3, #5
 8005848:	0d1b      	lsrs	r3, r3, #20
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	fb02 f303 	mul.w	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005852:	e054      	b.n	80058fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d050      	beq.n	80058fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800585c:	f7fc ff94 	bl	8002788 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	429a      	cmp	r2, r3
 800586a:	d902      	bls.n	8005872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d13d      	bne.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800588a:	d111      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005894:	d004      	beq.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589e:	d107      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b8:	d10f      	bne.n	80058da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e017      	b.n	800591e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4013      	ands	r3, r2
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	429a      	cmp	r2, r3
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	429a      	cmp	r2, r3
 800591a:	d19b      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000008 	.word	0x20000008

0800592c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005940:	d111      	bne.n	8005966 <SPI_EndRxTransaction+0x3a>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594a:	d004      	beq.n	8005956 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005954:	d107      	bne.n	8005966 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596e:	d12a      	bne.n	80059c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d012      	beq.n	80059a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2200      	movs	r2, #0
 8005982:	2180      	movs	r1, #128	; 0x80
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff ff49 	bl	800581c <SPI_WaitFlagStateUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02d      	beq.n	80059ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e026      	b.n	80059ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2200      	movs	r2, #0
 80059a8:	2101      	movs	r1, #1
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff ff36 	bl	800581c <SPI_WaitFlagStateUntilTimeout>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01a      	beq.n	80059ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e013      	b.n	80059ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2200      	movs	r2, #0
 80059ce:	2101      	movs	r1, #1
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ff23 	bl	800581c <SPI_WaitFlagStateUntilTimeout>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e000      	b.n	80059ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a04:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <SPI_EndRxTxTransaction+0x7c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	; (8005a78 <SPI_EndRxTxTransaction+0x80>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	0d5b      	lsrs	r3, r3, #21
 8005a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a14:	fb02 f303 	mul.w	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a22:	d112      	bne.n	8005a4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2180      	movs	r1, #128	; 0x80
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fef4 	bl	800581c <SPI_WaitFlagStateUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d016      	beq.n	8005a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f043 0220 	orr.w	r2, r3, #32
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e00f      	b.n	8005a6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	3b01      	subs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d0f2      	beq.n	8005a4a <SPI_EndRxTxTransaction+0x52>
 8005a64:	e000      	b.n	8005a68 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a66:	bf00      	nop
  }

  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000008 	.word	0x20000008
 8005a78:	165e9f81 	.word	0x165e9f81

08005a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e041      	b.n	8005b12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb fe48 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f000 fce2 	bl	8006484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d001      	beq.n	8005b34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e046      	b.n	8005bc2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <HAL_TIM_Base_Start+0xb4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d022      	beq.n	8005b8c <HAL_TIM_Base_Start+0x70>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4e:	d01d      	beq.n	8005b8c <HAL_TIM_Base_Start+0x70>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <HAL_TIM_Base_Start+0xb8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d018      	beq.n	8005b8c <HAL_TIM_Base_Start+0x70>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <HAL_TIM_Base_Start+0xbc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <HAL_TIM_Base_Start+0x70>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1c      	ldr	r2, [pc, #112]	; (8005bdc <HAL_TIM_Base_Start+0xc0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00e      	beq.n	8005b8c <HAL_TIM_Base_Start+0x70>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1b      	ldr	r2, [pc, #108]	; (8005be0 <HAL_TIM_Base_Start+0xc4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_TIM_Base_Start+0x70>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <HAL_TIM_Base_Start+0xc8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_TIM_Base_Start+0x70>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <HAL_TIM_Base_Start+0xcc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d111      	bne.n	8005bb0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0307 	and.w	r3, r3, #7
 8005b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d010      	beq.n	8005bc0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0201 	orr.w	r2, r2, #1
 8005bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bae:	e007      	b.n	8005bc0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40001800 	.word	0x40001800

08005bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e04e      	b.n	8005ca2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0201 	orr.w	r2, r2, #1
 8005c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a23      	ldr	r2, [pc, #140]	; (8005cb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d01d      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1f      	ldr	r2, [pc, #124]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <HAL_TIM_Base_Start_IT+0xd0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a19      	ldr	r2, [pc, #100]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIM_Base_Start_IT+0x80>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d111      	bne.n	8005c90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0307 	and.w	r3, r3, #7
 8005c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d010      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8e:	e007      	b.n	8005ca0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40010000 	.word	0x40010000
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	40010400 	.word	0x40010400
 8005cc4:	40014000 	.word	0x40014000
 8005cc8:	40001800 	.word	0x40001800

08005ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f839 	bl	8005d6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 fbba 	bl	8006484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d109      	bne.n	8005da4 <HAL_TIM_PWM_Start+0x24>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e022      	b.n	8005dea <HAL_TIM_PWM_Start+0x6a>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d109      	bne.n	8005dbe <HAL_TIM_PWM_Start+0x3e>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	bf14      	ite	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	2300      	moveq	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	e015      	b.n	8005dea <HAL_TIM_PWM_Start+0x6a>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d109      	bne.n	8005dd8 <HAL_TIM_PWM_Start+0x58>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	bf14      	ite	ne
 8005dd0:	2301      	movne	r3, #1
 8005dd2:	2300      	moveq	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	e008      	b.n	8005dea <HAL_TIM_PWM_Start+0x6a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	bf14      	ite	ne
 8005de4:	2301      	movne	r3, #1
 8005de6:	2300      	moveq	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e07c      	b.n	8005eec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <HAL_TIM_PWM_Start+0x82>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e00:	e013      	b.n	8005e2a <HAL_TIM_PWM_Start+0xaa>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x92>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e10:	e00b      	b.n	8005e2a <HAL_TIM_PWM_Start+0xaa>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_PWM_Start+0xa2>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e20:	e003      	b.n	8005e2a <HAL_TIM_PWM_Start+0xaa>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f000 fe10 	bl	8006a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ef4 <HAL_TIM_PWM_Start+0x174>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_TIM_PWM_Start+0xcc>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <HAL_TIM_PWM_Start+0x178>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIM_PWM_Start+0xd0>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e000      	b.n	8005e52 <HAL_TIM_PWM_Start+0xd2>
 8005e50:	2300      	movs	r3, #0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d007      	beq.n	8005e66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a22      	ldr	r2, [pc, #136]	; (8005ef4 <HAL_TIM_PWM_Start+0x174>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <HAL_TIM_PWM_Start+0x17c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_TIM_PWM_Start+0x180>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1c      	ldr	r2, [pc, #112]	; (8005f04 <HAL_TIM_PWM_Start+0x184>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a16      	ldr	r2, [pc, #88]	; (8005ef8 <HAL_TIM_PWM_Start+0x178>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <HAL_TIM_PWM_Start+0x188>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x136>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <HAL_TIM_PWM_Start+0x18c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d111      	bne.n	8005eda <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d010      	beq.n	8005eea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed8:	e007      	b.n	8005eea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f042 0201 	orr.w	r2, r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40010000 	.word	0x40010000
 8005ef8:	40010400 	.word	0x40010400
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40001800 	.word	0x40001800

08005f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d122      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d11b      	bne.n	8005f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0202 	mvn.w	r2, #2
 8005f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa77 	bl	8006446 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa69 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa7a 	bl	800645a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d122      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d11b      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0204 	mvn.w	r2, #4
 8005f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fa4d 	bl	8006446 <HAL_TIM_IC_CaptureCallback>
 8005fac:	e005      	b.n	8005fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fa3f 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa50 	bl	800645a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d122      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d11b      	bne.n	8006014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0208 	mvn.w	r2, #8
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2204      	movs	r2, #4
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa23 	bl	8006446 <HAL_TIM_IC_CaptureCallback>
 8006000:	e005      	b.n	800600e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa15 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fa26 	bl	800645a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b10      	cmp	r3, #16
 8006020:	d122      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b10      	cmp	r3, #16
 800602e:	d11b      	bne.n	8006068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 0210 	mvn.w	r2, #16
 8006038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2208      	movs	r2, #8
 800603e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f9f9 	bl	8006446 <HAL_TIM_IC_CaptureCallback>
 8006054:	e005      	b.n	8006062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f9eb 	bl	8006432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f9fc 	bl	800645a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10e      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0201 	mvn.w	r2, #1
 800608c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fb fa40 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609e:	2b80      	cmp	r3, #128	; 0x80
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ac:	2b80      	cmp	r3, #128	; 0x80
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fdca 	bl	8006c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d10e      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d107      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9c1 	bl	800646e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d10e      	bne.n	8006118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b20      	cmp	r3, #32
 8006106:	d107      	bne.n	8006118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0220 	mvn.w	r2, #32
 8006110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fd94 	bl	8006c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d101      	bne.n	800613e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800613a:	2302      	movs	r3, #2
 800613c:	e0ae      	b.n	800629c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b0c      	cmp	r3, #12
 800614a:	f200 809f 	bhi.w	800628c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800614e:	a201      	add	r2, pc, #4	; (adr r2, 8006154 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	08006189 	.word	0x08006189
 8006158:	0800628d 	.word	0x0800628d
 800615c:	0800628d 	.word	0x0800628d
 8006160:	0800628d 	.word	0x0800628d
 8006164:	080061c9 	.word	0x080061c9
 8006168:	0800628d 	.word	0x0800628d
 800616c:	0800628d 	.word	0x0800628d
 8006170:	0800628d 	.word	0x0800628d
 8006174:	0800620b 	.word	0x0800620b
 8006178:	0800628d 	.word	0x0800628d
 800617c:	0800628d 	.word	0x0800628d
 8006180:	0800628d 	.word	0x0800628d
 8006184:	0800624b 	.word	0x0800624b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68b9      	ldr	r1, [r7, #8]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 fa18 	bl	80065c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0208 	orr.w	r2, r2, #8
 80061a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0204 	bic.w	r2, r2, #4
 80061b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6999      	ldr	r1, [r3, #24]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	619a      	str	r2, [r3, #24]
      break;
 80061c6:	e064      	b.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fa68 	bl	80066a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6999      	ldr	r1, [r3, #24]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	021a      	lsls	r2, r3, #8
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	619a      	str	r2, [r3, #24]
      break;
 8006208:	e043      	b.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68b9      	ldr	r1, [r7, #8]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fabd 	bl	8006790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0208 	orr.w	r2, r2, #8
 8006224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0204 	bic.w	r2, r2, #4
 8006234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69d9      	ldr	r1, [r3, #28]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	61da      	str	r2, [r3, #28]
      break;
 8006248:	e023      	b.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fb11 	bl	8006878 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69d9      	ldr	r1, [r3, #28]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	021a      	lsls	r2, r3, #8
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	61da      	str	r2, [r3, #28]
      break;
 800628a:	e002      	b.n	8006292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
      break;
 8006290:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIM_ConfigClockSource+0x1c>
 80062bc:	2302      	movs	r3, #2
 80062be:	e0b4      	b.n	800642a <HAL_TIM_ConfigClockSource+0x186>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f8:	d03e      	beq.n	8006378 <HAL_TIM_ConfigClockSource+0xd4>
 80062fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fe:	f200 8087 	bhi.w	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006306:	f000 8086 	beq.w	8006416 <HAL_TIM_ConfigClockSource+0x172>
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630e:	d87f      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006310:	2b70      	cmp	r3, #112	; 0x70
 8006312:	d01a      	beq.n	800634a <HAL_TIM_ConfigClockSource+0xa6>
 8006314:	2b70      	cmp	r3, #112	; 0x70
 8006316:	d87b      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006318:	2b60      	cmp	r3, #96	; 0x60
 800631a:	d050      	beq.n	80063be <HAL_TIM_ConfigClockSource+0x11a>
 800631c:	2b60      	cmp	r3, #96	; 0x60
 800631e:	d877      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006320:	2b50      	cmp	r3, #80	; 0x50
 8006322:	d03c      	beq.n	800639e <HAL_TIM_ConfigClockSource+0xfa>
 8006324:	2b50      	cmp	r3, #80	; 0x50
 8006326:	d873      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d058      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x13a>
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	d86f      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006330:	2b30      	cmp	r3, #48	; 0x30
 8006332:	d064      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15a>
 8006334:	2b30      	cmp	r3, #48	; 0x30
 8006336:	d86b      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006338:	2b20      	cmp	r3, #32
 800633a:	d060      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15a>
 800633c:	2b20      	cmp	r3, #32
 800633e:	d867      	bhi.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d05c      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15a>
 8006344:	2b10      	cmp	r3, #16
 8006346:	d05a      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x15a>
 8006348:	e062      	b.n	8006410 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6818      	ldr	r0, [r3, #0]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	6899      	ldr	r1, [r3, #8]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f000 fb5d 	bl	8006a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800636c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	609a      	str	r2, [r3, #8]
      break;
 8006376:	e04f      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	6899      	ldr	r1, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f000 fb46 	bl	8006a18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800639a:	609a      	str	r2, [r3, #8]
      break;
 800639c:	e03c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 faba 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2150      	movs	r1, #80	; 0x50
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fb13 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 80063bc:	e02c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 fad9 	bl	8006982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2160      	movs	r1, #96	; 0x60
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fb03 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 80063dc:	e01c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 fa9a 	bl	8006924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2140      	movs	r1, #64	; 0x40
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 faf3 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 80063fc:	e00c      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f000 faea 	bl	80069e2 <TIM_ITRx_SetConfig>
      break;
 800640e:	e003      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	73fb      	strb	r3, [r7, #15]
      break;
 8006414:	e000      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006416:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006446:	b480      	push	{r7}
 8006448:	b083      	sub	sp, #12
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a40      	ldr	r2, [pc, #256]	; (8006598 <TIM_Base_SetConfig+0x114>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a2:	d00f      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a3d      	ldr	r2, [pc, #244]	; (800659c <TIM_Base_SetConfig+0x118>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3c      	ldr	r2, [pc, #240]	; (80065a0 <TIM_Base_SetConfig+0x11c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3b      	ldr	r2, [pc, #236]	; (80065a4 <TIM_Base_SetConfig+0x120>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3a      	ldr	r2, [pc, #232]	; (80065a8 <TIM_Base_SetConfig+0x124>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d108      	bne.n	80064d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2f      	ldr	r2, [pc, #188]	; (8006598 <TIM_Base_SetConfig+0x114>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d02b      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d027      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <TIM_Base_SetConfig+0x118>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d023      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2b      	ldr	r2, [pc, #172]	; (80065a0 <TIM_Base_SetConfig+0x11c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01f      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <TIM_Base_SetConfig+0x120>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d01b      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a29      	ldr	r2, [pc, #164]	; (80065a8 <TIM_Base_SetConfig+0x124>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d017      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a28      	ldr	r2, [pc, #160]	; (80065ac <TIM_Base_SetConfig+0x128>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <TIM_Base_SetConfig+0x12c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00f      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <TIM_Base_SetConfig+0x130>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <TIM_Base_SetConfig+0x134>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a24      	ldr	r2, [pc, #144]	; (80065bc <TIM_Base_SetConfig+0x138>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a23      	ldr	r2, [pc, #140]	; (80065c0 <TIM_Base_SetConfig+0x13c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d108      	bne.n	8006548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <TIM_Base_SetConfig+0x114>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_Base_SetConfig+0xf8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a0c      	ldr	r2, [pc, #48]	; (80065a8 <TIM_Base_SetConfig+0x124>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d103      	bne.n	8006584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	615a      	str	r2, [r3, #20]
}
 800658a:	bf00      	nop
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40010400 	.word	0x40010400
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40014400 	.word	0x40014400
 80065b4:	40014800 	.word	0x40014800
 80065b8:	40001800 	.word	0x40001800
 80065bc:	40001c00 	.word	0x40001c00
 80065c0:	40002000 	.word	0x40002000

080065c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f023 0201 	bic.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f023 0302 	bic.w	r3, r3, #2
 800660c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a20      	ldr	r2, [pc, #128]	; (800669c <TIM_OC1_SetConfig+0xd8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC1_SetConfig+0x64>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <TIM_OC1_SetConfig+0xdc>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d10c      	bne.n	8006642 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f023 0308 	bic.w	r3, r3, #8
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f023 0304 	bic.w	r3, r3, #4
 8006640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a15      	ldr	r2, [pc, #84]	; (800669c <TIM_OC1_SetConfig+0xd8>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d003      	beq.n	8006652 <TIM_OC1_SetConfig+0x8e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <TIM_OC1_SetConfig+0xdc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d111      	bne.n	8006676 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400

080066a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0320 	bic.w	r3, r3, #32
 80066ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a22      	ldr	r2, [pc, #136]	; (8006788 <TIM_OC2_SetConfig+0xe4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC2_SetConfig+0x68>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a21      	ldr	r2, [pc, #132]	; (800678c <TIM_OC2_SetConfig+0xe8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d10d      	bne.n	8006728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a17      	ldr	r2, [pc, #92]	; (8006788 <TIM_OC2_SetConfig+0xe4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_OC2_SetConfig+0x94>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a16      	ldr	r2, [pc, #88]	; (800678c <TIM_OC2_SetConfig+0xe8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d113      	bne.n	8006760 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800673e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4313      	orrs	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	621a      	str	r2, [r3, #32]
}
 800677a:	bf00      	nop
 800677c:	371c      	adds	r7, #28
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40010000 	.word	0x40010000
 800678c:	40010400 	.word	0x40010400

08006790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <TIM_OC3_SetConfig+0xe0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_OC3_SetConfig+0x66>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a20      	ldr	r2, [pc, #128]	; (8006874 <TIM_OC3_SetConfig+0xe4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d10d      	bne.n	8006812 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	021b      	lsls	r3, r3, #8
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a16      	ldr	r2, [pc, #88]	; (8006870 <TIM_OC3_SetConfig+0xe0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC3_SetConfig+0x92>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a15      	ldr	r2, [pc, #84]	; (8006874 <TIM_OC3_SetConfig+0xe4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d113      	bne.n	800684a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40010000 	.word	0x40010000
 8006874:	40010400 	.word	0x40010400

08006878 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	021b      	lsls	r3, r3, #8
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	031b      	lsls	r3, r3, #12
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a12      	ldr	r2, [pc, #72]	; (800691c <TIM_OC4_SetConfig+0xa4>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC4_SetConfig+0x68>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a11      	ldr	r2, [pc, #68]	; (8006920 <TIM_OC4_SetConfig+0xa8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d109      	bne.n	80068f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	40010000 	.word	0x40010000
 8006920:	40010400 	.word	0x40010400

08006924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800694e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 030a 	bic.w	r3, r3, #10
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006982:	b480      	push	{r7}
 8006984:	b087      	sub	sp, #28
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f023 0210 	bic.w	r2, r3, #16
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f043 0307 	orr.w	r3, r3, #7
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	021a      	lsls	r2, r3, #8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	431a      	orrs	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e05a      	b.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a21      	ldr	r2, [pc, #132]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d022      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d01d      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1d      	ldr	r2, [pc, #116]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d018      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1b      	ldr	r2, [pc, #108]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1a      	ldr	r2, [pc, #104]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a18      	ldr	r2, [pc, #96]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d009      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10c      	bne.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40000c00 	.word	0x40000c00
 8006b90:	40010400 	.word	0x40010400
 8006b94:	40014000 	.word	0x40014000
 8006b98:	40001800 	.word	0x40001800

08006b9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e03d      	b.n	8006c34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e03f      	b.n	8006cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fa fdca 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2224      	movs	r2, #36	; 0x24
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f829 	bl	8006d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2220      	movs	r2, #32
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d08:	b0c0      	sub	sp, #256	; 0x100
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d20:	68d9      	ldr	r1, [r3, #12]
 8006d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	ea40 0301 	orr.w	r3, r0, r1
 8006d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d5c:	f021 010c 	bic.w	r1, r1, #12
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7e:	6999      	ldr	r1, [r3, #24]
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	ea40 0301 	orr.w	r3, r0, r1
 8006d8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	4b8f      	ldr	r3, [pc, #572]	; (8006fd0 <UART_SetConfig+0x2cc>)
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d005      	beq.n	8006da4 <UART_SetConfig+0xa0>
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b8d      	ldr	r3, [pc, #564]	; (8006fd4 <UART_SetConfig+0x2d0>)
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d104      	bne.n	8006dae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006da4:	f7fd f884 	bl	8003eb0 <HAL_RCC_GetPCLK2Freq>
 8006da8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006dac:	e003      	b.n	8006db6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dae:	f7fd f86b 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 8006db2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc0:	f040 810c 	bne.w	8006fdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006dd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	1891      	adds	r1, r2, r2
 8006ddc:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dde:	415b      	adcs	r3, r3
 8006de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006de2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006de6:	4621      	mov	r1, r4
 8006de8:	eb12 0801 	adds.w	r8, r2, r1
 8006dec:	4629      	mov	r1, r5
 8006dee:	eb43 0901 	adc.w	r9, r3, r1
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e06:	4690      	mov	r8, r2
 8006e08:	4699      	mov	r9, r3
 8006e0a:	4623      	mov	r3, r4
 8006e0c:	eb18 0303 	adds.w	r3, r8, r3
 8006e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e14:	462b      	mov	r3, r5
 8006e16:	eb49 0303 	adc.w	r3, r9, r3
 8006e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e32:	460b      	mov	r3, r1
 8006e34:	18db      	adds	r3, r3, r3
 8006e36:	653b      	str	r3, [r7, #80]	; 0x50
 8006e38:	4613      	mov	r3, r2
 8006e3a:	eb42 0303 	adc.w	r3, r2, r3
 8006e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e48:	f7f9 f9e2 	bl	8000210 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4b61      	ldr	r3, [pc, #388]	; (8006fd8 <UART_SetConfig+0x2d4>)
 8006e52:	fba3 2302 	umull	r2, r3, r3, r2
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	011c      	lsls	r4, r3, #4
 8006e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	464b      	mov	r3, r9
 8006e70:	1891      	adds	r1, r2, r2
 8006e72:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e74:	415b      	adcs	r3, r3
 8006e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e7c:	4641      	mov	r1, r8
 8006e7e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e82:	4649      	mov	r1, r9
 8006e84:	eb43 0b01 	adc.w	fp, r3, r1
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e9c:	4692      	mov	sl, r2
 8006e9e:	469b      	mov	fp, r3
 8006ea0:	4643      	mov	r3, r8
 8006ea2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	eb4b 0303 	adc.w	r3, fp, r3
 8006eb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ec0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ec4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	18db      	adds	r3, r3, r3
 8006ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ece:	4613      	mov	r3, r2
 8006ed0:	eb42 0303 	adc.w	r3, r2, r3
 8006ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ede:	f7f9 f997 	bl	8000210 <__aeabi_uldivmod>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4b3b      	ldr	r3, [pc, #236]	; (8006fd8 <UART_SetConfig+0x2d4>)
 8006eea:	fba3 2301 	umull	r2, r3, r3, r1
 8006eee:	095b      	lsrs	r3, r3, #5
 8006ef0:	2264      	movs	r2, #100	; 0x64
 8006ef2:	fb02 f303 	mul.w	r3, r2, r3
 8006ef6:	1acb      	subs	r3, r1, r3
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006efe:	4b36      	ldr	r3, [pc, #216]	; (8006fd8 <UART_SetConfig+0x2d4>)
 8006f00:	fba3 2302 	umull	r2, r3, r3, r2
 8006f04:	095b      	lsrs	r3, r3, #5
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f0c:	441c      	add	r4, r3
 8006f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	1891      	adds	r1, r2, r2
 8006f26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f28:	415b      	adcs	r3, r3
 8006f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f30:	4641      	mov	r1, r8
 8006f32:	1851      	adds	r1, r2, r1
 8006f34:	6339      	str	r1, [r7, #48]	; 0x30
 8006f36:	4649      	mov	r1, r9
 8006f38:	414b      	adcs	r3, r1
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f48:	4659      	mov	r1, fp
 8006f4a:	00cb      	lsls	r3, r1, #3
 8006f4c:	4651      	mov	r1, sl
 8006f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f52:	4651      	mov	r1, sl
 8006f54:	00ca      	lsls	r2, r1, #3
 8006f56:	4610      	mov	r0, r2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	189b      	adds	r3, r3, r2
 8006f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f64:	464b      	mov	r3, r9
 8006f66:	460a      	mov	r2, r1
 8006f68:	eb42 0303 	adc.w	r3, r2, r3
 8006f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f84:	460b      	mov	r3, r1
 8006f86:	18db      	adds	r3, r3, r3
 8006f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	eb42 0303 	adc.w	r3, r2, r3
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f9a:	f7f9 f939 	bl	8000210 <__aeabi_uldivmod>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <UART_SetConfig+0x2d4>)
 8006fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	2164      	movs	r1, #100	; 0x64
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	3332      	adds	r3, #50	; 0x32
 8006fb6:	4a08      	ldr	r2, [pc, #32]	; (8006fd8 <UART_SetConfig+0x2d4>)
 8006fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	f003 0207 	and.w	r2, r3, #7
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4422      	add	r2, r4
 8006fca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fcc:	e105      	b.n	80071da <UART_SetConfig+0x4d6>
 8006fce:	bf00      	nop
 8006fd0:	40011000 	.word	0x40011000
 8006fd4:	40011400 	.word	0x40011400
 8006fd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fe6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006fea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006fee:	4642      	mov	r2, r8
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	1891      	adds	r1, r2, r2
 8006ff4:	6239      	str	r1, [r7, #32]
 8006ff6:	415b      	adcs	r3, r3
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ffe:	4641      	mov	r1, r8
 8007000:	1854      	adds	r4, r2, r1
 8007002:	4649      	mov	r1, r9
 8007004:	eb43 0501 	adc.w	r5, r3, r1
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	00eb      	lsls	r3, r5, #3
 8007012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007016:	00e2      	lsls	r2, r4, #3
 8007018:	4614      	mov	r4, r2
 800701a:	461d      	mov	r5, r3
 800701c:	4643      	mov	r3, r8
 800701e:	18e3      	adds	r3, r4, r3
 8007020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007024:	464b      	mov	r3, r9
 8007026:	eb45 0303 	adc.w	r3, r5, r3
 800702a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800702e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800703a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800704a:	4629      	mov	r1, r5
 800704c:	008b      	lsls	r3, r1, #2
 800704e:	4621      	mov	r1, r4
 8007050:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007054:	4621      	mov	r1, r4
 8007056:	008a      	lsls	r2, r1, #2
 8007058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800705c:	f7f9 f8d8 	bl	8000210 <__aeabi_uldivmod>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	4b60      	ldr	r3, [pc, #384]	; (80071e8 <UART_SetConfig+0x4e4>)
 8007066:	fba3 2302 	umull	r2, r3, r3, r2
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	011c      	lsls	r4, r3, #4
 800706e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007072:	2200      	movs	r2, #0
 8007074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800707c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007080:	4642      	mov	r2, r8
 8007082:	464b      	mov	r3, r9
 8007084:	1891      	adds	r1, r2, r2
 8007086:	61b9      	str	r1, [r7, #24]
 8007088:	415b      	adcs	r3, r3
 800708a:	61fb      	str	r3, [r7, #28]
 800708c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007090:	4641      	mov	r1, r8
 8007092:	1851      	adds	r1, r2, r1
 8007094:	6139      	str	r1, [r7, #16]
 8007096:	4649      	mov	r1, r9
 8007098:	414b      	adcs	r3, r1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	f04f 0300 	mov.w	r3, #0
 80070a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070a8:	4659      	mov	r1, fp
 80070aa:	00cb      	lsls	r3, r1, #3
 80070ac:	4651      	mov	r1, sl
 80070ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070b2:	4651      	mov	r1, sl
 80070b4:	00ca      	lsls	r2, r1, #3
 80070b6:	4610      	mov	r0, r2
 80070b8:	4619      	mov	r1, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	4642      	mov	r2, r8
 80070be:	189b      	adds	r3, r3, r2
 80070c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070c4:	464b      	mov	r3, r9
 80070c6:	460a      	mov	r2, r1
 80070c8:	eb42 0303 	adc.w	r3, r2, r3
 80070cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80070da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070e8:	4649      	mov	r1, r9
 80070ea:	008b      	lsls	r3, r1, #2
 80070ec:	4641      	mov	r1, r8
 80070ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f2:	4641      	mov	r1, r8
 80070f4:	008a      	lsls	r2, r1, #2
 80070f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070fa:	f7f9 f889 	bl	8000210 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <UART_SetConfig+0x4e4>)
 8007104:	fba3 1302 	umull	r1, r3, r3, r2
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	2164      	movs	r1, #100	; 0x64
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	3332      	adds	r3, #50	; 0x32
 8007116:	4a34      	ldr	r2, [pc, #208]	; (80071e8 <UART_SetConfig+0x4e4>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007122:	441c      	add	r4, r3
 8007124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007128:	2200      	movs	r2, #0
 800712a:	673b      	str	r3, [r7, #112]	; 0x70
 800712c:	677a      	str	r2, [r7, #116]	; 0x74
 800712e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007132:	4642      	mov	r2, r8
 8007134:	464b      	mov	r3, r9
 8007136:	1891      	adds	r1, r2, r2
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	415b      	adcs	r3, r3
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007142:	4641      	mov	r1, r8
 8007144:	1851      	adds	r1, r2, r1
 8007146:	6039      	str	r1, [r7, #0]
 8007148:	4649      	mov	r1, r9
 800714a:	414b      	adcs	r3, r1
 800714c:	607b      	str	r3, [r7, #4]
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	f04f 0300 	mov.w	r3, #0
 8007156:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800715a:	4659      	mov	r1, fp
 800715c:	00cb      	lsls	r3, r1, #3
 800715e:	4651      	mov	r1, sl
 8007160:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007164:	4651      	mov	r1, sl
 8007166:	00ca      	lsls	r2, r1, #3
 8007168:	4610      	mov	r0, r2
 800716a:	4619      	mov	r1, r3
 800716c:	4603      	mov	r3, r0
 800716e:	4642      	mov	r2, r8
 8007170:	189b      	adds	r3, r3, r2
 8007172:	66bb      	str	r3, [r7, #104]	; 0x68
 8007174:	464b      	mov	r3, r9
 8007176:	460a      	mov	r2, r1
 8007178:	eb42 0303 	adc.w	r3, r2, r3
 800717c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	663b      	str	r3, [r7, #96]	; 0x60
 8007188:	667a      	str	r2, [r7, #100]	; 0x64
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007196:	4649      	mov	r1, r9
 8007198:	008b      	lsls	r3, r1, #2
 800719a:	4641      	mov	r1, r8
 800719c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071a0:	4641      	mov	r1, r8
 80071a2:	008a      	lsls	r2, r1, #2
 80071a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071a8:	f7f9 f832 	bl	8000210 <__aeabi_uldivmod>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	4b0d      	ldr	r3, [pc, #52]	; (80071e8 <UART_SetConfig+0x4e4>)
 80071b2:	fba3 1302 	umull	r1, r3, r3, r2
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	2164      	movs	r1, #100	; 0x64
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	3332      	adds	r3, #50	; 0x32
 80071c4:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <UART_SetConfig+0x4e4>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	f003 020f 	and.w	r2, r3, #15
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4422      	add	r2, r4
 80071d8:	609a      	str	r2, [r3, #8]
}
 80071da:	bf00      	nop
 80071dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071e0:	46bd      	mov	sp, r7
 80071e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071e6:	bf00      	nop
 80071e8:	51eb851f 	.word	0x51eb851f

080071ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f103 0208 	add.w	r2, r3, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f04f 32ff 	mov.w	r2, #4294967295
 8007204:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f103 0208 	add.w	r2, r3, #8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f103 0208 	add.w	r2, r3, #8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689a      	ldr	r2, [r3, #8]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	601a      	str	r2, [r3, #0]
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a4:	d103      	bne.n	80072ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e00c      	b.n	80072c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3308      	adds	r3, #8
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	e002      	b.n	80072bc <vListInsert+0x2e>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d2f6      	bcs.n	80072b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6892      	ldr	r2, [r2, #8]
 8007316:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6852      	ldr	r2, [r2, #4]
 8007320:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	429a      	cmp	r2, r3
 800732a:	d103      	bne.n	8007334 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800737e:	f001 fdb9 	bl	8008ef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	441a      	add	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ae:	3b01      	subs	r3, #1
 80073b0:	68f9      	ldr	r1, [r7, #12]
 80073b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	441a      	add	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	22ff      	movs	r2, #255	; 0xff
 80073ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d114      	bne.n	80073fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01a      	beq.n	8007412 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3310      	adds	r3, #16
 80073e0:	4618      	mov	r0, r3
 80073e2:	f001 f875 	bl	80084d0 <xTaskRemoveFromEventList>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d012      	beq.n	8007412 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <xQueueGenericReset+0xcc>)
 80073ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	e009      	b.n	8007412 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3310      	adds	r3, #16
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fef2 	bl	80071ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff feed 	bl	80071ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007412:	f001 fd9f 	bl	8008f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007416:	2301      	movs	r3, #1
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	; 0x28
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	613b      	str	r3, [r7, #16]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	fb02 f303 	mul.w	r3, r2, r3
 8007456:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	3348      	adds	r3, #72	; 0x48
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fe2b 	bl	80090b8 <pvPortMalloc>
 8007462:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d011      	beq.n	800748e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	3348      	adds	r3, #72	; 0x48
 8007472:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800747c:	79fa      	ldrb	r2, [r7, #7]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	68b9      	ldr	r1, [r7, #8]
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f805 	bl	8007498 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800748e:	69bb      	ldr	r3, [r7, #24]
	}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	e002      	b.n	80074ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074c6:	2101      	movs	r1, #1
 80074c8:	69b8      	ldr	r0, [r7, #24]
 80074ca:	f7ff ff43 	bl	8007354 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00e      	beq.n	8007502 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80074f6:	2300      	movs	r3, #0
 80074f8:	2200      	movs	r2, #0
 80074fa:	2100      	movs	r1, #0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f81d 	bl	800753c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007502:	bf00      	nop
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	4603      	mov	r3, r0
 8007512:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007514:	2301      	movs	r3, #1
 8007516:	617b      	str	r3, [r7, #20]
 8007518:	2300      	movs	r3, #0
 800751a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	461a      	mov	r2, r3
 8007520:	6939      	ldr	r1, [r7, #16]
 8007522:	6978      	ldr	r0, [r7, #20]
 8007524:	f7ff ff7e 	bl	8007424 <xQueueGenericCreate>
 8007528:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff ffd3 	bl	80074d6 <prvInitialiseMutex>

		return xNewQueue;
 8007530:	68fb      	ldr	r3, [r7, #12]
	}
 8007532:	4618      	mov	r0, r3
 8007534:	3718      	adds	r7, #24
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
	...

0800753c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08e      	sub	sp, #56	; 0x38
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800754a:	2300      	movs	r3, #0
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <xQueueGenericSend+0x32>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800756a:	bf00      	nop
 800756c:	e7fe      	b.n	800756c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <xQueueGenericSend+0x40>
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <xQueueGenericSend+0x44>
 800757c:	2301      	movs	r3, #1
 800757e:	e000      	b.n	8007582 <xQueueGenericSend+0x46>
 8007580:	2300      	movs	r3, #0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10a      	bne.n	800759c <xQueueGenericSend+0x60>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d103      	bne.n	80075aa <xQueueGenericSend+0x6e>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <xQueueGenericSend+0x72>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <xQueueGenericSend+0x74>
 80075ae:	2300      	movs	r3, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <xQueueGenericSend+0x8e>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	623b      	str	r3, [r7, #32]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075ca:	f001 f941 	bl	8008850 <xTaskGetSchedulerState>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <xQueueGenericSend+0x9e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <xQueueGenericSend+0xa2>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <xQueueGenericSend+0xa4>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10a      	bne.n	80075fa <xQueueGenericSend+0xbe>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	61fb      	str	r3, [r7, #28]
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075fa:	f001 fc7b 	bl	8008ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <xQueueGenericSend+0xd4>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b02      	cmp	r3, #2
 800760e:	d129      	bne.n	8007664 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007616:	f000 f9b3 	bl	8007980 <prvCopyDataToQueue>
 800761a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d010      	beq.n	8007646 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	3324      	adds	r3, #36	; 0x24
 8007628:	4618      	mov	r0, r3
 800762a:	f000 ff51 	bl	80084d0 <xTaskRemoveFromEventList>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d013      	beq.n	800765c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007634:	4b3f      	ldr	r3, [pc, #252]	; (8007734 <xQueueGenericSend+0x1f8>)
 8007636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	e00a      	b.n	800765c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d007      	beq.n	800765c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800764c:	4b39      	ldr	r3, [pc, #228]	; (8007734 <xQueueGenericSend+0x1f8>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800765c:	f001 fc7a 	bl	8008f54 <vPortExitCritical>
				return pdPASS;
 8007660:	2301      	movs	r3, #1
 8007662:	e063      	b.n	800772c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d103      	bne.n	8007672 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800766a:	f001 fc73 	bl	8008f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800766e:	2300      	movs	r3, #0
 8007670:	e05c      	b.n	800772c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007674:	2b00      	cmp	r3, #0
 8007676:	d106      	bne.n	8007686 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007678:	f107 0314 	add.w	r3, r7, #20
 800767c:	4618      	mov	r0, r3
 800767e:	f000 ff89 	bl	8008594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007682:	2301      	movs	r3, #1
 8007684:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007686:	f001 fc65 	bl	8008f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800768a:	f000 fd29 	bl	80080e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800768e:	f001 fc31 	bl	8008ef4 <vPortEnterCritical>
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007698:	b25b      	sxtb	r3, r3
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769e:	d103      	bne.n	80076a8 <xQueueGenericSend+0x16c>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ae:	b25b      	sxtb	r3, r3
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b4:	d103      	bne.n	80076be <xQueueGenericSend+0x182>
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076be:	f001 fc49 	bl	8008f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076c2:	1d3a      	adds	r2, r7, #4
 80076c4:	f107 0314 	add.w	r3, r7, #20
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 ff78 	bl	80085c0 <xTaskCheckForTimeOut>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d124      	bne.n	8007720 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076d8:	f000 fa24 	bl	8007b24 <prvIsQueueFull>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d018      	beq.n	8007714 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	3310      	adds	r3, #16
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fecc 	bl	8008488 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f2:	f000 f9af 	bl	8007a54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076f6:	f000 fd01 	bl	80080fc <xTaskResumeAll>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f47f af7c 	bne.w	80075fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <xQueueGenericSend+0x1f8>)
 8007704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	e772      	b.n	80075fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007716:	f000 f99d 	bl	8007a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800771a:	f000 fcef 	bl	80080fc <xTaskResumeAll>
 800771e:	e76c      	b.n	80075fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007722:	f000 f997 	bl	8007a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007726:	f000 fce9 	bl	80080fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800772a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800772c:	4618      	mov	r0, r3
 800772e:	3738      	adds	r7, #56	; 0x38
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08e      	sub	sp, #56	; 0x38
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800774a:	2300      	movs	r3, #0
 800774c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	623b      	str	r3, [r7, #32]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	61fb      	str	r3, [r7, #28]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007788:	f001 f862 	bl	8008850 <xTaskGetSchedulerState>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d102      	bne.n	8007798 <xQueueSemaphoreTake+0x60>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <xQueueSemaphoreTake+0x64>
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <xQueueSemaphoreTake+0x66>
 800779c:	2300      	movs	r3, #0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	61bb      	str	r3, [r7, #24]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077b8:	f001 fb9c 	bl	8008ef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d024      	beq.n	8007812 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	1e5a      	subs	r2, r3, #1
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d104      	bne.n	80077e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077d8:	f001 f9e2 	bl	8008ba0 <pvTaskIncrementMutexHeldCount>
 80077dc:	4602      	mov	r2, r0
 80077de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00f      	beq.n	800780a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	3310      	adds	r3, #16
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fe6e 	bl	80084d0 <xTaskRemoveFromEventList>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077fa:	4b54      	ldr	r3, [pc, #336]	; (800794c <xQueueSemaphoreTake+0x214>)
 80077fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800780a:	f001 fba3 	bl	8008f54 <vPortExitCritical>
				return pdPASS;
 800780e:	2301      	movs	r3, #1
 8007810:	e097      	b.n	8007942 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d111      	bne.n	800783c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	617b      	str	r3, [r7, #20]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007834:	f001 fb8e 	bl	8008f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007838:	2300      	movs	r3, #0
 800783a:	e082      	b.n	8007942 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800783c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800783e:	2b00      	cmp	r3, #0
 8007840:	d106      	bne.n	8007850 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007842:	f107 030c 	add.w	r3, r7, #12
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fea4 	bl	8008594 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007850:	f001 fb80 	bl	8008f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007854:	f000 fc44 	bl	80080e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007858:	f001 fb4c 	bl	8008ef4 <vPortEnterCritical>
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007862:	b25b      	sxtb	r3, r3
 8007864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007868:	d103      	bne.n	8007872 <xQueueSemaphoreTake+0x13a>
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007878:	b25b      	sxtb	r3, r3
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787e:	d103      	bne.n	8007888 <xQueueSemaphoreTake+0x150>
 8007880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007888:	f001 fb64 	bl	8008f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800788c:	463a      	mov	r2, r7
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	4611      	mov	r1, r2
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fe93 	bl	80085c0 <xTaskCheckForTimeOut>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d132      	bne.n	8007906 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078a2:	f000 f929 	bl	8007af8 <prvIsQueueEmpty>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d026      	beq.n	80078fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078b4:	f001 fb1e 	bl	8008ef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 ffe5 	bl	800888c <xTaskPriorityInherit>
 80078c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078c4:	f001 fb46 	bl	8008f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	4611      	mov	r1, r2
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fdd9 	bl	8008488 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078d8:	f000 f8bc 	bl	8007a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078dc:	f000 fc0e 	bl	80080fc <xTaskResumeAll>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f47f af68 	bne.w	80077b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80078e8:	4b18      	ldr	r3, [pc, #96]	; (800794c <xQueueSemaphoreTake+0x214>)
 80078ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	e75e      	b.n	80077b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078fc:	f000 f8aa 	bl	8007a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007900:	f000 fbfc 	bl	80080fc <xTaskResumeAll>
 8007904:	e758      	b.n	80077b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007908:	f000 f8a4 	bl	8007a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800790c:	f000 fbf6 	bl	80080fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007912:	f000 f8f1 	bl	8007af8 <prvIsQueueEmpty>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	f43f af4d 	beq.w	80077b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00d      	beq.n	8007940 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007924:	f001 fae6 	bl	8008ef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800792a:	f000 f811 	bl	8007950 <prvGetDisinheritPriorityAfterTimeout>
 800792e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f8a4 	bl	8008a84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800793c:	f001 fb0a 	bl	8008f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007942:	4618      	mov	r0, r3
 8007944:	3738      	adds	r7, #56	; 0x38
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	2b00      	cmp	r3, #0
 800795e:	d006      	beq.n	800796e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f1c3 0307 	rsb	r3, r3, #7
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e001      	b.n	8007972 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007972:	68fb      	ldr	r3, [r7, #12]
	}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007994:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10d      	bne.n	80079ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d14d      	bne.n	8007a42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 ffe4 	bl	8008978 <xTaskPriorityDisinherit>
 80079b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	e043      	b.n	8007a42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d119      	bne.n	80079f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6858      	ldr	r0, [r3, #4]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	461a      	mov	r2, r3
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	f001 fd84 	bl	80094d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	441a      	add	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d32b      	bcc.n	8007a42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	e026      	b.n	8007a42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68d8      	ldr	r0, [r3, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	461a      	mov	r2, r3
 80079fe:	68b9      	ldr	r1, [r7, #8]
 8007a00:	f001 fd6a 	bl	80094d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	441a      	add	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d207      	bcs.n	8007a30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	425b      	negs	r3, r3
 8007a2a:	441a      	add	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d105      	bne.n	8007a42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a4a:	697b      	ldr	r3, [r7, #20]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a5c:	f001 fa4a 	bl	8008ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a68:	e011      	b.n	8007a8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d012      	beq.n	8007a98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3324      	adds	r3, #36	; 0x24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fd2a 	bl	80084d0 <xTaskRemoveFromEventList>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a82:	f000 fdff 	bl	8008684 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dce9      	bgt.n	8007a6a <prvUnlockQueue+0x16>
 8007a96:	e000      	b.n	8007a9a <prvUnlockQueue+0x46>
					break;
 8007a98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	22ff      	movs	r2, #255	; 0xff
 8007a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007aa2:	f001 fa57 	bl	8008f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007aa6:	f001 fa25 	bl	8008ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ab0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ab2:	e011      	b.n	8007ad8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d012      	beq.n	8007ae2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3310      	adds	r3, #16
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 fd05 	bl	80084d0 <xTaskRemoveFromEventList>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007acc:	f000 fdda 	bl	8008684 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dce9      	bgt.n	8007ab4 <prvUnlockQueue+0x60>
 8007ae0:	e000      	b.n	8007ae4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ae2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	22ff      	movs	r2, #255	; 0xff
 8007ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007aec:	f001 fa32 	bl	8008f54 <vPortExitCritical>
}
 8007af0:	bf00      	nop
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b00:	f001 f9f8 	bl	8008ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d102      	bne.n	8007b12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	e001      	b.n	8007b16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b16:	f001 fa1d 	bl	8008f54 <vPortExitCritical>

	return xReturn;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b2c:	f001 f9e2 	bl	8008ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d102      	bne.n	8007b42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	e001      	b.n	8007b46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b46:	f001 fa05 	bl	8008f54 <vPortExitCritical>

	return xReturn;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08e      	sub	sp, #56	; 0x38
 8007b58:	af04      	add	r7, sp, #16
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	623b      	str	r3, [r7, #32]
}
 8007b7a:	bf00      	nop
 8007b7c:	e7fe      	b.n	8007b7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <xTaskCreateStatic+0x46>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	61fb      	str	r3, [r7, #28]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b9a:	23b4      	movs	r3, #180	; 0xb4
 8007b9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2bb4      	cmp	r3, #180	; 0xb4
 8007ba2:	d00a      	beq.n	8007bba <xTaskCreateStatic+0x66>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	61bb      	str	r3, [r7, #24]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01e      	beq.n	8007c00 <xTaskCreateStatic+0xac>
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01b      	beq.n	8007c00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bda:	2300      	movs	r3, #0
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	f107 0314 	add.w	r3, r7, #20
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f850 	bl	8007c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bfa:	f000 f8eb 	bl	8007dd4 <prvAddNewTaskToReadyList>
 8007bfe:	e001      	b.n	8007c04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c04:	697b      	ldr	r3, [r7, #20]
	}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3728      	adds	r7, #40	; 0x28
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b08c      	sub	sp, #48	; 0x30
 8007c12:	af04      	add	r7, sp, #16
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 fa48 	bl	80090b8 <pvPortMalloc>
 8007c28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00e      	beq.n	8007c4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c30:	20b4      	movs	r0, #180	; 0xb4
 8007c32:	f001 fa41 	bl	80090b8 <pvPortMalloc>
 8007c36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
 8007c44:	e005      	b.n	8007c52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c46:	6978      	ldr	r0, [r7, #20]
 8007c48:	f001 fb02 	bl	8009250 <vPortFree>
 8007c4c:	e001      	b.n	8007c52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d017      	beq.n	8007c88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c60:	88fa      	ldrh	r2, [r7, #6]
 8007c62:	2300      	movs	r3, #0
 8007c64:	9303      	str	r3, [sp, #12]
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	9302      	str	r3, [sp, #8]
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	9301      	str	r3, [sp, #4]
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	9300      	str	r3, [sp, #0]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f80e 	bl	8007c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c7c:	69f8      	ldr	r0, [r7, #28]
 8007c7e:	f000 f8a9 	bl	8007dd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	e002      	b.n	8007c8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c88:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3720      	adds	r7, #32
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b088      	sub	sp, #32
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	617b      	str	r3, [r7, #20]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01f      	beq.n	8007d26 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
 8007cea:	e012      	b.n	8007d12 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	7819      	ldrb	r1, [r3, #0]
 8007cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3334      	adds	r3, #52	; 0x34
 8007cfc:	460a      	mov	r2, r1
 8007cfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d006      	beq.n	8007d1a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	2b0f      	cmp	r3, #15
 8007d16:	d9e9      	bls.n	8007cec <prvInitialiseNewTask+0x54>
 8007d18:	e000      	b.n	8007d1c <prvInitialiseNewTask+0x84>
			{
				break;
 8007d1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d24:	e003      	b.n	8007d2e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	2b06      	cmp	r3, #6
 8007d32:	d901      	bls.n	8007d38 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d34:	2306      	movs	r3, #6
 8007d36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d42:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	2200      	movs	r2, #0
 8007d48:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fa6c 	bl	800722c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	3318      	adds	r3, #24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fa67 	bl	800722c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	f1c3 0207 	rsb	r2, r3, #7
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	334c      	adds	r3, #76	; 0x4c
 8007d88:	2260      	movs	r2, #96	; 0x60
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 fbb1 	bl	80094f4 <memset>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	4a0c      	ldr	r2, [pc, #48]	; (8007dc8 <prvInitialiseNewTask+0x130>)
 8007d96:	651a      	str	r2, [r3, #80]	; 0x50
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	4a0c      	ldr	r2, [pc, #48]	; (8007dcc <prvInitialiseNewTask+0x134>)
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	4a0b      	ldr	r2, [pc, #44]	; (8007dd0 <prvInitialiseNewTask+0x138>)
 8007da2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	68f9      	ldr	r1, [r7, #12]
 8007da8:	69b8      	ldr	r0, [r7, #24]
 8007daa:	f000 ff73 	bl	8008c94 <pxPortInitialiseStack>
 8007dae:	4602      	mov	r2, r0
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dc0:	bf00      	nop
 8007dc2:	3720      	adds	r7, #32
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	08009730 	.word	0x08009730
 8007dcc:	08009750 	.word	0x08009750
 8007dd0:	08009710 	.word	0x08009710

08007dd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ddc:	f001 f88a 	bl	8008ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007de0:	4b2a      	ldr	r3, [pc, #168]	; (8007e8c <prvAddNewTaskToReadyList+0xb8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a29      	ldr	r2, [pc, #164]	; (8007e8c <prvAddNewTaskToReadyList+0xb8>)
 8007de8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dea:	4b29      	ldr	r3, [pc, #164]	; (8007e90 <prvAddNewTaskToReadyList+0xbc>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007df2:	4a27      	ldr	r2, [pc, #156]	; (8007e90 <prvAddNewTaskToReadyList+0xbc>)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007df8:	4b24      	ldr	r3, [pc, #144]	; (8007e8c <prvAddNewTaskToReadyList+0xb8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d110      	bne.n	8007e22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e00:	f000 fc64 	bl	80086cc <prvInitialiseTaskLists>
 8007e04:	e00d      	b.n	8007e22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e06:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <prvAddNewTaskToReadyList+0xc0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e0e:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <prvAddNewTaskToReadyList+0xbc>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d802      	bhi.n	8007e22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e1c:	4a1c      	ldr	r2, [pc, #112]	; (8007e90 <prvAddNewTaskToReadyList+0xbc>)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e22:	4b1d      	ldr	r3, [pc, #116]	; (8007e98 <prvAddNewTaskToReadyList+0xc4>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3301      	adds	r3, #1
 8007e28:	4a1b      	ldr	r2, [pc, #108]	; (8007e98 <prvAddNewTaskToReadyList+0xc4>)
 8007e2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e30:	2201      	movs	r2, #1
 8007e32:	409a      	lsls	r2, r3
 8007e34:	4b19      	ldr	r3, [pc, #100]	; (8007e9c <prvAddNewTaskToReadyList+0xc8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	4a18      	ldr	r2, [pc, #96]	; (8007e9c <prvAddNewTaskToReadyList+0xc8>)
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <prvAddNewTaskToReadyList+0xcc>)
 8007e4c:	441a      	add	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7ff f9f6 	bl	8007246 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e5a:	f001 f87b 	bl	8008f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <prvAddNewTaskToReadyList+0xc0>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00e      	beq.n	8007e84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e66:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <prvAddNewTaskToReadyList+0xbc>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d207      	bcs.n	8007e84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e74:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <prvAddNewTaskToReadyList+0xd0>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	200006cc 	.word	0x200006cc
 8007e90:	200005cc 	.word	0x200005cc
 8007e94:	200006d8 	.word	0x200006d8
 8007e98:	200006e8 	.word	0x200006e8
 8007e9c:	200006d4 	.word	0x200006d4
 8007ea0:	200005d0 	.word	0x200005d0
 8007ea4:	e000ed04 	.word	0xe000ed04

08007ea8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	; 0x28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	617b      	str	r3, [r7, #20]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <vTaskDelayUntil+0x46>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	613b      	str	r3, [r7, #16]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007eee:	4b2a      	ldr	r3, [pc, #168]	; (8007f98 <vTaskDelayUntil+0xf0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <vTaskDelayUntil+0x64>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	60fb      	str	r3, [r7, #12]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007f0c:	f000 f8e8 	bl	80080e0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f10:	4b22      	ldr	r3, [pc, #136]	; (8007f9c <vTaskDelayUntil+0xf4>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d20b      	bcs.n	8007f42 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d211      	bcs.n	8007f58 <vTaskDelayUntil+0xb0>
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d90d      	bls.n	8007f58 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f40:	e00a      	b.n	8007f58 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d303      	bcc.n	8007f54 <vTaskDelayUntil+0xac>
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d901      	bls.n	8007f58 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f54:	2301      	movs	r3, #1
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fe2b 	bl	8008bc8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f72:	f000 f8c3 	bl	80080fc <xTaskResumeAll>
 8007f76:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d107      	bne.n	8007f8e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007f7e:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <vTaskDelayUntil+0xf8>)
 8007f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f8e:	bf00      	nop
 8007f90:	3728      	adds	r7, #40	; 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200006f4 	.word	0x200006f4
 8007f9c:	200006d0 	.word	0x200006d0
 8007fa0:	e000ed04 	.word	0xe000ed04

08007fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d017      	beq.n	8007fe6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fb6:	4b13      	ldr	r3, [pc, #76]	; (8008004 <vTaskDelay+0x60>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <vTaskDelay+0x30>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60bb      	str	r3, [r7, #8]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fd4:	f000 f884 	bl	80080e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fd8:	2100      	movs	r1, #0
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fdf4 	bl	8008bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fe0:	f000 f88c 	bl	80080fc <xTaskResumeAll>
 8007fe4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d107      	bne.n	8007ffc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fec:	4b06      	ldr	r3, [pc, #24]	; (8008008 <vTaskDelay+0x64>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	200006f4 	.word	0x200006f4
 8008008:	e000ed04 	.word	0xe000ed04

0800800c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08a      	sub	sp, #40	; 0x28
 8008010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800801a:	463a      	mov	r2, r7
 800801c:	1d39      	adds	r1, r7, #4
 800801e:	f107 0308 	add.w	r3, r7, #8
 8008022:	4618      	mov	r0, r3
 8008024:	f7f8 fe78 	bl	8000d18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	9202      	str	r2, [sp, #8]
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	2300      	movs	r3, #0
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2300      	movs	r3, #0
 8008038:	460a      	mov	r2, r1
 800803a:	4921      	ldr	r1, [pc, #132]	; (80080c0 <vTaskStartScheduler+0xb4>)
 800803c:	4821      	ldr	r0, [pc, #132]	; (80080c4 <vTaskStartScheduler+0xb8>)
 800803e:	f7ff fd89 	bl	8007b54 <xTaskCreateStatic>
 8008042:	4603      	mov	r3, r0
 8008044:	4a20      	ldr	r2, [pc, #128]	; (80080c8 <vTaskStartScheduler+0xbc>)
 8008046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008048:	4b1f      	ldr	r3, [pc, #124]	; (80080c8 <vTaskStartScheduler+0xbc>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008050:	2301      	movs	r3, #1
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	e001      	b.n	800805a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d11b      	bne.n	8008098 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	613b      	str	r3, [r7, #16]
}
 8008072:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008074:	4b15      	ldr	r3, [pc, #84]	; (80080cc <vTaskStartScheduler+0xc0>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	334c      	adds	r3, #76	; 0x4c
 800807a:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <vTaskStartScheduler+0xc4>)
 800807c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800807e:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <vTaskStartScheduler+0xc8>)
 8008080:	f04f 32ff 	mov.w	r2, #4294967295
 8008084:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <vTaskStartScheduler+0xcc>)
 8008088:	2201      	movs	r2, #1
 800808a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800808c:	4b13      	ldr	r3, [pc, #76]	; (80080dc <vTaskStartScheduler+0xd0>)
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008092:	f000 fe8d 	bl	8008db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008096:	e00e      	b.n	80080b6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d10a      	bne.n	80080b6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60fb      	str	r3, [r7, #12]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <vTaskStartScheduler+0xa8>
}
 80080b6:	bf00      	nop
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	080096f0 	.word	0x080096f0
 80080c4:	0800869d 	.word	0x0800869d
 80080c8:	200006f0 	.word	0x200006f0
 80080cc:	200005cc 	.word	0x200005cc
 80080d0:	2000001c 	.word	0x2000001c
 80080d4:	200006ec 	.word	0x200006ec
 80080d8:	200006d8 	.word	0x200006d8
 80080dc:	200006d0 	.word	0x200006d0

080080e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <vTaskSuspendAll+0x18>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	4a03      	ldr	r2, [pc, #12]	; (80080f8 <vTaskSuspendAll+0x18>)
 80080ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080ee:	bf00      	nop
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	200006f4 	.word	0x200006f4

080080fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800810a:	4b41      	ldr	r3, [pc, #260]	; (8008210 <xTaskResumeAll+0x114>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <xTaskResumeAll+0x2c>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	603b      	str	r3, [r7, #0]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008128:	f000 fee4 	bl	8008ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800812c:	4b38      	ldr	r3, [pc, #224]	; (8008210 <xTaskResumeAll+0x114>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3b01      	subs	r3, #1
 8008132:	4a37      	ldr	r2, [pc, #220]	; (8008210 <xTaskResumeAll+0x114>)
 8008134:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008136:	4b36      	ldr	r3, [pc, #216]	; (8008210 <xTaskResumeAll+0x114>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d161      	bne.n	8008202 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800813e:	4b35      	ldr	r3, [pc, #212]	; (8008214 <xTaskResumeAll+0x118>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d05d      	beq.n	8008202 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008146:	e02e      	b.n	80081a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008148:	4b33      	ldr	r3, [pc, #204]	; (8008218 <xTaskResumeAll+0x11c>)
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3318      	adds	r3, #24
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff f8d3 	bl	8007300 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3304      	adds	r3, #4
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff f8ce 	bl	8007300 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	2201      	movs	r2, #1
 800816a:	409a      	lsls	r2, r3
 800816c:	4b2b      	ldr	r3, [pc, #172]	; (800821c <xTaskResumeAll+0x120>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4313      	orrs	r3, r2
 8008172:	4a2a      	ldr	r2, [pc, #168]	; (800821c <xTaskResumeAll+0x120>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4a27      	ldr	r2, [pc, #156]	; (8008220 <xTaskResumeAll+0x124>)
 8008184:	441a      	add	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3304      	adds	r3, #4
 800818a:	4619      	mov	r1, r3
 800818c:	4610      	mov	r0, r2
 800818e:	f7ff f85a 	bl	8007246 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008196:	4b23      	ldr	r3, [pc, #140]	; (8008224 <xTaskResumeAll+0x128>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819c:	429a      	cmp	r2, r3
 800819e:	d302      	bcc.n	80081a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80081a0:	4b21      	ldr	r3, [pc, #132]	; (8008228 <xTaskResumeAll+0x12c>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081a6:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <xTaskResumeAll+0x11c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1cc      	bne.n	8008148 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081b4:	f000 fb2c 	bl	8008810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081b8:	4b1c      	ldr	r3, [pc, #112]	; (800822c <xTaskResumeAll+0x130>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d010      	beq.n	80081e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081c4:	f000 f846 	bl	8008254 <xTaskIncrementTick>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d002      	beq.n	80081d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80081ce:	4b16      	ldr	r3, [pc, #88]	; (8008228 <xTaskResumeAll+0x12c>)
 80081d0:	2201      	movs	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f1      	bne.n	80081c4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80081e0:	4b12      	ldr	r3, [pc, #72]	; (800822c <xTaskResumeAll+0x130>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081e6:	4b10      	ldr	r3, [pc, #64]	; (8008228 <xTaskResumeAll+0x12c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081f2:	4b0f      	ldr	r3, [pc, #60]	; (8008230 <xTaskResumeAll+0x134>)
 80081f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008202:	f000 fea7 	bl	8008f54 <vPortExitCritical>

	return xAlreadyYielded;
 8008206:	68bb      	ldr	r3, [r7, #8]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	200006f4 	.word	0x200006f4
 8008214:	200006cc 	.word	0x200006cc
 8008218:	2000068c 	.word	0x2000068c
 800821c:	200006d4 	.word	0x200006d4
 8008220:	200005d0 	.word	0x200005d0
 8008224:	200005cc 	.word	0x200005cc
 8008228:	200006e0 	.word	0x200006e0
 800822c:	200006dc 	.word	0x200006dc
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <xTaskGetTickCount+0x1c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008240:	687b      	ldr	r3, [r7, #4]
}
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	200006d0 	.word	0x200006d0

08008254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800825e:	4b4e      	ldr	r3, [pc, #312]	; (8008398 <xTaskIncrementTick+0x144>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f040 808e 	bne.w	8008384 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008268:	4b4c      	ldr	r3, [pc, #304]	; (800839c <xTaskIncrementTick+0x148>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3301      	adds	r3, #1
 800826e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008270:	4a4a      	ldr	r2, [pc, #296]	; (800839c <xTaskIncrementTick+0x148>)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d120      	bne.n	80082be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800827c:	4b48      	ldr	r3, [pc, #288]	; (80083a0 <xTaskIncrementTick+0x14c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <xTaskIncrementTick+0x48>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	603b      	str	r3, [r7, #0]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <xTaskIncrementTick+0x46>
 800829c:	4b40      	ldr	r3, [pc, #256]	; (80083a0 <xTaskIncrementTick+0x14c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	60fb      	str	r3, [r7, #12]
 80082a2:	4b40      	ldr	r3, [pc, #256]	; (80083a4 <xTaskIncrementTick+0x150>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a3e      	ldr	r2, [pc, #248]	; (80083a0 <xTaskIncrementTick+0x14c>)
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4a3e      	ldr	r2, [pc, #248]	; (80083a4 <xTaskIncrementTick+0x150>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	4b3d      	ldr	r3, [pc, #244]	; (80083a8 <xTaskIncrementTick+0x154>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	4a3c      	ldr	r2, [pc, #240]	; (80083a8 <xTaskIncrementTick+0x154>)
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	f000 faa9 	bl	8008810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082be:	4b3b      	ldr	r3, [pc, #236]	; (80083ac <xTaskIncrementTick+0x158>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d348      	bcc.n	800835a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082c8:	4b35      	ldr	r3, [pc, #212]	; (80083a0 <xTaskIncrementTick+0x14c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d104      	bne.n	80082dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082d2:	4b36      	ldr	r3, [pc, #216]	; (80083ac <xTaskIncrementTick+0x158>)
 80082d4:	f04f 32ff 	mov.w	r2, #4294967295
 80082d8:	601a      	str	r2, [r3, #0]
					break;
 80082da:	e03e      	b.n	800835a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082dc:	4b30      	ldr	r3, [pc, #192]	; (80083a0 <xTaskIncrementTick+0x14c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d203      	bcs.n	80082fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082f4:	4a2d      	ldr	r2, [pc, #180]	; (80083ac <xTaskIncrementTick+0x158>)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082fa:	e02e      	b.n	800835a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	3304      	adds	r3, #4
 8008300:	4618      	mov	r0, r3
 8008302:	f7fe fffd 	bl	8007300 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d004      	beq.n	8008318 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	3318      	adds	r3, #24
 8008312:	4618      	mov	r0, r3
 8008314:	f7fe fff4 	bl	8007300 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	2201      	movs	r2, #1
 800831e:	409a      	lsls	r2, r3
 8008320:	4b23      	ldr	r3, [pc, #140]	; (80083b0 <xTaskIncrementTick+0x15c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4313      	orrs	r3, r2
 8008326:	4a22      	ldr	r2, [pc, #136]	; (80083b0 <xTaskIncrementTick+0x15c>)
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4a1f      	ldr	r2, [pc, #124]	; (80083b4 <xTaskIncrementTick+0x160>)
 8008338:	441a      	add	r2, r3
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	3304      	adds	r3, #4
 800833e:	4619      	mov	r1, r3
 8008340:	4610      	mov	r0, r2
 8008342:	f7fe ff80 	bl	8007246 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834a:	4b1b      	ldr	r3, [pc, #108]	; (80083b8 <xTaskIncrementTick+0x164>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	429a      	cmp	r2, r3
 8008352:	d3b9      	bcc.n	80082c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008354:	2301      	movs	r3, #1
 8008356:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008358:	e7b6      	b.n	80082c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800835a:	4b17      	ldr	r3, [pc, #92]	; (80083b8 <xTaskIncrementTick+0x164>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008360:	4914      	ldr	r1, [pc, #80]	; (80083b4 <xTaskIncrementTick+0x160>)
 8008362:	4613      	mov	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	440b      	add	r3, r1
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d901      	bls.n	8008376 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008372:	2301      	movs	r3, #1
 8008374:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008376:	4b11      	ldr	r3, [pc, #68]	; (80083bc <xTaskIncrementTick+0x168>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800837e:	2301      	movs	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e004      	b.n	800838e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <xTaskIncrementTick+0x16c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	4a0d      	ldr	r2, [pc, #52]	; (80083c0 <xTaskIncrementTick+0x16c>)
 800838c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800838e:	697b      	ldr	r3, [r7, #20]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	200006f4 	.word	0x200006f4
 800839c:	200006d0 	.word	0x200006d0
 80083a0:	20000684 	.word	0x20000684
 80083a4:	20000688 	.word	0x20000688
 80083a8:	200006e4 	.word	0x200006e4
 80083ac:	200006ec 	.word	0x200006ec
 80083b0:	200006d4 	.word	0x200006d4
 80083b4:	200005d0 	.word	0x200005d0
 80083b8:	200005cc 	.word	0x200005cc
 80083bc:	200006e0 	.word	0x200006e0
 80083c0:	200006dc 	.word	0x200006dc

080083c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083ca:	4b29      	ldr	r3, [pc, #164]	; (8008470 <vTaskSwitchContext+0xac>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083d2:	4b28      	ldr	r3, [pc, #160]	; (8008474 <vTaskSwitchContext+0xb0>)
 80083d4:	2201      	movs	r2, #1
 80083d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083d8:	e044      	b.n	8008464 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80083da:	4b26      	ldr	r3, [pc, #152]	; (8008474 <vTaskSwitchContext+0xb0>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e0:	4b25      	ldr	r3, [pc, #148]	; (8008478 <vTaskSwitchContext+0xb4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	fab3 f383 	clz	r3, r3
 80083ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80083ee:	7afb      	ldrb	r3, [r7, #11]
 80083f0:	f1c3 031f 	rsb	r3, r3, #31
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	4921      	ldr	r1, [pc, #132]	; (800847c <vTaskSwitchContext+0xb8>)
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	440b      	add	r3, r1
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10a      	bne.n	8008420 <vTaskSwitchContext+0x5c>
	__asm volatile
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	607b      	str	r3, [r7, #4]
}
 800841c:	bf00      	nop
 800841e:	e7fe      	b.n	800841e <vTaskSwitchContext+0x5a>
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4613      	mov	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4a14      	ldr	r2, [pc, #80]	; (800847c <vTaskSwitchContext+0xb8>)
 800842c:	4413      	add	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	3308      	adds	r3, #8
 8008442:	429a      	cmp	r2, r3
 8008444:	d104      	bne.n	8008450 <vTaskSwitchContext+0x8c>
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	605a      	str	r2, [r3, #4]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	4a0a      	ldr	r2, [pc, #40]	; (8008480 <vTaskSwitchContext+0xbc>)
 8008458:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800845a:	4b09      	ldr	r3, [pc, #36]	; (8008480 <vTaskSwitchContext+0xbc>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	334c      	adds	r3, #76	; 0x4c
 8008460:	4a08      	ldr	r2, [pc, #32]	; (8008484 <vTaskSwitchContext+0xc0>)
 8008462:	6013      	str	r3, [r2, #0]
}
 8008464:	bf00      	nop
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	200006f4 	.word	0x200006f4
 8008474:	200006e0 	.word	0x200006e0
 8008478:	200006d4 	.word	0x200006d4
 800847c:	200005d0 	.word	0x200005d0
 8008480:	200005cc 	.word	0x200005cc
 8008484:	2000001c 	.word	0x2000001c

08008488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	60fb      	str	r3, [r7, #12]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084ae:	4b07      	ldr	r3, [pc, #28]	; (80084cc <vTaskPlaceOnEventList+0x44>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3318      	adds	r3, #24
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fe fee9 	bl	800728e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084bc:	2101      	movs	r1, #1
 80084be:	6838      	ldr	r0, [r7, #0]
 80084c0:	f000 fb82 	bl	8008bc8 <prvAddCurrentTaskToDelayedList>
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	200005cc 	.word	0x200005cc

080084d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	3318      	adds	r3, #24
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fefd 	bl	8007300 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008506:	4b1d      	ldr	r3, [pc, #116]	; (800857c <xTaskRemoveFromEventList+0xac>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d11c      	bne.n	8008548 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	3304      	adds	r3, #4
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fef4 	bl	8007300 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	2201      	movs	r2, #1
 800851e:	409a      	lsls	r2, r3
 8008520:	4b17      	ldr	r3, [pc, #92]	; (8008580 <xTaskRemoveFromEventList+0xb0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4313      	orrs	r3, r2
 8008526:	4a16      	ldr	r2, [pc, #88]	; (8008580 <xTaskRemoveFromEventList+0xb0>)
 8008528:	6013      	str	r3, [r2, #0]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4a13      	ldr	r2, [pc, #76]	; (8008584 <xTaskRemoveFromEventList+0xb4>)
 8008538:	441a      	add	r2, r3
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	3304      	adds	r3, #4
 800853e:	4619      	mov	r1, r3
 8008540:	4610      	mov	r0, r2
 8008542:	f7fe fe80 	bl	8007246 <vListInsertEnd>
 8008546:	e005      	b.n	8008554 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	3318      	adds	r3, #24
 800854c:	4619      	mov	r1, r3
 800854e:	480e      	ldr	r0, [pc, #56]	; (8008588 <xTaskRemoveFromEventList+0xb8>)
 8008550:	f7fe fe79 	bl	8007246 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4b0c      	ldr	r3, [pc, #48]	; (800858c <xTaskRemoveFromEventList+0xbc>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	429a      	cmp	r2, r3
 8008560:	d905      	bls.n	800856e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008562:	2301      	movs	r3, #1
 8008564:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008566:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <xTaskRemoveFromEventList+0xc0>)
 8008568:	2201      	movs	r2, #1
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	e001      	b.n	8008572 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800856e:	2300      	movs	r3, #0
 8008570:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008572:	697b      	ldr	r3, [r7, #20]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	200006f4 	.word	0x200006f4
 8008580:	200006d4 	.word	0x200006d4
 8008584:	200005d0 	.word	0x200005d0
 8008588:	2000068c 	.word	0x2000068c
 800858c:	200005cc 	.word	0x200005cc
 8008590:	200006e0 	.word	0x200006e0

08008594 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800859c:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <vTaskInternalSetTimeOutState+0x24>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <vTaskInternalSetTimeOutState+0x28>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	605a      	str	r2, [r3, #4]
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	200006e4 	.word	0x200006e4
 80085bc:	200006d0 	.word	0x200006d0

080085c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	613b      	str	r3, [r7, #16]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10a      	bne.n	8008602 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fb      	str	r3, [r7, #12]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008602:	f000 fc77 	bl	8008ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008606:	4b1d      	ldr	r3, [pc, #116]	; (800867c <xTaskCheckForTimeOut+0xbc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d102      	bne.n	8008626 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
 8008624:	e023      	b.n	800866e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b15      	ldr	r3, [pc, #84]	; (8008680 <xTaskCheckForTimeOut+0xc0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d007      	beq.n	8008642 <xTaskCheckForTimeOut+0x82>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	429a      	cmp	r2, r3
 800863a:	d302      	bcc.n	8008642 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e015      	b.n	800866e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	429a      	cmp	r2, r3
 800864a:	d20b      	bcs.n	8008664 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	1ad2      	subs	r2, r2, r3
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff ff9b 	bl	8008594 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800865e:	2300      	movs	r3, #0
 8008660:	61fb      	str	r3, [r7, #28]
 8008662:	e004      	b.n	800866e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800866a:	2301      	movs	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800866e:	f000 fc71 	bl	8008f54 <vPortExitCritical>

	return xReturn;
 8008672:	69fb      	ldr	r3, [r7, #28]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200006d0 	.word	0x200006d0
 8008680:	200006e4 	.word	0x200006e4

08008684 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008688:	4b03      	ldr	r3, [pc, #12]	; (8008698 <vTaskMissedYield+0x14>)
 800868a:	2201      	movs	r2, #1
 800868c:	601a      	str	r2, [r3, #0]
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr
 8008698:	200006e0 	.word	0x200006e0

0800869c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086a4:	f000 f852 	bl	800874c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086a8:	4b06      	ldr	r3, [pc, #24]	; (80086c4 <prvIdleTask+0x28>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d9f9      	bls.n	80086a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <prvIdleTask+0x2c>)
 80086b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b6:	601a      	str	r2, [r3, #0]
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086c0:	e7f0      	b.n	80086a4 <prvIdleTask+0x8>
 80086c2:	bf00      	nop
 80086c4:	200005d0 	.word	0x200005d0
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	e00c      	b.n	80086f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4a12      	ldr	r2, [pc, #72]	; (800872c <prvInitialiseTaskLists+0x60>)
 80086e4:	4413      	add	r3, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe fd80 	bl	80071ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3301      	adds	r3, #1
 80086f0:	607b      	str	r3, [r7, #4]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b06      	cmp	r3, #6
 80086f6:	d9ef      	bls.n	80086d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086f8:	480d      	ldr	r0, [pc, #52]	; (8008730 <prvInitialiseTaskLists+0x64>)
 80086fa:	f7fe fd77 	bl	80071ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086fe:	480d      	ldr	r0, [pc, #52]	; (8008734 <prvInitialiseTaskLists+0x68>)
 8008700:	f7fe fd74 	bl	80071ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008704:	480c      	ldr	r0, [pc, #48]	; (8008738 <prvInitialiseTaskLists+0x6c>)
 8008706:	f7fe fd71 	bl	80071ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800870a:	480c      	ldr	r0, [pc, #48]	; (800873c <prvInitialiseTaskLists+0x70>)
 800870c:	f7fe fd6e 	bl	80071ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008710:	480b      	ldr	r0, [pc, #44]	; (8008740 <prvInitialiseTaskLists+0x74>)
 8008712:	f7fe fd6b 	bl	80071ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008716:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <prvInitialiseTaskLists+0x78>)
 8008718:	4a05      	ldr	r2, [pc, #20]	; (8008730 <prvInitialiseTaskLists+0x64>)
 800871a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <prvInitialiseTaskLists+0x7c>)
 800871e:	4a05      	ldr	r2, [pc, #20]	; (8008734 <prvInitialiseTaskLists+0x68>)
 8008720:	601a      	str	r2, [r3, #0]
}
 8008722:	bf00      	nop
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200005d0 	.word	0x200005d0
 8008730:	2000065c 	.word	0x2000065c
 8008734:	20000670 	.word	0x20000670
 8008738:	2000068c 	.word	0x2000068c
 800873c:	200006a0 	.word	0x200006a0
 8008740:	200006b8 	.word	0x200006b8
 8008744:	20000684 	.word	0x20000684
 8008748:	20000688 	.word	0x20000688

0800874c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008752:	e019      	b.n	8008788 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008754:	f000 fbce 	bl	8008ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008758:	4b10      	ldr	r3, [pc, #64]	; (800879c <prvCheckTasksWaitingTermination+0x50>)
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe fdcb 	bl	8007300 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800876a:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <prvCheckTasksWaitingTermination+0x54>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3b01      	subs	r3, #1
 8008770:	4a0b      	ldr	r2, [pc, #44]	; (80087a0 <prvCheckTasksWaitingTermination+0x54>)
 8008772:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008774:	4b0b      	ldr	r3, [pc, #44]	; (80087a4 <prvCheckTasksWaitingTermination+0x58>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3b01      	subs	r3, #1
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <prvCheckTasksWaitingTermination+0x58>)
 800877c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800877e:	f000 fbe9 	bl	8008f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f810 	bl	80087a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008788:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <prvCheckTasksWaitingTermination+0x58>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e1      	bne.n	8008754 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200006a0 	.word	0x200006a0
 80087a0:	200006cc 	.word	0x200006cc
 80087a4:	200006b4 	.word	0x200006b4

080087a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	334c      	adds	r3, #76	; 0x4c
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 feff 	bl	80095b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d108      	bne.n	80087d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fd41 	bl	8009250 <vPortFree>
				vPortFree( pxTCB );
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fd3e 	bl	8009250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80087d4:	e018      	b.n	8008808 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d103      	bne.n	80087e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fd35 	bl	8009250 <vPortFree>
	}
 80087e6:	e00f      	b.n	8008808 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d00a      	beq.n	8008808 <prvDeleteTCB+0x60>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	60fb      	str	r3, [r7, #12]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <prvDeleteTCB+0x5e>
	}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d104      	bne.n	800882a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008820:	4b0a      	ldr	r3, [pc, #40]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008828:	e008      	b.n	800883c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882a:	4b07      	ldr	r3, [pc, #28]	; (8008848 <prvResetNextTaskUnblockTime+0x38>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	4a04      	ldr	r2, [pc, #16]	; (800884c <prvResetNextTaskUnblockTime+0x3c>)
 800883a:	6013      	str	r3, [r2, #0]
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	20000684 	.word	0x20000684
 800884c:	200006ec 	.word	0x200006ec

08008850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <xTaskGetSchedulerState+0x34>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d102      	bne.n	8008864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800885e:	2301      	movs	r3, #1
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	e008      	b.n	8008876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008864:	4b08      	ldr	r3, [pc, #32]	; (8008888 <xTaskGetSchedulerState+0x38>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d102      	bne.n	8008872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800886c:	2302      	movs	r3, #2
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	e001      	b.n	8008876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008876:	687b      	ldr	r3, [r7, #4]
	}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	200006d8 	.word	0x200006d8
 8008888:	200006f4 	.word	0x200006f4

0800888c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008898:	2300      	movs	r3, #0
 800889a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d05e      	beq.n	8008960 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4b31      	ldr	r3, [pc, #196]	; (800896c <xTaskPriorityInherit+0xe0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d24e      	bcs.n	800894e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	db06      	blt.n	80088c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b8:	4b2c      	ldr	r3, [pc, #176]	; (800896c <xTaskPriorityInherit+0xe0>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	f1c3 0207 	rsb	r2, r3, #7
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6959      	ldr	r1, [r3, #20]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4a26      	ldr	r2, [pc, #152]	; (8008970 <xTaskPriorityInherit+0xe4>)
 80088d8:	4413      	add	r3, r2
 80088da:	4299      	cmp	r1, r3
 80088dc:	d12f      	bne.n	800893e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fd0c 	bl	8007300 <uxListRemove>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10a      	bne.n	8008904 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	2201      	movs	r2, #1
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	43da      	mvns	r2, r3
 80088fa:	4b1e      	ldr	r3, [pc, #120]	; (8008974 <xTaskPriorityInherit+0xe8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4013      	ands	r3, r2
 8008900:	4a1c      	ldr	r2, [pc, #112]	; (8008974 <xTaskPriorityInherit+0xe8>)
 8008902:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008904:	4b19      	ldr	r3, [pc, #100]	; (800896c <xTaskPriorityInherit+0xe0>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	2201      	movs	r2, #1
 8008914:	409a      	lsls	r2, r3
 8008916:	4b17      	ldr	r3, [pc, #92]	; (8008974 <xTaskPriorityInherit+0xe8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4313      	orrs	r3, r2
 800891c:	4a15      	ldr	r2, [pc, #84]	; (8008974 <xTaskPriorityInherit+0xe8>)
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4a10      	ldr	r2, [pc, #64]	; (8008970 <xTaskPriorityInherit+0xe4>)
 800892e:	441a      	add	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fe fc85 	bl	8007246 <vListInsertEnd>
 800893c:	e004      	b.n	8008948 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800893e:	4b0b      	ldr	r3, [pc, #44]	; (800896c <xTaskPriorityInherit+0xe0>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	e008      	b.n	8008960 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008952:	4b06      	ldr	r3, [pc, #24]	; (800896c <xTaskPriorityInherit+0xe0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	429a      	cmp	r2, r3
 800895a:	d201      	bcs.n	8008960 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800895c:	2301      	movs	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008960:	68fb      	ldr	r3, [r7, #12]
	}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200005cc 	.word	0x200005cc
 8008970:	200005d0 	.word	0x200005d0
 8008974:	200006d4 	.word	0x200006d4

08008978 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d06e      	beq.n	8008a6c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800898e:	4b3a      	ldr	r3, [pc, #232]	; (8008a78 <xTaskPriorityDisinherit+0x100>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	429a      	cmp	r2, r3
 8008996:	d00a      	beq.n	80089ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60fb      	str	r3, [r7, #12]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	60bb      	str	r3, [r7, #8]
}
 80089c8:	bf00      	nop
 80089ca:	e7fe      	b.n	80089ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d0:	1e5a      	subs	r2, r3, #1
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	429a      	cmp	r2, r3
 80089e0:	d044      	beq.n	8008a6c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d140      	bne.n	8008a6c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe fc86 	bl	8007300 <uxListRemove>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d115      	bne.n	8008a26 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fe:	491f      	ldr	r1, [pc, #124]	; (8008a7c <xTaskPriorityDisinherit+0x104>)
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <xTaskPriorityDisinherit+0xae>
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	2201      	movs	r2, #1
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	4b18      	ldr	r3, [pc, #96]	; (8008a80 <xTaskPriorityDisinherit+0x108>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4013      	ands	r3, r2
 8008a22:	4a17      	ldr	r2, [pc, #92]	; (8008a80 <xTaskPriorityDisinherit+0x108>)
 8008a24:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	f1c3 0207 	rsb	r2, r3, #7
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	2201      	movs	r2, #1
 8008a40:	409a      	lsls	r2, r3
 8008a42:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <xTaskPriorityDisinherit+0x108>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	4a0d      	ldr	r2, [pc, #52]	; (8008a80 <xTaskPriorityDisinherit+0x108>)
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4a08      	ldr	r2, [pc, #32]	; (8008a7c <xTaskPriorityDisinherit+0x104>)
 8008a5a:	441a      	add	r2, r3
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f7fe fbef 	bl	8007246 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a6c:	697b      	ldr	r3, [r7, #20]
	}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200005cc 	.word	0x200005cc
 8008a7c:	200005d0 	.word	0x200005d0
 8008a80:	200006d4 	.word	0x200006d4

08008a84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a92:	2301      	movs	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d077      	beq.n	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	60fb      	str	r3, [r7, #12]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d902      	bls.n	8008aca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	61fb      	str	r3, [r7, #28]
 8008ac8:	e002      	b.n	8008ad0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ace:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d058      	beq.n	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d153      	bne.n	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ae4:	4b2b      	ldr	r3, [pc, #172]	; (8008b94 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d10a      	bne.n	8008b04 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	60bb      	str	r3, [r7, #8]
}
 8008b00:	bf00      	nop
 8008b02:	e7fe      	b.n	8008b02 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	69fa      	ldr	r2, [r7, #28]
 8008b0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	db04      	blt.n	8008b22 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f1c3 0207 	rsb	r2, r3, #7
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	6959      	ldr	r1, [r3, #20]
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4a19      	ldr	r2, [pc, #100]	; (8008b98 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008b32:	4413      	add	r3, r2
 8008b34:	4299      	cmp	r1, r3
 8008b36:	d129      	bne.n	8008b8c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fbdf 	bl	8007300 <uxListRemove>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10a      	bne.n	8008b5e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b52:	43da      	mvns	r2, r3
 8008b54:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	4a10      	ldr	r2, [pc, #64]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b5c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	2201      	movs	r2, #1
 8008b64:	409a      	lsls	r2, r3
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	4a0b      	ldr	r2, [pc, #44]	; (8008b9c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	4613      	mov	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4a06      	ldr	r2, [pc, #24]	; (8008b98 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008b7e:	441a      	add	r2, r3
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f7fe fb5d 	bl	8007246 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b8c:	bf00      	nop
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200005cc 	.word	0x200005cc
 8008b98:	200005d0 	.word	0x200005d0
 8008b9c:	200006d4 	.word	0x200006d4

08008ba0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ba4:	4b07      	ldr	r3, [pc, #28]	; (8008bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d004      	beq.n	8008bb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008bac:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bb2:	3201      	adds	r2, #1
 8008bb4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008bb6:	4b03      	ldr	r3, [pc, #12]	; (8008bc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
	}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	200005cc 	.word	0x200005cc

08008bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bd2:	4b29      	ldr	r3, [pc, #164]	; (8008c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd8:	4b28      	ldr	r3, [pc, #160]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fb8e 	bl	8007300 <uxListRemove>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10b      	bne.n	8008c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008bea:	4b24      	ldr	r3, [pc, #144]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	43da      	mvns	r2, r3
 8008bf8:	4b21      	ldr	r3, [pc, #132]	; (8008c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c08:	d10a      	bne.n	8008c20 <prvAddCurrentTaskToDelayedList+0x58>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c10:	4b1a      	ldr	r3, [pc, #104]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4619      	mov	r1, r3
 8008c18:	481a      	ldr	r0, [pc, #104]	; (8008c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c1a:	f7fe fb14 	bl	8007246 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c1e:	e026      	b.n	8008c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c28:	4b14      	ldr	r3, [pc, #80]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d209      	bcs.n	8008c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c38:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4619      	mov	r1, r3
 8008c44:	4610      	mov	r0, r2
 8008c46:	f7fe fb22 	bl	800728e <vListInsert>
}
 8008c4a:	e010      	b.n	8008c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c4c:	4b0f      	ldr	r3, [pc, #60]	; (8008c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f7fe fb18 	bl	800728e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d202      	bcs.n	8008c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c68:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6013      	str	r3, [r2, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	200006d0 	.word	0x200006d0
 8008c7c:	200005cc 	.word	0x200005cc
 8008c80:	200006d4 	.word	0x200006d4
 8008c84:	200006b8 	.word	0x200006b8
 8008c88:	20000688 	.word	0x20000688
 8008c8c:	20000684 	.word	0x20000684
 8008c90:	200006ec 	.word	0x200006ec

08008c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3b04      	subs	r3, #4
 8008ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3b04      	subs	r3, #4
 8008cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f023 0201 	bic.w	r2, r3, #1
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3b04      	subs	r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cc4:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <pxPortInitialiseStack+0x64>)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b14      	subs	r3, #20
 8008cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3b04      	subs	r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f06f 0202 	mvn.w	r2, #2
 8008ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3b20      	subs	r3, #32
 8008ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cea:	68fb      	ldr	r3, [r7, #12]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	08008cfd 	.word	0x08008cfd

08008cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d06:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <prvTaskExitError+0x54>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d00a      	beq.n	8008d26 <prvTaskExitError+0x2a>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <prvTaskExitError+0x28>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60bb      	str	r3, [r7, #8]
}
 8008d38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d3a:	bf00      	nop
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0fc      	beq.n	8008d3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d42:	bf00      	nop
 8008d44:	bf00      	nop
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	20000018 	.word	0x20000018
	...

08008d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <pxCurrentTCBConst2>)
 8008d62:	6819      	ldr	r1, [r3, #0]
 8008d64:	6808      	ldr	r0, [r1, #0]
 8008d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	f380 8809 	msr	PSP, r0
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f04f 0000 	mov.w	r0, #0
 8008d76:	f380 8811 	msr	BASEPRI, r0
 8008d7a:	4770      	bx	lr
 8008d7c:	f3af 8000 	nop.w

08008d80 <pxCurrentTCBConst2>:
 8008d80:	200005cc 	.word	0x200005cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop

08008d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d88:	4808      	ldr	r0, [pc, #32]	; (8008dac <prvPortStartFirstTask+0x24>)
 8008d8a:	6800      	ldr	r0, [r0, #0]
 8008d8c:	6800      	ldr	r0, [r0, #0]
 8008d8e:	f380 8808 	msr	MSP, r0
 8008d92:	f04f 0000 	mov.w	r0, #0
 8008d96:	f380 8814 	msr	CONTROL, r0
 8008d9a:	b662      	cpsie	i
 8008d9c:	b661      	cpsie	f
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	df00      	svc	0
 8008da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008daa:	bf00      	nop
 8008dac:	e000ed08 	.word	0xe000ed08

08008db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008db6:	4b46      	ldr	r3, [pc, #280]	; (8008ed0 <xPortStartScheduler+0x120>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a46      	ldr	r2, [pc, #280]	; (8008ed4 <xPortStartScheduler+0x124>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d10a      	bne.n	8008dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	613b      	str	r3, [r7, #16]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008dd6:	4b3e      	ldr	r3, [pc, #248]	; (8008ed0 <xPortStartScheduler+0x120>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a3f      	ldr	r2, [pc, #252]	; (8008ed8 <xPortStartScheduler+0x128>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d10a      	bne.n	8008df6 <xPortStartScheduler+0x46>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	60fb      	str	r3, [r7, #12]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008df6:	4b39      	ldr	r3, [pc, #228]	; (8008edc <xPortStartScheduler+0x12c>)
 8008df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	22ff      	movs	r2, #255	; 0xff
 8008e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	4b31      	ldr	r3, [pc, #196]	; (8008ee0 <xPortStartScheduler+0x130>)
 8008e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e1e:	4b31      	ldr	r3, [pc, #196]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e20:	2207      	movs	r2, #7
 8008e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e24:	e009      	b.n	8008e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e26:	4b2f      	ldr	r3, [pc, #188]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	4a2d      	ldr	r2, [pc, #180]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e42:	2b80      	cmp	r3, #128	; 0x80
 8008e44:	d0ef      	beq.n	8008e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e46:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f1c3 0307 	rsb	r3, r3, #7
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d00a      	beq.n	8008e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	60bb      	str	r3, [r7, #8]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e68:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e72:	4b1c      	ldr	r3, [pc, #112]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ee4 <xPortStartScheduler+0x134>)
 8008e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e86:	4b18      	ldr	r3, [pc, #96]	; (8008ee8 <xPortStartScheduler+0x138>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <xPortStartScheduler+0x138>)
 8008e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e92:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <xPortStartScheduler+0x138>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a14      	ldr	r2, [pc, #80]	; (8008ee8 <xPortStartScheduler+0x138>)
 8008e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e9e:	f000 f8dd 	bl	800905c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ea2:	4b12      	ldr	r3, [pc, #72]	; (8008eec <xPortStartScheduler+0x13c>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ea8:	f000 f8fc 	bl	80090a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008eac:	4b10      	ldr	r3, [pc, #64]	; (8008ef0 <xPortStartScheduler+0x140>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ef0 <xPortStartScheduler+0x140>)
 8008eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008eb8:	f7ff ff66 	bl	8008d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ebc:	f7ff fa82 	bl	80083c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008ec0:	f7ff ff1c 	bl	8008cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	e000ed00 	.word	0xe000ed00
 8008ed4:	410fc271 	.word	0x410fc271
 8008ed8:	410fc270 	.word	0x410fc270
 8008edc:	e000e400 	.word	0xe000e400
 8008ee0:	200006f8 	.word	0x200006f8
 8008ee4:	200006fc 	.word	0x200006fc
 8008ee8:	e000ed20 	.word	0xe000ed20
 8008eec:	20000018 	.word	0x20000018
 8008ef0:	e000ef34 	.word	0xe000ef34

08008ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	607b      	str	r3, [r7, #4]
}
 8008f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <vPortEnterCritical+0x58>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3301      	adds	r3, #1
 8008f14:	4a0d      	ldr	r2, [pc, #52]	; (8008f4c <vPortEnterCritical+0x58>)
 8008f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f18:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <vPortEnterCritical+0x58>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d10f      	bne.n	8008f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f20:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <vPortEnterCritical+0x5c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	603b      	str	r3, [r7, #0]
}
 8008f3c:	bf00      	nop
 8008f3e:	e7fe      	b.n	8008f3e <vPortEnterCritical+0x4a>
	}
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	20000018 	.word	0x20000018
 8008f50:	e000ed04 	.word	0xe000ed04

08008f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f5a:	4b12      	ldr	r3, [pc, #72]	; (8008fa4 <vPortExitCritical+0x50>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <vPortExitCritical+0x24>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	607b      	str	r3, [r7, #4]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <vPortExitCritical+0x50>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <vPortExitCritical+0x50>)
 8008f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f82:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <vPortExitCritical+0x50>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d105      	bne.n	8008f96 <vPortExitCritical+0x42>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f96:	bf00      	nop
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	20000018 	.word	0x20000018
	...

08008fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fb0:	f3ef 8009 	mrs	r0, PSP
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	4b15      	ldr	r3, [pc, #84]	; (8009010 <pxCurrentTCBConst>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	f01e 0f10 	tst.w	lr, #16
 8008fc0:	bf08      	it	eq
 8008fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fca:	6010      	str	r0, [r2, #0]
 8008fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008fd4:	f380 8811 	msr	BASEPRI, r0
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f7ff f9f0 	bl	80083c4 <vTaskSwitchContext>
 8008fe4:	f04f 0000 	mov.w	r0, #0
 8008fe8:	f380 8811 	msr	BASEPRI, r0
 8008fec:	bc09      	pop	{r0, r3}
 8008fee:	6819      	ldr	r1, [r3, #0]
 8008ff0:	6808      	ldr	r0, [r1, #0]
 8008ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff6:	f01e 0f10 	tst.w	lr, #16
 8008ffa:	bf08      	it	eq
 8008ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009000:	f380 8809 	msr	PSP, r0
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	f3af 8000 	nop.w

08009010 <pxCurrentTCBConst>:
 8009010:	200005cc 	.word	0x200005cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop

08009018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	607b      	str	r3, [r7, #4]
}
 8009030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009032:	f7ff f90f 	bl	8008254 <xTaskIncrementTick>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800903c:	4b06      	ldr	r3, [pc, #24]	; (8009058 <SysTick_Handler+0x40>)
 800903e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	2300      	movs	r3, #0
 8009046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	f383 8811 	msr	BASEPRI, r3
}
 800904e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009060:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <vPortSetupTimerInterrupt+0x34>)
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009066:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <vPortSetupTimerInterrupt+0x38>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <vPortSetupTimerInterrupt+0x3c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a0a      	ldr	r2, [pc, #40]	; (800909c <vPortSetupTimerInterrupt+0x40>)
 8009072:	fba2 2303 	umull	r2, r3, r2, r3
 8009076:	099b      	lsrs	r3, r3, #6
 8009078:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <vPortSetupTimerInterrupt+0x44>)
 800907a:	3b01      	subs	r3, #1
 800907c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800907e:	4b04      	ldr	r3, [pc, #16]	; (8009090 <vPortSetupTimerInterrupt+0x34>)
 8009080:	2207      	movs	r2, #7
 8009082:	601a      	str	r2, [r3, #0]
}
 8009084:	bf00      	nop
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	e000e010 	.word	0xe000e010
 8009094:	e000e018 	.word	0xe000e018
 8009098:	20000008 	.word	0x20000008
 800909c:	10624dd3 	.word	0x10624dd3
 80090a0:	e000e014 	.word	0xe000e014

080090a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090b4 <vPortEnableVFP+0x10>
 80090a8:	6801      	ldr	r1, [r0, #0]
 80090aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090ae:	6001      	str	r1, [r0, #0]
 80090b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090b2:	bf00      	nop
 80090b4:	e000ed88 	.word	0xe000ed88

080090b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08a      	sub	sp, #40	; 0x28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090c0:	2300      	movs	r3, #0
 80090c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090c4:	f7ff f80c 	bl	80080e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090c8:	4b5b      	ldr	r3, [pc, #364]	; (8009238 <pvPortMalloc+0x180>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090d0:	f000 f920 	bl	8009314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090d4:	4b59      	ldr	r3, [pc, #356]	; (800923c <pvPortMalloc+0x184>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4013      	ands	r3, r2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f040 8093 	bne.w	8009208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d01d      	beq.n	8009124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80090e8:	2208      	movs	r2, #8
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4413      	add	r3, r2
 80090ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d014      	beq.n	8009124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f023 0307 	bic.w	r3, r3, #7
 8009100:	3308      	adds	r3, #8
 8009102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <pvPortMalloc+0x6c>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	617b      	str	r3, [r7, #20]
}
 8009120:	bf00      	nop
 8009122:	e7fe      	b.n	8009122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d06e      	beq.n	8009208 <pvPortMalloc+0x150>
 800912a:	4b45      	ldr	r3, [pc, #276]	; (8009240 <pvPortMalloc+0x188>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	429a      	cmp	r2, r3
 8009132:	d869      	bhi.n	8009208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009134:	4b43      	ldr	r3, [pc, #268]	; (8009244 <pvPortMalloc+0x18c>)
 8009136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009138:	4b42      	ldr	r3, [pc, #264]	; (8009244 <pvPortMalloc+0x18c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800913e:	e004      	b.n	800914a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	429a      	cmp	r2, r3
 8009152:	d903      	bls.n	800915c <pvPortMalloc+0xa4>
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1f1      	bne.n	8009140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800915c:	4b36      	ldr	r3, [pc, #216]	; (8009238 <pvPortMalloc+0x180>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009162:	429a      	cmp	r2, r3
 8009164:	d050      	beq.n	8009208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2208      	movs	r2, #8
 800916c:	4413      	add	r3, r2
 800916e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	1ad2      	subs	r2, r2, r3
 8009180:	2308      	movs	r3, #8
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	429a      	cmp	r2, r3
 8009186:	d91f      	bls.n	80091c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4413      	add	r3, r2
 800918e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <pvPortMalloc+0xf8>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	613b      	str	r3, [r7, #16]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	1ad2      	subs	r2, r2, r3
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091c2:	69b8      	ldr	r0, [r7, #24]
 80091c4:	f000 f908 	bl	80093d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091c8:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <pvPortMalloc+0x188>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	4a1b      	ldr	r2, [pc, #108]	; (8009240 <pvPortMalloc+0x188>)
 80091d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091d6:	4b1a      	ldr	r3, [pc, #104]	; (8009240 <pvPortMalloc+0x188>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <pvPortMalloc+0x190>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d203      	bcs.n	80091ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091e2:	4b17      	ldr	r3, [pc, #92]	; (8009240 <pvPortMalloc+0x188>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a18      	ldr	r2, [pc, #96]	; (8009248 <pvPortMalloc+0x190>)
 80091e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <pvPortMalloc+0x184>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	431a      	orrs	r2, r3
 80091f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	2200      	movs	r2, #0
 80091fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80091fe:	4b13      	ldr	r3, [pc, #76]	; (800924c <pvPortMalloc+0x194>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	4a11      	ldr	r2, [pc, #68]	; (800924c <pvPortMalloc+0x194>)
 8009206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009208:	f7fe ff78 	bl	80080fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <pvPortMalloc+0x174>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800921a:	f383 8811 	msr	BASEPRI, r3
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f3bf 8f4f 	dsb	sy
 8009226:	60fb      	str	r3, [r7, #12]
}
 8009228:	bf00      	nop
 800922a:	e7fe      	b.n	800922a <pvPortMalloc+0x172>
	return pvReturn;
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3728      	adds	r7, #40	; 0x28
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20004308 	.word	0x20004308
 800923c:	2000431c 	.word	0x2000431c
 8009240:	2000430c 	.word	0x2000430c
 8009244:	20004300 	.word	0x20004300
 8009248:	20004310 	.word	0x20004310
 800924c:	20004314 	.word	0x20004314

08009250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d04d      	beq.n	80092fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009262:	2308      	movs	r3, #8
 8009264:	425b      	negs	r3, r3
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4413      	add	r3, r2
 800926a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	4b24      	ldr	r3, [pc, #144]	; (8009308 <vPortFree+0xb8>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4013      	ands	r3, r2
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <vPortFree+0x44>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	60fb      	str	r3, [r7, #12]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <vPortFree+0x62>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	60bb      	str	r3, [r7, #8]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	4b14      	ldr	r3, [pc, #80]	; (8009308 <vPortFree+0xb8>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01e      	beq.n	80092fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d11a      	bne.n	80092fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <vPortFree+0xb8>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	43db      	mvns	r3, r3
 80092d2:	401a      	ands	r2, r3
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092d8:	f7fe ff02 	bl	80080e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	4b0a      	ldr	r3, [pc, #40]	; (800930c <vPortFree+0xbc>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4413      	add	r3, r2
 80092e6:	4a09      	ldr	r2, [pc, #36]	; (800930c <vPortFree+0xbc>)
 80092e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092ea:	6938      	ldr	r0, [r7, #16]
 80092ec:	f000 f874 	bl	80093d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80092f0:	4b07      	ldr	r3, [pc, #28]	; (8009310 <vPortFree+0xc0>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	4a06      	ldr	r2, [pc, #24]	; (8009310 <vPortFree+0xc0>)
 80092f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80092fa:	f7fe feff 	bl	80080fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092fe:	bf00      	nop
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	2000431c 	.word	0x2000431c
 800930c:	2000430c 	.word	0x2000430c
 8009310:	20004318 	.word	0x20004318

08009314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800931a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800931e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009320:	4b27      	ldr	r3, [pc, #156]	; (80093c0 <prvHeapInit+0xac>)
 8009322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00c      	beq.n	8009348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3307      	adds	r3, #7
 8009332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0307 	bic.w	r3, r3, #7
 800933a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	4a1f      	ldr	r2, [pc, #124]	; (80093c0 <prvHeapInit+0xac>)
 8009344:	4413      	add	r3, r2
 8009346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800934c:	4a1d      	ldr	r2, [pc, #116]	; (80093c4 <prvHeapInit+0xb0>)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009352:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <prvHeapInit+0xb0>)
 8009354:	2200      	movs	r2, #0
 8009356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	4413      	add	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009360:	2208      	movs	r2, #8
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f023 0307 	bic.w	r3, r3, #7
 800936e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	4a15      	ldr	r2, [pc, #84]	; (80093c8 <prvHeapInit+0xb4>)
 8009374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <prvHeapInit+0xb4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800937e:	4b12      	ldr	r3, [pc, #72]	; (80093c8 <prvHeapInit+0xb4>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009394:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <prvHeapInit+0xb4>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	4a0a      	ldr	r2, [pc, #40]	; (80093cc <prvHeapInit+0xb8>)
 80093a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	4a09      	ldr	r2, [pc, #36]	; (80093d0 <prvHeapInit+0xbc>)
 80093aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093ac:	4b09      	ldr	r3, [pc, #36]	; (80093d4 <prvHeapInit+0xc0>)
 80093ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093b2:	601a      	str	r2, [r3, #0]
}
 80093b4:	bf00      	nop
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	20000700 	.word	0x20000700
 80093c4:	20004300 	.word	0x20004300
 80093c8:	20004308 	.word	0x20004308
 80093cc:	20004310 	.word	0x20004310
 80093d0:	2000430c 	.word	0x2000430c
 80093d4:	2000431c 	.word	0x2000431c

080093d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093e0:	4b28      	ldr	r3, [pc, #160]	; (8009484 <prvInsertBlockIntoFreeList+0xac>)
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e002      	b.n	80093ec <prvInsertBlockIntoFreeList+0x14>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d8f7      	bhi.n	80093e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	429a      	cmp	r2, r3
 8009406:	d108      	bne.n	800941a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	441a      	add	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	441a      	add	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d118      	bne.n	8009460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4b15      	ldr	r3, [pc, #84]	; (8009488 <prvInsertBlockIntoFreeList+0xb0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	429a      	cmp	r2, r3
 8009438:	d00d      	beq.n	8009456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	441a      	add	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	e008      	b.n	8009468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009456:	4b0c      	ldr	r3, [pc, #48]	; (8009488 <prvInsertBlockIntoFreeList+0xb0>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e003      	b.n	8009468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	429a      	cmp	r2, r3
 800946e:	d002      	beq.n	8009476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009476:	bf00      	nop
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	20004300 	.word	0x20004300
 8009488:	20004308 	.word	0x20004308

0800948c <__libc_init_array>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4d0d      	ldr	r5, [pc, #52]	; (80094c4 <__libc_init_array+0x38>)
 8009490:	4c0d      	ldr	r4, [pc, #52]	; (80094c8 <__libc_init_array+0x3c>)
 8009492:	1b64      	subs	r4, r4, r5
 8009494:	10a4      	asrs	r4, r4, #2
 8009496:	2600      	movs	r6, #0
 8009498:	42a6      	cmp	r6, r4
 800949a:	d109      	bne.n	80094b0 <__libc_init_array+0x24>
 800949c:	4d0b      	ldr	r5, [pc, #44]	; (80094cc <__libc_init_array+0x40>)
 800949e:	4c0c      	ldr	r4, [pc, #48]	; (80094d0 <__libc_init_array+0x44>)
 80094a0:	f000 f8f2 	bl	8009688 <_init>
 80094a4:	1b64      	subs	r4, r4, r5
 80094a6:	10a4      	asrs	r4, r4, #2
 80094a8:	2600      	movs	r6, #0
 80094aa:	42a6      	cmp	r6, r4
 80094ac:	d105      	bne.n	80094ba <__libc_init_array+0x2e>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b4:	4798      	blx	r3
 80094b6:	3601      	adds	r6, #1
 80094b8:	e7ee      	b.n	8009498 <__libc_init_array+0xc>
 80094ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80094be:	4798      	blx	r3
 80094c0:	3601      	adds	r6, #1
 80094c2:	e7f2      	b.n	80094aa <__libc_init_array+0x1e>
 80094c4:	08009778 	.word	0x08009778
 80094c8:	08009778 	.word	0x08009778
 80094cc:	08009778 	.word	0x08009778
 80094d0:	0800977c 	.word	0x0800977c

080094d4 <__retarget_lock_acquire_recursive>:
 80094d4:	4770      	bx	lr

080094d6 <__retarget_lock_release_recursive>:
 80094d6:	4770      	bx	lr

080094d8 <memcpy>:
 80094d8:	440a      	add	r2, r1
 80094da:	4291      	cmp	r1, r2
 80094dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e0:	d100      	bne.n	80094e4 <memcpy+0xc>
 80094e2:	4770      	bx	lr
 80094e4:	b510      	push	{r4, lr}
 80094e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ee:	4291      	cmp	r1, r2
 80094f0:	d1f9      	bne.n	80094e6 <memcpy+0xe>
 80094f2:	bd10      	pop	{r4, pc}

080094f4 <memset>:
 80094f4:	4402      	add	r2, r0
 80094f6:	4603      	mov	r3, r0
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d100      	bne.n	80094fe <memset+0xa>
 80094fc:	4770      	bx	lr
 80094fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009502:	e7f9      	b.n	80094f8 <memset+0x4>

08009504 <_free_r>:
 8009504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009506:	2900      	cmp	r1, #0
 8009508:	d044      	beq.n	8009594 <_free_r+0x90>
 800950a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950e:	9001      	str	r0, [sp, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f1a1 0404 	sub.w	r4, r1, #4
 8009516:	bfb8      	it	lt
 8009518:	18e4      	addlt	r4, r4, r3
 800951a:	f000 f8a9 	bl	8009670 <__malloc_lock>
 800951e:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <_free_r+0x94>)
 8009520:	9801      	ldr	r0, [sp, #4]
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	b933      	cbnz	r3, 8009534 <_free_r+0x30>
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	6014      	str	r4, [r2, #0]
 800952a:	b003      	add	sp, #12
 800952c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009530:	f000 b8a4 	b.w	800967c <__malloc_unlock>
 8009534:	42a3      	cmp	r3, r4
 8009536:	d908      	bls.n	800954a <_free_r+0x46>
 8009538:	6825      	ldr	r5, [r4, #0]
 800953a:	1961      	adds	r1, r4, r5
 800953c:	428b      	cmp	r3, r1
 800953e:	bf01      	itttt	eq
 8009540:	6819      	ldreq	r1, [r3, #0]
 8009542:	685b      	ldreq	r3, [r3, #4]
 8009544:	1949      	addeq	r1, r1, r5
 8009546:	6021      	streq	r1, [r4, #0]
 8009548:	e7ed      	b.n	8009526 <_free_r+0x22>
 800954a:	461a      	mov	r2, r3
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	b10b      	cbz	r3, 8009554 <_free_r+0x50>
 8009550:	42a3      	cmp	r3, r4
 8009552:	d9fa      	bls.n	800954a <_free_r+0x46>
 8009554:	6811      	ldr	r1, [r2, #0]
 8009556:	1855      	adds	r5, r2, r1
 8009558:	42a5      	cmp	r5, r4
 800955a:	d10b      	bne.n	8009574 <_free_r+0x70>
 800955c:	6824      	ldr	r4, [r4, #0]
 800955e:	4421      	add	r1, r4
 8009560:	1854      	adds	r4, r2, r1
 8009562:	42a3      	cmp	r3, r4
 8009564:	6011      	str	r1, [r2, #0]
 8009566:	d1e0      	bne.n	800952a <_free_r+0x26>
 8009568:	681c      	ldr	r4, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	6053      	str	r3, [r2, #4]
 800956e:	4421      	add	r1, r4
 8009570:	6011      	str	r1, [r2, #0]
 8009572:	e7da      	b.n	800952a <_free_r+0x26>
 8009574:	d902      	bls.n	800957c <_free_r+0x78>
 8009576:	230c      	movs	r3, #12
 8009578:	6003      	str	r3, [r0, #0]
 800957a:	e7d6      	b.n	800952a <_free_r+0x26>
 800957c:	6825      	ldr	r5, [r4, #0]
 800957e:	1961      	adds	r1, r4, r5
 8009580:	428b      	cmp	r3, r1
 8009582:	bf04      	itt	eq
 8009584:	6819      	ldreq	r1, [r3, #0]
 8009586:	685b      	ldreq	r3, [r3, #4]
 8009588:	6063      	str	r3, [r4, #4]
 800958a:	bf04      	itt	eq
 800958c:	1949      	addeq	r1, r1, r5
 800958e:	6021      	streq	r1, [r4, #0]
 8009590:	6054      	str	r4, [r2, #4]
 8009592:	e7ca      	b.n	800952a <_free_r+0x26>
 8009594:	b003      	add	sp, #12
 8009596:	bd30      	pop	{r4, r5, pc}
 8009598:	20004324 	.word	0x20004324

0800959c <cleanup_glue>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	460c      	mov	r4, r1
 80095a0:	6809      	ldr	r1, [r1, #0]
 80095a2:	4605      	mov	r5, r0
 80095a4:	b109      	cbz	r1, 80095aa <cleanup_glue+0xe>
 80095a6:	f7ff fff9 	bl	800959c <cleanup_glue>
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b2:	f7ff bfa7 	b.w	8009504 <_free_r>
	...

080095b8 <_reclaim_reent>:
 80095b8:	4b2c      	ldr	r3, [pc, #176]	; (800966c <_reclaim_reent+0xb4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4283      	cmp	r3, r0
 80095be:	b570      	push	{r4, r5, r6, lr}
 80095c0:	4604      	mov	r4, r0
 80095c2:	d051      	beq.n	8009668 <_reclaim_reent+0xb0>
 80095c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80095c6:	b143      	cbz	r3, 80095da <_reclaim_reent+0x22>
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d14a      	bne.n	8009664 <_reclaim_reent+0xac>
 80095ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095d0:	6819      	ldr	r1, [r3, #0]
 80095d2:	b111      	cbz	r1, 80095da <_reclaim_reent+0x22>
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7ff ff95 	bl	8009504 <_free_r>
 80095da:	6961      	ldr	r1, [r4, #20]
 80095dc:	b111      	cbz	r1, 80095e4 <_reclaim_reent+0x2c>
 80095de:	4620      	mov	r0, r4
 80095e0:	f7ff ff90 	bl	8009504 <_free_r>
 80095e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80095e6:	b111      	cbz	r1, 80095ee <_reclaim_reent+0x36>
 80095e8:	4620      	mov	r0, r4
 80095ea:	f7ff ff8b 	bl	8009504 <_free_r>
 80095ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095f0:	b111      	cbz	r1, 80095f8 <_reclaim_reent+0x40>
 80095f2:	4620      	mov	r0, r4
 80095f4:	f7ff ff86 	bl	8009504 <_free_r>
 80095f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80095fa:	b111      	cbz	r1, 8009602 <_reclaim_reent+0x4a>
 80095fc:	4620      	mov	r0, r4
 80095fe:	f7ff ff81 	bl	8009504 <_free_r>
 8009602:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009604:	b111      	cbz	r1, 800960c <_reclaim_reent+0x54>
 8009606:	4620      	mov	r0, r4
 8009608:	f7ff ff7c 	bl	8009504 <_free_r>
 800960c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800960e:	b111      	cbz	r1, 8009616 <_reclaim_reent+0x5e>
 8009610:	4620      	mov	r0, r4
 8009612:	f7ff ff77 	bl	8009504 <_free_r>
 8009616:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009618:	b111      	cbz	r1, 8009620 <_reclaim_reent+0x68>
 800961a:	4620      	mov	r0, r4
 800961c:	f7ff ff72 	bl	8009504 <_free_r>
 8009620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009622:	b111      	cbz	r1, 800962a <_reclaim_reent+0x72>
 8009624:	4620      	mov	r0, r4
 8009626:	f7ff ff6d 	bl	8009504 <_free_r>
 800962a:	69a3      	ldr	r3, [r4, #24]
 800962c:	b1e3      	cbz	r3, 8009668 <_reclaim_reent+0xb0>
 800962e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009630:	4620      	mov	r0, r4
 8009632:	4798      	blx	r3
 8009634:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009636:	b1b9      	cbz	r1, 8009668 <_reclaim_reent+0xb0>
 8009638:	4620      	mov	r0, r4
 800963a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800963e:	f7ff bfad 	b.w	800959c <cleanup_glue>
 8009642:	5949      	ldr	r1, [r1, r5]
 8009644:	b941      	cbnz	r1, 8009658 <_reclaim_reent+0xa0>
 8009646:	3504      	adds	r5, #4
 8009648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964a:	2d80      	cmp	r5, #128	; 0x80
 800964c:	68d9      	ldr	r1, [r3, #12]
 800964e:	d1f8      	bne.n	8009642 <_reclaim_reent+0x8a>
 8009650:	4620      	mov	r0, r4
 8009652:	f7ff ff57 	bl	8009504 <_free_r>
 8009656:	e7ba      	b.n	80095ce <_reclaim_reent+0x16>
 8009658:	680e      	ldr	r6, [r1, #0]
 800965a:	4620      	mov	r0, r4
 800965c:	f7ff ff52 	bl	8009504 <_free_r>
 8009660:	4631      	mov	r1, r6
 8009662:	e7ef      	b.n	8009644 <_reclaim_reent+0x8c>
 8009664:	2500      	movs	r5, #0
 8009666:	e7ef      	b.n	8009648 <_reclaim_reent+0x90>
 8009668:	bd70      	pop	{r4, r5, r6, pc}
 800966a:	bf00      	nop
 800966c:	2000001c 	.word	0x2000001c

08009670 <__malloc_lock>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__malloc_lock+0x8>)
 8009672:	f7ff bf2f 	b.w	80094d4 <__retarget_lock_acquire_recursive>
 8009676:	bf00      	nop
 8009678:	20004320 	.word	0x20004320

0800967c <__malloc_unlock>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__malloc_unlock+0x8>)
 800967e:	f7ff bf2a 	b.w	80094d6 <__retarget_lock_release_recursive>
 8009682:	bf00      	nop
 8009684:	20004320 	.word	0x20004320

08009688 <_init>:
 8009688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968a:	bf00      	nop
 800968c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968e:	bc08      	pop	{r3}
 8009690:	469e      	mov	lr, r3
 8009692:	4770      	bx	lr

08009694 <_fini>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	bf00      	nop
 8009698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800969a:	bc08      	pop	{r3}
 800969c:	469e      	mov	lr, r3
 800969e:	4770      	bx	lr
