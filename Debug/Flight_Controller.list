
Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009500  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080096d0  080096d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a0  080097a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097a8  080097a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097a8  080097a8  000197a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080097b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a8  20000080  08009830  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004328  08009830  00024328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024694  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eee  00000000  00000000  00044744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  00049638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  0004acf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029207  00000000  00000000  0004c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ac7  00000000  00000000  0007541f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1d78  00000000  00000000  00096ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00178c5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000619c  00000000  00000000  00178cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096b8 	.word	0x080096b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080096b8 	.word	0x080096b8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <_ZN9actuators7BLHelisC1E17TIM_HandleTypeDef>:
#include "blhelis.hpp"
#include "../state/state.hpp"

namespace actuators{

BLHelis::BLHelis(TIM_HandleTypeDef htim8){
 8000514:	b084      	sub	sp, #16
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	f107 0014 	add.w	r0, r7, #20
 8000522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->timer = &htim8;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f107 0214 	add.w	r2, r7, #20
 800052c:	601a      	str	r2, [r3, #0]
	this->Init_Motors();
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f808 	bl	8000544 <_ZN9actuators7BLHelis11Init_MotorsEv>
}
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000540:	b004      	add	sp, #16
 8000542:	4770      	bx	lr

08000544 <_ZN9actuators7BLHelis11Init_MotorsEv>:

void BLHelis::Init_Motors(void){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(this->timer);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f005 faeb 	bl	8005b2c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_1);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fc17 	bl	8005d90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_2);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2104      	movs	r1, #4
 8000568:	4618      	mov	r0, r3
 800056a:	f005 fc11 	bl	8005d90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_3);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2108      	movs	r1, #8
 8000574:	4618      	mov	r0, r3
 8000576:	f005 fc0b 	bl	8005d90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(this->timer, TIM_CHANNEL_4);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	210c      	movs	r1, #12
 8000580:	4618      	mov	r0, r3
 8000582:	f005 fc05 	bl	8005d90 <HAL_TIM_PWM_Start>
	static uint16_t mc1_l = MOTOR_1MS;
	static uint16_t mc1_h = MOTOR_13MS;
	static uint16_t mc1 = 0;
	static uint16_t step_count = 1000;
	static uint8_t delay = 10;
	float step = (mc1_h - mc1_l) / step_count;
 8000586:	4b4d      	ldr	r3, [pc, #308]	; (80006bc <_ZN9actuators7BLHelis11Init_MotorsEv+0x178>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	4b4c      	ldr	r3, [pc, #304]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	1ad3      	subs	r3, r2, r3
 8000592:	4a4c      	ldr	r2, [pc, #304]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 8000594:	8812      	ldrh	r2, [r2, #0]
 8000596:	fb93 f3f2 	sdiv	r3, r3, r2
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	edc7 7a04 	vstr	s15, [r7, #16]

	motor_sp msp;

	//delay for motor startup????
	//vTaskDelay(10000);
	for(uint16_t i = 0; i < (step_count/2); i++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	82fb      	strh	r3, [r7, #22]
 80005aa:	4b46      	ldr	r3, [pc, #280]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	085b      	lsrs	r3, r3, #1
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	8afa      	ldrh	r2, [r7, #22]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d22c      	bcs.n	8000612 <_ZN9actuators7BLHelis11Init_MotorsEv+0xce>
		mc1 = mc1_l + i * (int)step;
 80005b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80005bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005c0:	ee17 3a90 	vmov	r3, s15
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	8afa      	ldrh	r2, [r7, #22]
 80005c8:	fb12 f303 	smulbb	r3, r2, r3
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b3c      	ldr	r3, [pc, #240]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 80005d0:	881b      	ldrh	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b3c      	ldr	r3, [pc, #240]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005d8:	801a      	strh	r2, [r3, #0]
		msp = {mc1, mc1, mc1, mc1};
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005dc:	8818      	ldrh	r0, [r3, #0]
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e0:	8819      	ldrh	r1, [r3, #0]
 80005e2:	4b39      	ldr	r3, [pc, #228]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	4b38      	ldr	r3, [pc, #224]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	8138      	strh	r0, [r7, #8]
 80005ec:	8179      	strh	r1, [r7, #10]
 80005ee:	81ba      	strh	r2, [r7, #12]
 80005f0:	81fb      	strh	r3, [r7, #14]
		this->Update_Motor_SP(msp);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f8f8 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
		vTaskDelay(delay);
 8000600:	4b32      	ldr	r3, [pc, #200]	; (80006cc <_ZN9actuators7BLHelis11Init_MotorsEv+0x188>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fcd5 	bl	8007fb4 <vTaskDelay>
	for(uint16_t i = 0; i < (step_count/2); i++){
 800060a:	8afb      	ldrh	r3, [r7, #22]
 800060c:	3301      	adds	r3, #1
 800060e:	82fb      	strh	r3, [r7, #22]
 8000610:	e7cb      	b.n	80005aa <_ZN9actuators7BLHelis11Init_MotorsEv+0x66>
	}
	for(uint16_t i = 0; i < (step_count/2); i++){
 8000612:	2300      	movs	r3, #0
 8000614:	82bb      	strh	r3, [r7, #20]
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <_ZN9actuators7BLHelis11Init_MotorsEv+0x180>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	085b      	lsrs	r3, r3, #1
 800061c:	b29b      	uxth	r3, r3
 800061e:	8aba      	ldrh	r2, [r7, #20]
 8000620:	429a      	cmp	r2, r3
 8000622:	d22c      	bcs.n	800067e <_ZN9actuators7BLHelis11Init_MotorsEv+0x13a>
		mc1 = mc1_h - i * (int)step;
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <_ZN9actuators7BLHelis11Init_MotorsEv+0x178>)
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	edd7 7a04 	vldr	s15, [r7, #16]
 800062c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000630:	ee17 3a90 	vmov	r3, s15
 8000634:	b29b      	uxth	r3, r3
 8000636:	8ab9      	ldrh	r1, [r7, #20]
 8000638:	fb11 f303 	smulbb	r3, r1, r3
 800063c:	b29b      	uxth	r3, r3
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000644:	801a      	strh	r2, [r3, #0]
		msp = {mc1, mc1, mc1, mc1};
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000648:	8818      	ldrh	r0, [r3, #0]
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 800064c:	8819      	ldrh	r1, [r3, #0]
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000650:	881a      	ldrh	r2, [r3, #0]
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	8138      	strh	r0, [r7, #8]
 8000658:	8179      	strh	r1, [r7, #10]
 800065a:	81ba      	strh	r2, [r7, #12]
 800065c:	81fb      	strh	r3, [r7, #14]
		this->Update_Motor_SP(msp);
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f8c2 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
		vTaskDelay(delay);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <_ZN9actuators7BLHelis11Init_MotorsEv+0x188>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f007 fc9f 	bl	8007fb4 <vTaskDelay>
	for(uint16_t i = 0; i < (step_count/2); i++){
 8000676:	8abb      	ldrh	r3, [r7, #20]
 8000678:	3301      	adds	r3, #1
 800067a:	82bb      	strh	r3, [r7, #20]
 800067c:	e7cb      	b.n	8000616 <_ZN9actuators7BLHelis11Init_MotorsEv+0xd2>
	}
	mc1 = mc1_l;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_ZN9actuators7BLHelis11Init_MotorsEv+0x17c>)
 8000680:	881a      	ldrh	r2, [r3, #0]
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000684:	801a      	strh	r2, [r3, #0]
	msp = {mc1, mc1, mc1, mc1};
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000688:	8818      	ldrh	r0, [r3, #0]
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 800068c:	8819      	ldrh	r1, [r3, #0]
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000690:	881a      	ldrh	r2, [r3, #0]
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <_ZN9actuators7BLHelis11Init_MotorsEv+0x184>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	8138      	strh	r0, [r7, #8]
 8000698:	8179      	strh	r1, [r7, #10]
 800069a:	81ba      	strh	r2, [r7, #12]
 800069c:	81fb      	strh	r3, [r7, #14]
	this->Update_Motor_SP(msp);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f8a2 	bl	80007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>
	vTaskDelay(2000);
 80006ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006b0:	f007 fc80 	bl	8007fb4 <vTaskDelay>
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000002 	.word	0x20000002
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000004 	.word	0x20000004
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	20000006 	.word	0x20000006

080006d0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE>:

void BLHelis::actuateMotors(state::QuadControlActions& ac){
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]

	static uint16_t m1_sp, m2_sp, m3_sp, m4_sp;

	//mix the controller output
	m1_sp = ac.u1 + ac.u2 + ac.u3 + ac.u4;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	ed93 7a00 	vldr	s14, [r3]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80006e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80006f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80006fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000702:	ee17 3a90 	vmov	r3, s15
 8000706:	b29a      	uxth	r2, r3
 8000708:	4b35      	ldr	r3, [pc, #212]	; (80007e0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x110>)
 800070a:	801a      	strh	r2, [r3, #0]
	m2_sp = ac.u1 - ac.u2 + ac.u3 - ac.u4;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	ed93 7a00 	vldr	s14, [r3]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	edd3 7a01 	vldr	s15, [r3, #4]
 8000718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	edd3 7a03 	vldr	s15, [r3, #12]
 800072c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000734:	ee17 3a90 	vmov	r3, s15
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x114>)
 800073c:	801a      	strh	r2, [r3, #0]
	m3_sp = ac.u1 + ac.u2 - ac.u3 - ac.u4;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	ed93 7a00 	vldr	s14, [r3]
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	edd3 7a01 	vldr	s15, [r3, #4]
 800074a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	edd3 7a02 	vldr	s15, [r3, #8]
 8000754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	edd3 7a03 	vldr	s15, [r3, #12]
 800075e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000766:	ee17 3a90 	vmov	r3, s15
 800076a:	b29a      	uxth	r2, r3
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x118>)
 800076e:	801a      	strh	r2, [r3, #0]
	m4_sp = ac.u1 - ac.u2 - ac.u3 + ac.u4;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	ed93 7a00 	vldr	s14, [r3]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edd3 7a01 	vldr	s15, [r3, #4]
 800077c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	edd3 7a02 	vldr	s15, [r3, #8]
 8000786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000798:	ee17 3a90 	vmov	r3, s15
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x11c>)
 80007a0:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_1, m1_sp);
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x110>)
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_2, m2_sp);
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x114>)
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_3, m3_sp);
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x118>)
 80007bc:	881a      	ldrh	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_4, m4_sp);
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE+0x11c>)
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2000009e 	.word	0x2000009e
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	200000a2 	.word	0x200000a2
 80007ec:	200000a4 	.word	0x200000a4

080007f0 <_ZN9actuators7BLHelis15Update_Motor_SPENS_8motor_spE>:
	this->Update_Motor_SP(msp);
	vTaskDelay(2000);

}

void BLHelis::Update_Motor_SP(motor_sp msp){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	e883 0006 	stmia.w	r3, {r1, r2}
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_1, msp.m1_sp);
 80007fe:	88ba      	ldrh	r2, [r7, #4]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_2, msp.m2_sp);
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_3, msp.m3_sp);
 8000812:	893a      	ldrh	r2, [r7, #8]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(this->timer, TIM_CHANNEL_4, msp.m4_sp);
 800081c:	897a      	ldrh	r2, [r7, #10]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef>:

#include "nrf24.hpp"

namespace communications{

NRF24::NRF24(SPI_HandleTypeDef spi) : p0_address{0xe7, 0xe7, 0xe7, 0xe7, 0xe7}{
 8000834:	b084      	sub	sp, #16
 8000836:	b580      	push	{r7, lr}
 8000838:	b086      	sub	sp, #24
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a48      	ldr	r2, [pc, #288]	; (800096c <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x138>)
 800084a:	3325      	adds	r3, #37	; 0x25
 800084c:	6810      	ldr	r0, [r2, #0]
 800084e:	6018      	str	r0, [r3, #0]
 8000850:	7912      	ldrb	r2, [r2, #4]
 8000852:	711a      	strb	r2, [r3, #4]

	//Save the SPI handle
	this->spi = &spi;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800085a:	601a      	str	r2, [r3, #0]

	//CONFIGURE THE payload_tx_buf TO ALLOW FOR PAYLOAD READING
	this->payload_tx_buf[0] = this->R_RX_PAYLOAD;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2261      	movs	r2, #97	; 0x61
 8000860:	711a      	strb	r2, [r3, #4]
	for(int i = 1; i < PAYLOAD_SIZE+1; i++){
 8000862:	2301      	movs	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	2b20      	cmp	r3, #32
 800086a:	dc09      	bgt.n	8000880 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x4c>
			this->payload_tx_buf[i] = 0xff; //pad rest of the buffer with NOPs
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	4413      	add	r3, r2
 8000872:	3304      	adds	r3, #4
 8000874:	22ff      	movs	r2, #255	; 0xff
 8000876:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < PAYLOAD_SIZE+1; i++){
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e7f2      	b.n	8000866 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x32>
	}

	//set CE low before configuring the NRF?
	HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000886:	483a      	ldr	r0, [pc, #232]	; (8000970 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x13c>)
 8000888:	f002 fa20 	bl	8002ccc <HAL_GPIO_WritePin>

	//CSN must be high, transitioning to low starts SPI
	End_SPI();
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f98f 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>

	//DISABLE AUTO-ACK
	uint8_t disable_autoack = 0x00;
 8000892:	2300      	movs	r3, #0
 8000894:	74fb      	strb	r3, [r7, #19]
	uint8_t disable_autoretransmit = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	74bb      	strb	r3, [r7, #18]
	Write_Register(EN_AA, &disable_autoack);
 800089a:	f107 0313 	add.w	r3, r7, #19
 800089e:	461a      	mov	r2, r3
 80008a0:	2101      	movs	r1, #1
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f88e 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>
	Write_Register(SETUP_RETR, &disable_autoretransmit);
 80008a8:	f107 0312 	add.w	r3, r7, #18
 80008ac:	461a      	mov	r2, r3
 80008ae:	2104      	movs	r1, #4
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f887 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>


	//SET THE PAYLOAD SIZE
	uint8_t size_readback;
	while(size_readback != PAYLOAD_SIZE){
 80008b6:	7c7b      	ldrb	r3, [r7, #17]
 80008b8:	2b20      	cmp	r3, #32
 80008ba:	d00e      	beq.n	80008da <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xa6>
		//write the payload size and verify
		Set_Payload_Size(PAYLOAD_SIZE);
 80008bc:	2120      	movs	r1, #32
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f920 	bl	8000b04 <_ZN14communications5NRF2416Set_Payload_SizeEh>
		vTaskDelay(3);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f007 fb75 	bl	8007fb4 <vTaskDelay>
		Read_Register((uint8_t)RX_PW_P0, &size_readback);
 80008ca:	f107 0311 	add.w	r3, r7, #17
 80008ce:	461a      	mov	r2, r3
 80008d0:	2111      	movs	r1, #17
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f84e 	bl	8000974 <_ZN14communications5NRF2413Read_RegisterEhPh>
	while(size_readback != PAYLOAD_SIZE){
 80008d8:	e7ed      	b.n	80008b6 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x82>
	}


	//CONFIGURE THE ADDRESS FOR PIPE0
	uint8_t p0_address_readback[5];
	while(!array_eq(p0_address_readback, this->p0_address, (uint8_t)5)){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80008e0:	f107 010c 	add.w	r1, r7, #12
 80008e4:	2305      	movs	r3, #5
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 f972 	bl	8000bd0 <_ZN14communications5NRF248array_eqEPhS1_h>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f083 0301 	eor.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d012      	beq.n	800091e <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xea>
		//write the address for pipe0, verify it's correct
		Write_MB_Register((uint8_t)RX_ADDR_P0, this->p0_address, sizeof(this->p0_address));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80008fe:	2305      	movs	r3, #5
 8000900:	210a      	movs	r1, #10
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f8c2 	bl	8000a8c <_ZN14communications5NRF2417Write_MB_RegisterEhPhh>
		vTaskDelay(3);
 8000908:	2003      	movs	r0, #3
 800090a:	f007 fb53 	bl	8007fb4 <vTaskDelay>
		Read_MB_Register((uint8_t)RX_ADDR_P0, p0_address_readback, sizeof(this->p0_address));
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	2305      	movs	r3, #5
 8000914:	210a      	movs	r1, #10
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 f880 	bl	8000a1c <_ZN14communications5NRF2416Read_MB_RegisterEhPhh>
	while(!array_eq(p0_address_readback, this->p0_address, (uint8_t)5)){
 800091c:	e7dd      	b.n	80008da <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xa6>
	}


	//SET THE COMMUNICATION SPEED
	Set_Data_Rate(this->nrf24_comm_speed);
 800091e:	2100      	movs	r1, #0
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f000 f90b 	bl	8000b3c <_ZN14communications5NRF2413Set_Data_RateENS0_11nrf24_speedE>

	//POWER ON AND SET TO PRIM_RX MODE
	uint8_t config_data = 0x00 | NRF24_PWR_UP_On | NRF24_PRIM_RX_On;
 8000926:	2303      	movs	r3, #3
 8000928:	72fb      	strb	r3, [r7, #11]
	uint8_t config_readback = 0x00;
 800092a:	2300      	movs	r3, #0
 800092c:	72bb      	strb	r3, [r7, #10]
	while(config_readback != config_data){
 800092e:	7aba      	ldrb	r2, [r7, #10]
 8000930:	7afb      	ldrb	r3, [r7, #11]
 8000932:	429a      	cmp	r2, r3
 8000934:	d011      	beq.n	800095a <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0x126>
		//write the config and verify
		Write_Register((uint8_t)CONFIG, &config_data);
 8000936:	f107 030b 	add.w	r3, r7, #11
 800093a:	461a      	mov	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f840 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>
		vTaskDelay(3);
 8000944:	2003      	movs	r0, #3
 8000946:	f007 fb35 	bl	8007fb4 <vTaskDelay>
		Read_Register((uint8_t)CONFIG, &config_readback);
 800094a:	f107 030a 	add.w	r3, r7, #10
 800094e:	461a      	mov	r2, r3
 8000950:	2100      	movs	r1, #0
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f000 f80e 	bl	8000974 <_ZN14communications5NRF2413Read_RegisterEhPh>
	while(config_readback != config_data){
 8000958:	e7e9      	b.n	800092e <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef+0xfa>

	}

}
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000966:	b004      	add	sp, #16
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	080096d0 	.word	0x080096d0
 8000970:	40020400 	.word	0x40020400

08000974 <_ZN14communications5NRF2413Read_RegisterEhPh>:

void NRF24::Read_Register(uint8_t register_address, uint8_t* data){
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	460b      	mov	r3, r1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	72fb      	strb	r3, [r7, #11]

	static uint8_t command;
	command = this->R_REGISTER | register_address;
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <_ZN14communications5NRF2413Read_RegisterEhPh+0x4c>)
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	7013      	strb	r3, [r2, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f000 f8fd 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	230a      	movs	r3, #10
 8000994:	2201      	movs	r2, #1
 8000996:	490a      	ldr	r1, [pc, #40]	; (80009c0 <_ZN14communications5NRF2413Read_RegisterEhPh+0x4c>)
 8000998:	f004 fb59 	bl	800504e <HAL_SPI_Transmit>
 800099c:	4603      	mov	r3, r0
 800099e:	75fb      	strb	r3, [r7, #23]
	hal_status = HAL_SPI_Receive(this->spi, data, 1, (uint32_t)10);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	230a      	movs	r3, #10
 80009a6:	2201      	movs	r2, #1
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	f004 fc8c 	bl	80052c6 <HAL_SPI_Receive>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]

	//deselect the comms by setting CSN high
	End_SPI();
 80009b2:	68f8      	ldr	r0, [r7, #12]
 80009b4:	f000 f8fc 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>


}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000a6 	.word	0x200000a6

080009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>:

void NRF24::Write_Register(uint8_t register_address, uint8_t* data){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	460b      	mov	r3, r1
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	72fb      	strb	r3, [r7, #11]
	static uint8_t command;
	command = this->W_REGISTER | register_address;
 80009d2:	7afb      	ldrb	r3, [r7, #11]
 80009d4:	f043 0320 	orr.w	r3, r3, #32
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <_ZN14communications5NRF2414Write_RegisterEhPh+0x54>)
 80009dc:	701a      	strb	r2, [r3, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 f8d2 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	230a      	movs	r3, #10
 80009ea:	2201      	movs	r2, #1
 80009ec:	490a      	ldr	r1, [pc, #40]	; (8000a18 <_ZN14communications5NRF2414Write_RegisterEhPh+0x54>)
 80009ee:	f004 fb2e 	bl	800504e <HAL_SPI_Transmit>
 80009f2:	4603      	mov	r3, r0
 80009f4:	75fb      	strb	r3, [r7, #23]
	hal_status = HAL_SPI_Transmit(this->spi, data, 1, (uint32_t)10);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	230a      	movs	r3, #10
 80009fc:	2201      	movs	r2, #1
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f004 fb25 	bl	800504e <HAL_SPI_Transmit>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75fb      	strb	r3, [r7, #23]

	//deselect the comms by setting CSN high
	End_SPI();
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f000 f8d1 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>


}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000a7 	.word	0x200000a7

08000a1c <_ZN14communications5NRF2416Read_MB_RegisterEhPhh>:

void NRF24::Read_MB_Register(uint8_t register_address, uint8_t* buf, uint8_t len){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	461a      	mov	r2, r3
 8000a28:	460b      	mov	r3, r1
 8000a2a:	72fb      	strb	r3, [r7, #11]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	72bb      	strb	r3, [r7, #10]

	static uint8_t command;
	command = this->R_REGISTER | register_address;
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x6c>)
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	7013      	strb	r3, [r2, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 f8a6 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6818      	ldr	r0, [r3, #0]
 8000a40:	230a      	movs	r3, #10
 8000a42:	2201      	movs	r2, #1
 8000a44:	4910      	ldr	r1, [pc, #64]	; (8000a88 <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x6c>)
 8000a46:	f004 fb02 	bl	800504e <HAL_SPI_Transmit>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	1e5a      	subs	r2, r3, #1
 8000a52:	72ba      	strb	r2, [r7, #10]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	bf14      	ite	ne
 8000a58:	2301      	movne	r3, #1
 8000a5a:	2300      	moveq	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00b      	beq.n	8000a7a <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x5e>
		hal_status = HAL_SPI_Receive(this->spi, buf++, 1, (uint32_t)10);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	1c4b      	adds	r3, r1, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	230a      	movs	r3, #10
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f004 fc29 	bl	80052c6 <HAL_SPI_Receive>
 8000a74:	4603      	mov	r3, r0
 8000a76:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000a78:	e7e9      	b.n	8000a4e <_ZN14communications5NRF2416Read_MB_RegisterEhPhh+0x32>
	}

	//deselect the comms by setting CSN high
	End_SPI();
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 f898 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>



}
 8000a80:	bf00      	nop
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200000a8 	.word	0x200000a8

08000a8c <_ZN14communications5NRF2417Write_MB_RegisterEhPhh>:


void NRF24::Write_MB_Register(uint8_t register_address, uint8_t* data, uint8_t len){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	72fb      	strb	r3, [r7, #11]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	72bb      	strb	r3, [r7, #10]

	static uint8_t command;
	command = this->W_REGISTER | register_address;
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x74>)
 8000aaa:	701a      	strb	r2, [r3, #0]

	//bring CSN low to select the comms
	Begin_SPI();
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 f86b 	bl	8000b88 <_ZN14communications5NRF249Begin_SPIEv>

	HAL_StatusTypeDef hal_status = HAL_SPI_Transmit(this->spi, &command, 1, (uint32_t)10);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4911      	ldr	r1, [pc, #68]	; (8000b00 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x74>)
 8000abc:	f004 fac7 	bl	800504e <HAL_SPI_Transmit>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000ac4:	7abb      	ldrb	r3, [r7, #10]
 8000ac6:	1e5a      	subs	r2, r3, #1
 8000ac8:	72ba      	strb	r2, [r7, #10]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	bf14      	ite	ne
 8000ace:	2301      	movne	r3, #1
 8000ad0:	2300      	moveq	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00b      	beq.n	8000af0 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x64>
		hal_status = HAL_SPI_Transmit(this->spi, data++, 1, (uint32_t)10);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6818      	ldr	r0, [r3, #0]
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	1c4b      	adds	r3, r1, #1
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f004 fab2 	bl	800504e <HAL_SPI_Transmit>
 8000aea:	4603      	mov	r3, r0
 8000aec:	75fb      	strb	r3, [r7, #23]
	while(len--){
 8000aee:	e7e9      	b.n	8000ac4 <_ZN14communications5NRF2417Write_MB_RegisterEhPhh+0x38>
	}

	//deselect the comms by setting CSN high
	End_SPI();
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f000 f85d 	bl	8000bb0 <_ZN14communications5NRF247End_SPIEv>


}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000a9 	.word	0x200000a9

08000b04 <_ZN14communications5NRF2416Set_Payload_SizeEh>:
		Read_Payload();
	}

}

void NRF24::Set_Payload_Size(uint8_t size){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]

	//5 total pipes to set to the correct size
	for(int i = 0; i < 6; i++){
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	dc0c      	bgt.n	8000b34 <_ZN14communications5NRF2416Set_Payload_SizeEh+0x30>
		Write_Register((uint8_t)(RX_PW_P0 + i), &size);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3311      	adds	r3, #17
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	1cfa      	adds	r2, r7, #3
 8000b24:	4619      	mov	r1, r3
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff4c 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>
	for(int i = 0; i < 6; i++){
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	e7ef      	b.n	8000b14 <_ZN14communications5NRF2416Set_Payload_SizeEh+0x10>
	}

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZN14communications5NRF2413Set_Data_RateENS0_11nrf24_speedE>:
	//deselect the comms by setting CSN high
	End_SPI();

}

void NRF24::Set_Data_Rate(enum nrf24_speed s){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]

	uint8_t dr_low = (s & 0x02) >> 1;
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	085b      	lsrs	r3, r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
	uint8_t dr_high = s & 0x01;
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	73bb      	strb	r3, [r7, #14]
	uint8_t data = (dr_low << RF_DR_LOW_Pos) | (dr_high << RF_DR_HIGH_Pos);
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	015b      	lsls	r3, r3, #5
 8000b60:	b25a      	sxtb	r2, r3
 8000b62:	7bbb      	ldrb	r3, [r7, #14]
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b25b      	sxtb	r3, r3
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	737b      	strb	r3, [r7, #13]
	Write_Register((uint8_t)RF_SETUP, &data);
 8000b70:	f107 030d 	add.w	r3, r7, #13
 8000b74:	461a      	mov	r2, r3
 8000b76:	2106      	movs	r1, #6
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff23 	bl	80009c4 <_ZN14communications5NRF2414Write_RegisterEhPh>

}
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <_ZN14communications5NRF249Begin_SPIEv>:

void NRF24::Begin_SPI(void){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	//bring CSN low to select the comms
	HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <_ZN14communications5NRF249Begin_SPIEv+0x24>)
 8000b98:	f002 f898 	bl	8002ccc <HAL_GPIO_WritePin>
	vTaskDelay(1);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f007 fa09 	bl	8007fb4 <vTaskDelay>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40020400 	.word	0x40020400

08000bb0 <_ZN14communications5NRF247End_SPIEv>:
void NRF24::End_SPI(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	//deselect the comms by setting CSN high
	HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	4803      	ldr	r0, [pc, #12]	; (8000bcc <_ZN14communications5NRF247End_SPIEv+0x1c>)
 8000bc0:	f002 f884 	bl	8002ccc <HAL_GPIO_WritePin>

}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <_ZN14communications5NRF248array_eqEPhS1_h>:
	}else{
		return false;
	}
}

bool NRF24::array_eq(uint8_t* arr1, uint8_t* arr2, uint8_t len){
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	70fb      	strb	r3, [r7, #3]
	while(len--){
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	1e5a      	subs	r2, r3, #1
 8000be2:	70fa      	strb	r2, [r7, #3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d010      	beq.n	8000c14 <_ZN14communications5NRF248array_eqEPhS1_h+0x44>
		if(*(arr1++) != *(arr2++)){
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	60ba      	str	r2, [r7, #8]
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	1c59      	adds	r1, r3, #1
 8000bfe:	6079      	str	r1, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0e6      	beq.n	8000bde <_ZN14communications5NRF248array_eqEPhS1_h+0xe>
			return false;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e000      	b.n	8000c16 <_ZN14communications5NRF248array_eqEPhS1_h+0x46>
		}
	}

	return true;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_ZN7control2PIC1Effff>:
#include "../state/trajectories.hpp"
#include "../model/models.hpp"

namespace control{

PI::PI(float sp, float dt, float Kp, float Ki){
 8000c22:	b480      	push	{r7}
 8000c24:	b087      	sub	sp, #28
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6178      	str	r0, [r7, #20]
 8000c2a:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c2e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000c32:	ed87 1a02 	vstr	s2, [r7, #8]
 8000c36:	edc7 1a01 	vstr	s3, [r7, #4]
		this->setpoint = sp;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	601a      	str	r2, [r3, #0]
		this->dt = dt;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]
		this->Kp = Kp;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	609a      	str	r2, [r3, #8]
		this->Ki = Ki;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	60da      	str	r2, [r3, #12]
}
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	4618      	mov	r0, r3
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_ZN7control2PI10calcOutputEf>:

float PI::calcOutput(float stateEstimate){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	ed87 0a00 	vstr	s0, [r7]
		static float error = 0;
		static float ierror = 0;

		error = this->setpoint - stateEstimate;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	ed93 7a00 	vldr	s14, [r3]
 8000c72:	edd7 7a00 	vldr	s15, [r7]
 8000c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <_ZN7control2PI10calcOutputEf+0xa8>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
		ierror += this->dt * error;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <_ZN7control2PI10calcOutputEf+0xa8>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000c9c:	edc3 7a00 	vstr	s15, [r3]
		if(ierror > 10){
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb2:	dd03      	ble.n	8000cbc <_ZN7control2PI10calcOutputEf+0x5c>
			ierror = 10;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <_ZN7control2PI10calcOutputEf+0xb0>)
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e00c      	b.n	8000cd6 <_ZN7control2PI10calcOutputEf+0x76>
		}
		else if(ierror < -10){
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8000cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cce:	d502      	bpl.n	8000cd6 <_ZN7control2PI10calcOutputEf+0x76>
			ierror = -10;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <_ZN7control2PI10calcOutputEf+0xb4>)
 8000cd4:	601a      	str	r2, [r3, #0]
		}
		return (this->Kp * error + this->Ki * ierror);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <_ZN7control2PI10calcOutputEf+0xa8>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_ZN7control2PI10calcOutputEf+0xac>)
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200000ac 	.word	0x200000ac
 8000d0c:	200000b0 	.word	0x200000b0
 8000d10:	41200000 	.word	0x41200000
 8000d14:	c1200000 	.word	0xc1200000

08000d18 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <vApplicationGetIdleTaskMemory+0x30>)
 8000d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200000b4 	.word	0x200000b4
 8000d60:	20000168 	.word	0x20000168

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	b0cf      	sub	sp, #316	; 0x13c
 8000d68:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6a:	f001 fcdf 	bl	800272c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6e:	f000 f8f3 	bl	8000f58 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d72:	f000 fb49 	bl	8001408 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000d76:	f000 fb19 	bl	80013ac <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000d7a:	f000 f987 	bl	800108c <_ZL12MX_I2C1_Initv>
  MX_SPI2_Init();
 8000d7e:	f000 f9b9 	bl	80010f4 <_ZL12MX_SPI2_Initv>
  MX_TIM8_Init();
 8000d82:	f000 f9f3 	bl	800116c <_ZL12MX_TIM8_Initv>
  MX_UART4_Init();
 8000d86:	f000 fae3 	bl	8001350 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */

  I2C_HandleTypeDef* phi2c1 = &hi2c1;
 8000d8a:	4b68      	ldr	r3, [pc, #416]	; (8000f2c <main+0x1c8>)
 8000d8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  I2C_HandleTypeDef& rhi2c1 = hi2c1;
 8000d90:	4b66      	ldr	r3, [pc, #408]	; (8000f2c <main+0x1c8>)
 8000d92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  /* USER CODE END 2 */

  //required devices
  sensors::BNO055 imu(rhi2c1);
 8000d96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000d9a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fea6 	bl	8001af0 <_ZN7sensors6BNO055C1ER17I2C_HandleTypeDef>
  actuators::BLHelis motors(htim8);
 8000da4:	4e62      	ldr	r6, [pc, #392]	; (8000f30 <main+0x1cc>)
 8000da6:	f107 0cd4 	add.w	ip, r7, #212	; 0xd4
 8000daa:	466d      	mov	r5, sp
 8000dac:	f106 040c 	add.w	r4, r6, #12
 8000db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000dc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000dc4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000dc8:	4660      	mov	r0, ip
 8000dca:	f7ff fba3 	bl	8000514 <_ZN9actuators7BLHelisC1E17TIM_HandleTypeDef>
  communications::NRF24 comms(hspi2);
 8000dce:	4c59      	ldr	r4, [pc, #356]	; (8000f34 <main+0x1d0>)
 8000dd0:	f107 05a8 	add.w	r5, r7, #168	; 0xa8
 8000dd4:	4668      	mov	r0, sp
 8000dd6:	f104 030c 	add.w	r3, r4, #12
 8000dda:	224c      	movs	r2, #76	; 0x4c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f008 fb93 	bl	8009508 <memcpy>
 8000de2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000de6:	4628      	mov	r0, r5
 8000de8:	f7ff fd24 	bl	8000834 <_ZN14communications5NRF24C1E19__SPI_HandleTypeDef>
  threads::actuatorThreadArgs actuatorArgs;
  threads::sensorThreadArgs sensorArgs;
  threads::initializerThreadArgs initializerArgs;

  //create the mutexes
  SemaphoreHandle_t xSharedStateMutex = xSemaphoreCreateMutex();
 8000dec:	2001      	movs	r0, #1
 8000dee:	f006 fb94 	bl	800751a <xQueueCreateMutex>
 8000df2:	4603      	mov	r3, r0
 8000df4:	65fb      	str	r3, [r7, #92]	; 0x5c
  SemaphoreHandle_t xSharedOutputMutex = xSemaphoreCreateMutex();
 8000df6:	2001      	movs	r0, #1
 8000df8:	f006 fb8f 	bl	800751a <xQueueCreateMutex>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  SemaphoreHandle_t xInitializerMutex = xSemaphoreCreateMutex();
 8000e00:	2001      	movs	r0, #1
 8000e02:	f006 fb8a 	bl	800751a <xQueueCreateMutex>
 8000e06:	4603      	mov	r3, r0
 8000e08:	657b      	str	r3, [r7, #84]	; 0x54
  TaskHandle_t xInitializerThreadHandle;
  BaseType_t xRet;


  //open the mutexes
  xSemaphoreGive(xSharedStateMutex);
 8000e0a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	f006 fb9b 	bl	800754c <xQueueGenericSend>
  xSemaphoreGive(xSharedOutputMutex);
 8000e16:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	f006 fb95 	bl	800754c <xQueueGenericSend>
  xSemaphoreGive(xInitializerMutex);
 8000e22:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f006 fb8f 	bl	800754c <xQueueGenericSend>

  //controller thread arguments
  controllerArgs.pxSharedOutputMutex = &xSharedOutputMutex;
 8000e2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  controllerArgs.pxSharedStateMutex = &xSharedStateMutex;
 8000e36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  controllerArgs.state = &sharedState;
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  controllerArgs.output = &sharedOutput;
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  controllerArgs.pxInitializerMutex = &xInitializerMutex;
 8000e4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  //sensor thread arguments
  sensorArgs.state = &sharedState;
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	677b      	str	r3, [r7, #116]	; 0x74
  sensorArgs.pxSharedStateMutex = &xSharedStateMutex;
 8000e5c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e60:	67fb      	str	r3, [r7, #124]	; 0x7c
  sensorArgs.pxInitializerMutex = &xInitializerMutex;
 8000e62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  //actuator thread arguments
  actuatorArgs.pxSharedOutputMutex = &xSharedOutputMutex;
 8000e6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  actuatorArgs.motors = &motors;
 8000e72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  actuatorArgs.output = &sharedOutput;
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  actuatorArgs.pxInitializerMutex = &xInitializerMutex;
 8000e82:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  //initializer thread arguments
  initializerArgs.pxIMU = &imu;
 8000e8a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000e8e:	663b      	str	r3, [r7, #96]	; 0x60
  initializerArgs.pxComms = &comms;
 8000e90:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000e94:	66bb      	str	r3, [r7, #104]	; 0x68
  initializerArgs.pxMotors = &motors;
 8000e96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e9a:	667b      	str	r3, [r7, #100]	; 0x64
  initializerArgs.pxInitializerMutex = &xInitializerMutex;
 8000e9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
  initializerArgs.pxInitializerThreadHandle = &xInitializerThreadHandle;
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	673b      	str	r3, [r7, #112]	; 0x70

  //create all tasks
  xRet = xTaskCreate(threads::initializerThread,
 8000ea6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	2306      	movs	r3, #6
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb8:	491f      	ldr	r1, [pc, #124]	; (8000f38 <main+0x1d4>)
 8000eba:	4820      	ldr	r0, [pc, #128]	; (8000f3c <main+0x1d8>)
 8000ebc:	f006 feaf 	bl	8007c1e <xTaskCreate>
 8000ec0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
					 1024,
					 (void*)&initializerArgs,
					 configMAX_PRIORITIES-1, //highest prio, will run first
					 &xInitializerThreadHandle);

  xRet = xTaskCreate(threads::sensorThread,
 8000ec4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	2305      	movs	r3, #5
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed8:	4919      	ldr	r1, [pc, #100]	; (8000f40 <main+0x1dc>)
 8000eda:	481a      	ldr	r0, [pc, #104]	; (8000f44 <main+0x1e0>)
 8000edc:	f006 fe9f 	bl	8007c1e <xTaskCreate>
 8000ee0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  	  	  			 1024,
  	  	  			 (void*)&sensorArgs,
  	  	  			 configMAX_PRIORITIES-2,
  	  	  			 &xSensorThreadHandle);

  xRet = xTaskCreate(threads::controllerThread,
 8000ee4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	2305      	movs	r3, #5
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef8:	4913      	ldr	r1, [pc, #76]	; (8000f48 <main+0x1e4>)
 8000efa:	4814      	ldr	r0, [pc, #80]	; (8000f4c <main+0x1e8>)
 8000efc:	f006 fe8f 	bl	8007c1e <xTaskCreate>
 8000f00:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  					 1024,
  					 (void*)&controllerArgs,
  					 configMAX_PRIORITIES-2,
  					 &xControllerThreadHandle);

  xRet = xTaskCreate(threads::actuatorThread,
 8000f04:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2305      	movs	r3, #5
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	4613      	mov	r3, r2
 8000f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f18:	490d      	ldr	r1, [pc, #52]	; (8000f50 <main+0x1ec>)
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <main+0x1f0>)
 8000f1c:	f006 fe7f 	bl	8007c1e <xTaskCreate>
 8000f20:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  	  	  			 (void*)&actuatorArgs,
  					 configMAX_PRIORITIES-2,
  	  	  			 &xActuatorThreadHandle);

  //start the RTOS
  vTaskStartScheduler();
 8000f24:	f007 f87a 	bl	800801c <vTaskStartScheduler>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <main+0x1c4>
 8000f2a:	bf00      	nop
 8000f2c:	20000368 	.word	0x20000368
 8000f30:	20000414 	.word	0x20000414
 8000f34:	200003bc 	.word	0x200003bc
 8000f38:	080096d8 	.word	0x080096d8
 8000f3c:	0800252d 	.word	0x0800252d
 8000f40:	080096ec 	.word	0x080096ec
 8000f44:	08002635 	.word	0x08002635
 8000f48:	080096fc 	.word	0x080096fc
 8000f4c:	08002389 	.word	0x08002389
 8000f50:	08009710 	.word	0x08009710
 8000f54:	08002305 	.word	0x08002305

08000f58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0ac      	sub	sp, #176	; 0xb0
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f62:	2234      	movs	r2, #52	; 0x34
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 fadc 	bl	8009524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	225c      	movs	r2, #92	; 0x5c
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 facd 	bl	8009524 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <_Z18SystemClock_Configv+0x12c>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a3c      	ldr	r2, [pc, #240]	; (8001084 <_Z18SystemClock_Configv+0x12c>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b3a      	ldr	r3, [pc, #232]	; (8001084 <_Z18SystemClock_Configv+0x12c>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b37      	ldr	r3, [pc, #220]	; (8001088 <_Z18SystemClock_Configv+0x130>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fb2:	4a35      	ldr	r2, [pc, #212]	; (8001088 <_Z18SystemClock_Configv+0x130>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <_Z18SystemClock_Configv+0x130>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001004:	4618      	mov	r0, r3
 8001006:	f003 fcfb 	bl	8004a00 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	bf14      	ite	ne
 8001010:	2301      	movne	r3, #1
 8001012:	2300      	moveq	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 800101a:	f000 faa7 	bl	800156c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101e:	230f      	movs	r3, #15
 8001020:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001022:	2302      	movs	r3, #2
 8001024:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001034:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fe3a 	bl	8003cb4 <HAL_RCC_ClockConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8001050:	f000 fa8c 	bl	800156c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001058:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800105a:	2300      	movs	r3, #0
 800105c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4618      	mov	r0, r3
 8001064:	f002 ff72 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <_Z18SystemClock_Configv+0x124>
  {
    Error_Handler();
 8001078:	f000 fa78 	bl	800156c <Error_Handler>
  }
}
 800107c:	bf00      	nop
 800107e:	37b0      	adds	r7, #176	; 0xb0
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000

0800108c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <_ZL12MX_I2C1_Initv+0x60>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 8001098:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <_ZL12MX_I2C1_Initv+0x64>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <_ZL12MX_I2C1_Initv+0x5c>)
 80010ca:	f001 fe33 	bl	8002d34 <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	bf14      	ite	ne
 80010d4:	2301      	movne	r3, #1
 80010d6:	2300      	moveq	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80010de:	f000 fa45 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000368 	.word	0x20000368
 80010ec:	40005400 	.word	0x40005400
 80010f0:	00061a80 	.word	0x00061a80

080010f4 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 80010fa:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <_ZL12MX_SPI2_Initv+0x74>)
 80010fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001104:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001124:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001140:	220a      	movs	r2, #10
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <_ZL12MX_SPI2_Initv+0x70>)
 8001146:	f003 fef9 	bl	8004f3c <HAL_SPI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf14      	ite	ne
 8001150:	2301      	movne	r3, #1
 8001152:	2300      	moveq	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800115a:	f000 fa07 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200003bc 	.word	0x200003bc
 8001168:	40003800 	.word	0x40003800

0800116c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b096      	sub	sp, #88	; 0x58
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2220      	movs	r2, #32
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f008 f9bd 	bl	8009524 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011aa:	4b67      	ldr	r3, [pc, #412]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011ac:	4a67      	ldr	r2, [pc, #412]	; (800134c <_ZL12MX_TIM8_Initv+0x1e0>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 26;
 80011b0:	4b65      	ldr	r3, [pc, #404]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011b2:	221a      	movs	r2, #26
 80011b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b64      	ldr	r3, [pc, #400]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 62418;
 80011bc:	4b62      	ldr	r3, [pc, #392]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011be:	f24f 32d2 	movw	r2, #62418	; 0xf3d2
 80011c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b60      	ldr	r3, [pc, #384]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011ca:	4b5f      	ldr	r3, [pc, #380]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011d6:	485c      	ldr	r0, [pc, #368]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011d8:	f004 fc58 	bl	8005a8c <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf14      	ite	ne
 80011e2:	2301      	movne	r3, #1
 80011e4:	2300      	moveq	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <_ZL12MX_TIM8_Initv+0x84>
  {
    Error_Handler();
 80011ec:	f000 f9be 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fa:	4619      	mov	r1, r3
 80011fc:	4852      	ldr	r0, [pc, #328]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80011fe:	f005 f859 	bl	80062b4 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf14      	ite	ne
 8001208:	2301      	movne	r3, #1
 800120a:	2300      	moveq	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <_ZL12MX_TIM8_Initv+0xaa>
  {
    Error_Handler();
 8001212:	f000 f9ab 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001216:	484c      	ldr	r0, [pc, #304]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001218:	f004 fd60 	bl	8005cdc <HAL_TIM_PWM_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <_ZL12MX_TIM8_Initv+0xc4>
  {
    Error_Handler();
 800122c:	f000 f99e 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001238:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800123c:	4619      	mov	r1, r3
 800123e:	4842      	ldr	r0, [pc, #264]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001240:	f005 fc38 	bl	8006ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf14      	ite	ne
 800124a:	2301      	movne	r3, #1
 800124c:	2300      	moveq	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <_ZL12MX_TIM8_Initv+0xec>
  {
    Error_Handler();
 8001254:	f000 f98a 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001258:	2360      	movs	r3, #96	; 0x60
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800126c:	2300      	movs	r3, #0
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4832      	ldr	r0, [pc, #200]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 800127e:	f004 ff57 	bl	8006130 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <_ZL12MX_TIM8_Initv+0x12a>
  {
    Error_Handler();
 8001292:	f000 f96b 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	482a      	ldr	r0, [pc, #168]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80012a0:	f004 ff46 	bl	8006130 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <_ZL12MX_TIM8_Initv+0x14c>
  {
    Error_Handler();
 80012b4:	f000 f95a 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	2208      	movs	r2, #8
 80012be:	4619      	mov	r1, r3
 80012c0:	4821      	ldr	r0, [pc, #132]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80012c2:	f004 ff35 	bl	8006130 <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <_ZL12MX_TIM8_Initv+0x16e>
  {
    Error_Handler();
 80012d6:	f000 f949 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	220c      	movs	r2, #12
 80012e0:	4619      	mov	r1, r3
 80012e2:	4819      	ldr	r0, [pc, #100]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 80012e4:	f004 ff24 	bl	8006130 <HAL_TIM_PWM_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <_ZL12MX_TIM8_Initv+0x190>
  {
    Error_Handler();
 80012f8:	f000 f938 	bl	800156c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001314:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	480a      	ldr	r0, [pc, #40]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 8001320:	f005 fc44 	bl	8006bac <HAL_TIMEx_ConfigBreakDeadTime>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <_ZL12MX_TIM8_Initv+0x1cc>
  {
    Error_Handler();
 8001334:	f000 f91a 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <_ZL12MX_TIM8_Initv+0x1dc>)
 800133a:	f000 fa47 	bl	80017cc <HAL_TIM_MspPostInit>

}
 800133e:	bf00      	nop
 8001340:	3758      	adds	r7, #88	; 0x58
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000414 	.word	0x20000414
 800134c:	40010400 	.word	0x40010400

08001350 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <_ZL13MX_UART4_Initv+0x58>)
 8001358:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <_ZL13MX_UART4_Initv+0x54>)
 8001388:	f005 fc76 	bl	8006c78 <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	bf14      	ite	ne
 8001392:	2301      	movne	r3, #1
 8001394:	2300      	moveq	r3, #0
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800139c:	f000 f8e6 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200004a4 	.word	0x200004a4
 80013a8:	40004c00 	.word	0x40004c00

080013ac <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013b2:	4a14      	ldr	r2, [pc, #80]	; (8001404 <_ZL19MX_USART2_UART_Initv+0x58>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <_ZL19MX_USART2_UART_Initv+0x54>)
 80013e4:	f005 fc48 	bl	8006c78 <HAL_UART_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80013f8:	f000 f8b8 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200004e8 	.word	0x200004e8
 8001404:	40004400 	.word	0x40004400

08001408 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b3e      	ldr	r3, [pc, #248]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a3d      	ldr	r2, [pc, #244]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b3b      	ldr	r3, [pc, #236]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a36      	ldr	r2, [pc, #216]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a2f      	ldr	r2, [pc, #188]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a28      	ldr	r2, [pc, #160]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <_ZL12MX_GPIO_Initv+0x114>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2120      	movs	r1, #32
 8001492:	4823      	ldr	r0, [pc, #140]	; (8001520 <_ZL12MX_GPIO_Initv+0x118>)
 8001494:	f001 fc1a 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF24_CE_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800149e:	4821      	ldr	r0, [pc, #132]	; (8001524 <_ZL12MX_GPIO_Initv+0x11c>)
 80014a0:	f001 fc14 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	481b      	ldr	r0, [pc, #108]	; (8001528 <_ZL12MX_GPIO_Initv+0x120>)
 80014bc:	f001 fa5a 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4812      	ldr	r0, [pc, #72]	; (8001520 <_ZL12MX_GPIO_Initv+0x118>)
 80014d8:	f001 fa4c 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF24_RX_DR_Pin */
  GPIO_InitStruct.Pin = NRF24_RX_DR_Pin;
 80014dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_RX_DR_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480b      	ldr	r0, [pc, #44]	; (8001520 <_ZL12MX_GPIO_Initv+0x118>)
 80014f2:	f001 fa3f 	bl	8002974 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24_CE_Pin NRF24_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin|NRF24_CSN_Pin;
 80014f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <_ZL12MX_GPIO_Initv+0x11c>)
 8001510:	f001 fa30 	bl	8002974 <HAL_GPIO_Init>

}
 8001514:	bf00      	nop
 8001516:	3728      	adds	r7, #40	; 0x28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800

0800152c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM10){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a09      	ldr	r2, [pc, #36]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d104      	bne.n	8001548 <HAL_TIM_PeriodElapsedCallback+0x1c>
	  counter++;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001546:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001552:	f001 f90d 	bl	8002770 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40014400 	.word	0x40014400
 8001564:	2000052c 	.word	0x2000052c
 8001568:	40001000 	.word	0x40001000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	e7fe      	b.n	8001574 <Error_Handler+0x8>
	...

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_MspInit+0x54>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_MspInit+0x54>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <HAL_MspInit+0x54>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_MspInit+0x54>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_MspInit+0x54>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_MspInit+0x54>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	210f      	movs	r1, #15
 80015ba:	f06f 0001 	mvn.w	r0, #1
 80015be:	f001 f9af 	bl	8002920 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_I2C_MspInit+0x84>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d12b      	bne.n	800164a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_I2C_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_I2C_MspInit+0x88>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160e:	23c0      	movs	r3, #192	; 0xc0
 8001610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001612:	2312      	movs	r3, #18
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001616:	2301      	movs	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161e:	2304      	movs	r3, #4
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_I2C_MspInit+0x8c>)
 800162a:	f001 f9a3 	bl	8002974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_I2C_MspInit+0x88>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a30      	ldr	r2, [pc, #192]	; (8001740 <HAL_SPI_MspInit+0xe0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d15a      	bne.n	8001738 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a2e      	ldr	r2, [pc, #184]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a20      	ldr	r2, [pc, #128]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_SPI_MspInit+0xe4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016d6:	2302      	movs	r3, #2
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80016e6:	2307      	movs	r3, #7
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4815      	ldr	r0, [pc, #84]	; (8001748 <HAL_SPI_MspInit+0xe8>)
 80016f2:	f001 f93f 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f6:	2304      	movs	r3, #4
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <HAL_SPI_MspInit+0xe8>)
 8001712:	f001 f92f 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001728:	2305      	movs	r3, #5
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <HAL_SPI_MspInit+0xec>)
 8001734:	f001 f91e 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40003800 	.word	0x40003800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020800 	.word	0x40020800
 800174c:	40020400 	.word	0x40020400

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_TIM_Base_MspInit+0x70>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_TIM_Base_MspInit+0x74>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <HAL_TIM_Base_MspInit+0x74>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_TIM_Base_MspInit+0x74>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800177e:	e01a      	b.n	80017b6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_Base_MspInit+0x78>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d115      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_TIM_Base_MspInit+0x74>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <HAL_TIM_Base_MspInit+0x74>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_TIM_Base_MspInit+0x74>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2105      	movs	r1, #5
 80017aa:	2019      	movs	r0, #25
 80017ac:	f001 f8b8 	bl	8002920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017b0:	2019      	movs	r0, #25
 80017b2:	f001 f8d1 	bl	8002958 <HAL_NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010400 	.word	0x40010400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40014400 	.word	0x40014400

080017cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <HAL_TIM_MspPostInit+0x68>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d11e      	bne.n	800182c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_TIM_MspPostInit+0x6c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_TIM_MspPostInit+0x6c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_TIM_MspPostInit+0x6c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800180a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800180e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800181c:	2303      	movs	r3, #3
 800181e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	4619      	mov	r1, r3
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_TIM_MspPostInit+0x70>)
 8001828:	f001 f8a4 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40010400 	.word	0x40010400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a41      	ldr	r2, [pc, #260]	; (8001964 <HAL_UART_MspInit+0x124>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d14b      	bne.n	80018fa <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a3f      	ldr	r2, [pc, #252]	; (8001968 <HAL_UART_MspInit+0x128>)
 800186c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a38      	ldr	r2, [pc, #224]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_UART_MspInit+0x128>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <HAL_UART_MspInit+0x128>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_UART_MspInit+0x128>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018c6:	2308      	movs	r3, #8
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	4826      	ldr	r0, [pc, #152]	; (800196c <HAL_UART_MspInit+0x12c>)
 80018d2:	f001 f84f 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018e8:	2308      	movs	r3, #8
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	481f      	ldr	r0, [pc, #124]	; (8001970 <HAL_UART_MspInit+0x130>)
 80018f4:	f001 f83e 	bl	8002974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f8:	e030      	b.n	800195c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_UART_MspInit+0x134>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d12b      	bne.n	800195c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4b17      	ldr	r3, [pc, #92]	; (8001968 <HAL_UART_MspInit+0x128>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_UART_MspInit+0x128>)
 800190e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_UART_MspInit+0x128>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6313      	str	r3, [r2, #48]	; 0x30
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_UART_MspInit+0x128>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800193c:	230c      	movs	r3, #12
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194c:	2307      	movs	r3, #7
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <HAL_UART_MspInit+0x12c>)
 8001958:	f001 f80c 	bl	8002974 <HAL_GPIO_Init>
}
 800195c:	bf00      	nop
 800195e:	3730      	adds	r7, #48	; 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40004c00 	.word	0x40004c00
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020800 	.word	0x40020800
 8001974:	40004400 	.word	0x40004400

08001978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	; 0x38
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_InitTick+0xe4>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <HAL_InitTick+0xe4>)
 8001992:	f043 0310 	orr.w	r3, r3, #16
 8001996:	6413      	str	r3, [r2, #64]	; 0x40
 8001998:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_InitTick+0xe4>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019a4:	f107 0210 	add.w	r2, r7, #16
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fa9a 	bl	8003ee8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019be:	f002 fa6b 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 80019c2:	6378      	str	r0, [r7, #52]	; 0x34
 80019c4:	e004      	b.n	80019d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019c6:	f002 fa67 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 80019ca:	4603      	mov	r3, r0
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_InitTick+0xe8>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	0c9b      	lsrs	r3, r3, #18
 80019da:	3b01      	subs	r3, #1
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_InitTick+0xec>)
 80019e0:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <HAL_InitTick+0xf0>)
 80019e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_InitTick+0xec>)
 80019e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019ec:	4a1d      	ldr	r2, [pc, #116]	; (8001a64 <HAL_InitTick+0xec>)
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <HAL_InitTick+0xec>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_InitTick+0xec>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_InitTick+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a04:	4817      	ldr	r0, [pc, #92]	; (8001a64 <HAL_InitTick+0xec>)
 8001a06:	f004 f841 	bl	8005a8c <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d11b      	bne.n	8001a50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a18:	4812      	ldr	r0, [pc, #72]	; (8001a64 <HAL_InitTick+0xec>)
 8001a1a:	f004 f8ef 	bl	8005bfc <HAL_TIM_Base_Start_IT>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a2c:	2036      	movs	r0, #54	; 0x36
 8001a2e:	f000 ff93 	bl	8002958 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b0f      	cmp	r3, #15
 8001a36:	d808      	bhi.n	8001a4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	2036      	movs	r0, #54	; 0x36
 8001a3e:	f000 ff6f 	bl	8002920 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_InitTick+0xf4>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e002      	b.n	8001a50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3738      	adds	r7, #56	; 0x38
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	431bde83 	.word	0x431bde83
 8001a64:	20000530 	.word	0x20000530
 8001a68:	40001000 	.word	0x40001000
 8001a6c:	20000010 	.word	0x20000010

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x4>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001aa2:	f004 fa3d 	bl	8005f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000045c 	.word	0x2000045c

08001ab0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <TIM6_DAC_IRQHandler+0x10>)
 8001ab6:	f004 fa33 	bl	8005f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000530 	.word	0x20000530

08001ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <SystemInit+0x28>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	4a07      	ldr	r2, [pc, #28]	; (8001aec <SystemInit+0x28>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SystemInit+0x28>)
 8001ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ade:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <_ZN7sensors6BNO055C1ER17I2C_HandleTypeDef>:
#include "bno055.hpp"
#include "../state/state.hpp"

namespace sensors{

BNO055::BNO055(I2C_HandleTypeDef& rhi2c1) : i2c(rhi2c1){}
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <_ZN7sensors6BNO05512configSensorEv>:

bool BNO055::configSensor(void){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	6078      	str	r0, [r7, #4]

	static uint8_t op_mode = IMU_OP_MODE;

	HAL_StatusTypeDef hal_status = HAL_I2C_Mem_Write((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_CONFIG_R, I2C_MEMADD_SIZE_8BIT, &op_mode, I2C_MEMADD_SIZE_8BIT, (uint32_t)1000);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	2301      	movs	r3, #1
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <_ZN7sensors6BNO05512configSensorEv+0x44>)
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	223d      	movs	r2, #61	; 0x3d
 8001b2e:	2150      	movs	r1, #80	; 0x50
 8001b30:	f001 fa44 	bl	8002fbc <HAL_I2C_Mem_Write>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]


	if(hal_status == HAL_BUSY){
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d104      	bne.n	8001b48 <_ZN7sensors6BNO05512configSensorEv+0x38>

		//i2c dead lock, BNO055 is holding the bus
		this->I2C1_ClearBusyFlagErratum();
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fab8 	bl	80020b4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv>
		return false;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <_ZN7sensors6BNO05512configSensorEv+0x3a>
	}

	//add in a delay to allow for the sensor to properly switch operating modes
	//vTaskDelay(100);

	return true;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000000c 	.word	0x2000000c

08001b58 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv>:

bool BNO055::Read_IMU_Calib_Status(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	6078      	str	r0, [r7, #4]
	static uint16_t calib_stat_address = 0x35;
	static uint8_t IMU_full_calib = 0x3C;
	static uint8_t calib;
	static HAL_StatusTypeDef hal_status;

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_CALIB_STAT_R, I2C_MEMADD_SIZE_8BIT, &calib, I2C_MEMADD_SIZE_8BIT, (uint32_t)1000000);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x54>)
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x58>)
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	2235      	movs	r2, #53	; 0x35
 8001b74:	2150      	movs	r1, #80	; 0x50
 8001b76:	f001 fb1b 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x5c>)
 8001b80:	701a      	strb	r2, [r3, #0]
	vTaskDelay(1);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f006 fa16 	bl	8007fb4 <vTaskDelay>

	if(hal_status != HAL_OK){
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x5c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x3c>

		return false;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e006      	b.n	8001ba2 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x4a>

	}
	else{

		//value of 3C means full calibration
		if(calib == IMU_FULL_CALIB){
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b3c      	cmp	r3, #60	; 0x3c
 8001b9a:	d101      	bne.n	8001ba0 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x48>

			return true;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv+0x4a>

		}
		else{

			return false;
 8001ba0:	2300      	movs	r3, #0

		}
	}

}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	000f4240 	.word	0x000f4240
 8001bb0:	20000578 	.word	0x20000578
 8001bb4:	20000579 	.word	0x20000579

08001bb8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv>:
	}

}


bool BNO055::Read_Calib_Params(void){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	6078      	str	r0, [r7, #4]
	static uint8_t axo_lsb, axo_msb, ayo_lsb, ayo_msb, azo_lsb, azo_msb;
	static uint8_t gxo_lsb, gxo_msb, gyo_lsb, gyo_msb, gzo_lsb, gzo_msb;
	static HAL_StatusTypeDef hal_status;


	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_X_LSB_R, I2C_MEMADD_SIZE_8BIT, &axo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	2319      	movs	r3, #25
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x248>)
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2255      	movs	r2, #85	; 0x55
 8001bd4:	2150      	movs	r1, #80	; 0x50
 8001bd6:	f001 faeb 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001be0:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_X_MSB_R, I2C_MEMADD_SIZE_8BIT, &axo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	2319      	movs	r3, #25
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2301      	movs	r3, #1
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	4b86      	ldr	r3, [pc, #536]	; (8001e08 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x250>)
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	2256      	movs	r2, #86	; 0x56
 8001bf6:	2150      	movs	r1, #80	; 0x50
 8001bf8:	f001 fada 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c02:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Y_LSB_R, I2C_MEMADD_SIZE_8BIT, &ayo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	2319      	movs	r3, #25
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x254>)
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	2257      	movs	r2, #87	; 0x57
 8001c18:	2150      	movs	r1, #80	; 0x50
 8001c1a:	f001 fac9 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c24:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Y_MSB_R, I2C_MEMADD_SIZE_8BIT, &ayo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	2319      	movs	r3, #25
 8001c2c:	9302      	str	r3, [sp, #8]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	4b77      	ldr	r3, [pc, #476]	; (8001e10 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x258>)
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2301      	movs	r3, #1
 8001c38:	2258      	movs	r2, #88	; 0x58
 8001c3a:	2150      	movs	r1, #80	; 0x50
 8001c3c:	f001 fab8 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b6f      	ldr	r3, [pc, #444]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c46:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Z_LSB_R, I2C_MEMADD_SIZE_8BIT, &azo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	2319      	movs	r3, #25
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x25c>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	2259      	movs	r2, #89	; 0x59
 8001c5c:	2150      	movs	r1, #80	; 0x50
 8001c5e:	f001 faa7 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c68:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_OFFSET_Z_MSB_R, I2C_MEMADD_SIZE_8BIT, &azo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	2319      	movs	r3, #25
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	2301      	movs	r3, #1
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x260>)
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	2260      	movs	r2, #96	; 0x60
 8001c7e:	2150      	movs	r1, #80	; 0x50
 8001c80:	f001 fa96 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001c8a:	701a      	strb	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_X_LSB_R, I2C_MEMADD_SIZE_8BIT, &gxo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	2319      	movs	r3, #25
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2301      	movs	r3, #1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	4b60      	ldr	r3, [pc, #384]	; (8001e1c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x264>)
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2261      	movs	r2, #97	; 0x61
 8001ca0:	2150      	movs	r1, #80	; 0x50
 8001ca2:	f001 fa85 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b56      	ldr	r3, [pc, #344]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001cac:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_X_MSB_R, I2C_MEMADD_SIZE_8BIT, &gxo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	2319      	movs	r3, #25
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x268>)
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	2262      	movs	r2, #98	; 0x62
 8001cc2:	2150      	movs	r1, #80	; 0x50
 8001cc4:	f001 fa74 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001cce:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Y_LSB_R, I2C_MEMADD_SIZE_8BIT, &gyo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6818      	ldr	r0, [r3, #0]
 8001cd4:	2319      	movs	r3, #25
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x26c>)
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	2263      	movs	r2, #99	; 0x63
 8001ce4:	2150      	movs	r1, #80	; 0x50
 8001ce6:	f001 fa63 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001cf0:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Y_MSB_R, I2C_MEMADD_SIZE_8BIT, &gyo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	2319      	movs	r3, #25
 8001cf8:	9302      	str	r3, [sp, #8]
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x270>)
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2301      	movs	r3, #1
 8001d04:	2264      	movs	r2, #100	; 0x64
 8001d06:	2150      	movs	r1, #80	; 0x50
 8001d08:	f001 fa52 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b3c      	ldr	r3, [pc, #240]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001d12:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Z_LSB_R, I2C_MEMADD_SIZE_8BIT, &gzo_lsb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	2319      	movs	r3, #25
 8001d1a:	9302      	str	r3, [sp, #8]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x274>)
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2301      	movs	r3, #1
 8001d26:	2265      	movs	r2, #101	; 0x65
 8001d28:	2150      	movs	r1, #80	; 0x50
 8001d2a:	f001 fa41 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001d34:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_OFFSET_Z_MSB_R, I2C_MEMADD_SIZE_8BIT, &gzo_msb, I2C_MEMADD_SIZE_8BIT, (uint32_t)25);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	2319      	movs	r3, #25
 8001d3c:	9302      	str	r3, [sp, #8]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x278>)
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	2266      	movs	r2, #102	; 0x66
 8001d4a:	2150      	movs	r1, #80	; 0x50
 8001d4c:	f001 fa30 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001d56:	701a      	strb	r2, [r3, #0]

	uint16_t axo = (axo_msb << 8) | axo_lsb;
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x250>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x248>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	83fb      	strh	r3, [r7, #30]
	uint16_t ayo = (ayo_msb << 8) | ayo_lsb;
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x258>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x254>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	83bb      	strh	r3, [r7, #28]
	uint16_t azo = (azo_msb << 8) | azo_lsb;
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x260>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x25c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b21b      	sxth	r3, r3
 8001d92:	837b      	strh	r3, [r7, #26]

	uint16_t gxo = (gxo_msb << 8) | gxo_lsb;
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x268>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x264>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	833b      	strh	r3, [r7, #24]
	uint16_t gyo = (gyo_msb << 8) | gyo_lsb;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x270>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21a      	sxth	r2, r3
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x26c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	82fb      	strh	r3, [r7, #22]
	uint16_t gzo = (gzo_msb << 8) | gzo_lsb;
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x278>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x274>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b21b      	sxth	r3, r3
 8001dce:	82bb      	strh	r3, [r7, #20]

	uint16_t offsets[6];
	offsets[0] = axo;
 8001dd0:	8bfb      	ldrh	r3, [r7, #30]
 8001dd2:	813b      	strh	r3, [r7, #8]
	offsets[1] = ayo;
 8001dd4:	8bbb      	ldrh	r3, [r7, #28]
 8001dd6:	817b      	strh	r3, [r7, #10]
	offsets[2] = azo;
 8001dd8:	8b7b      	ldrh	r3, [r7, #26]
 8001dda:	81bb      	strh	r3, [r7, #12]
	offsets[3] = gxo;
 8001ddc:	8b3b      	ldrh	r3, [r7, #24]
 8001dde:	81fb      	strh	r3, [r7, #14]
	offsets[4] = gyo;
 8001de0:	8afb      	ldrh	r3, [r7, #22]
 8001de2:	823b      	strh	r3, [r7, #16]
	offsets[5] = gzo;
 8001de4:	8abb      	ldrh	r3, [r7, #20]
 8001de6:	827b      	strh	r3, [r7, #18]


	if(hal_status != HAL_OK){
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x24c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x23c>
		return false;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e000      	b.n	8001df6 <_ZN7sensors6BNO05517Read_Calib_ParamsEv+0x23e>
	}
	else{
		return true;
 8001df4:	2301      	movs	r3, #1
	}

}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000057a 	.word	0x2000057a
 8001e04:	20000586 	.word	0x20000586
 8001e08:	2000057b 	.word	0x2000057b
 8001e0c:	2000057c 	.word	0x2000057c
 8001e10:	2000057d 	.word	0x2000057d
 8001e14:	2000057e 	.word	0x2000057e
 8001e18:	2000057f 	.word	0x2000057f
 8001e1c:	20000580 	.word	0x20000580
 8001e20:	20000581 	.word	0x20000581
 8001e24:	20000582 	.word	0x20000582
 8001e28:	20000583 	.word	0x20000583
 8001e2c:	20000584 	.word	0x20000584
 8001e30:	20000585 	.word	0x20000585

08001e34 <_ZN7sensors6BNO0557readIMUEv>:

state::QuadStateVector& BNO055::readIMU(void){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af04      	add	r7, sp, #16
 8001e3a:	6078      	str	r0, [r7, #4]
	static uint8_t gx_lsb, gx_msb, gy_lsb, gy_msb, gz_lsb, gz_msb;

	static state::QuadStateVector sample_i = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	static HAL_StatusTypeDef hal_status;

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_X_LSB_R, 1, &ax_lsb, 1, 25);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	2319      	movs	r3, #25
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	2301      	movs	r3, #1
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <_ZN7sensors6BNO0557readIMUEv+0x248>)
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2208      	movs	r2, #8
 8001e50:	2150      	movs	r1, #80	; 0x50
 8001e52:	f001 f9ad 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4b89      	ldr	r3, [pc, #548]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001e5c:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_X_MSB_R, 1, &ax_msb, 1, 25);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	2319      	movs	r3, #25
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	2301      	movs	r3, #1
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	4b86      	ldr	r3, [pc, #536]	; (8002084 <_ZN7sensors6BNO0557readIMUEv+0x250>)
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2209      	movs	r2, #9
 8001e72:	2150      	movs	r1, #80	; 0x50
 8001e74:	f001 f99c 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b80      	ldr	r3, [pc, #512]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001e7e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Y_LSB_R, 1, &ay_lsb, 1, 25);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	2319      	movs	r3, #25
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	4b7e      	ldr	r3, [pc, #504]	; (8002088 <_ZN7sensors6BNO0557readIMUEv+0x254>)
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2301      	movs	r3, #1
 8001e92:	220a      	movs	r2, #10
 8001e94:	2150      	movs	r1, #80	; 0x50
 8001e96:	f001 f98b 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b78      	ldr	r3, [pc, #480]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001ea0:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Y_MSB_R, 1, &ay_msb, 1, 25);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	2319      	movs	r3, #25
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	4b77      	ldr	r3, [pc, #476]	; (800208c <_ZN7sensors6BNO0557readIMUEv+0x258>)
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	220b      	movs	r2, #11
 8001eb6:	2150      	movs	r1, #80	; 0x50
 8001eb8:	f001 f97a 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b6f      	ldr	r3, [pc, #444]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001ec2:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Z_LSB_R, 1, &az_lsb, 1, 25);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	2319      	movs	r3, #25
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	2301      	movs	r3, #1
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <_ZN7sensors6BNO0557readIMUEv+0x25c>)
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	2150      	movs	r1, #80	; 0x50
 8001eda:	f001 f969 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b67      	ldr	r3, [pc, #412]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001ee4:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_ACC_DATA_Z_MSB_R, 1, &az_msb, 1, 25);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	2319      	movs	r3, #25
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	4b68      	ldr	r3, [pc, #416]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x260>)
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	220d      	movs	r2, #13
 8001efa:	2150      	movs	r1, #80	; 0x50
 8001efc:	f001 f958 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b5e      	ldr	r3, [pc, #376]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f06:	701a      	strb	r2, [r3, #0]

	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_X_LSB_R, 1, &gx_lsb, 1, 25);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	2319      	movs	r3, #25
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2301      	movs	r3, #1
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	4b60      	ldr	r3, [pc, #384]	; (8002098 <_ZN7sensors6BNO0557readIMUEv+0x264>)
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	2214      	movs	r2, #20
 8001f1c:	2150      	movs	r1, #80	; 0x50
 8001f1e:	f001 f947 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f28:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_X_MSB_R, 1, &gx_msb, 1, 25);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	2319      	movs	r3, #25
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	2301      	movs	r3, #1
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <_ZN7sensors6BNO0557readIMUEv+0x268>)
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	2215      	movs	r2, #21
 8001f3e:	2150      	movs	r1, #80	; 0x50
 8001f40:	f001 f936 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f4a:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Y_LSB_R, 1, &gy_lsb, 1, 25);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	2319      	movs	r3, #25
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <_ZN7sensors6BNO0557readIMUEv+0x26c>)
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	2216      	movs	r2, #22
 8001f60:	2150      	movs	r1, #80	; 0x50
 8001f62:	f001 f925 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b45      	ldr	r3, [pc, #276]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f6c:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Y_MSB_R, 1, &gy_msb, 1, 25);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	2319      	movs	r3, #25
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	2301      	movs	r3, #1
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <_ZN7sensors6BNO0557readIMUEv+0x270>)
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2217      	movs	r2, #23
 8001f82:	2150      	movs	r1, #80	; 0x50
 8001f84:	f001 f914 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001f8e:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Z_LSB_R, 1, &gz_lsb, 1, 25);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	2319      	movs	r3, #25
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <_ZN7sensors6BNO0557readIMUEv+0x274>)
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	2218      	movs	r2, #24
 8001fa4:	2150      	movs	r1, #80	; 0x50
 8001fa6:	f001 f903 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b34      	ldr	r3, [pc, #208]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001fb0:	701a      	strb	r2, [r3, #0]
	hal_status = HAL_I2C_Mem_Read((&(this->i2c)), (BNO055_ADDRESS<<1), BNO055_GYR_DATA_Z_MSB_R, 1, &gz_msb, 1, 25);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	2319      	movs	r3, #25
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <_ZN7sensors6BNO0557readIMUEv+0x278>)
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	2219      	movs	r2, #25
 8001fc6:	2150      	movs	r1, #80	; 0x50
 8001fc8:	f001 f8f2 	bl	80031b0 <HAL_I2C_Mem_Read>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <_ZN7sensors6BNO0557readIMUEv+0x24c>)
 8001fd2:	701a      	strb	r2, [r3, #0]

	sample_i.dx = ((ax_msb << 8) | ax_lsb);
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <_ZN7sensors6BNO0557readIMUEv+0x250>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <_ZN7sensors6BNO0557readIMUEv+0x248>)
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	ee07 3a90 	vmov	s15, r3
 8001fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe8:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8001fea:	edc3 7a07 	vstr	s15, [r3, #28]
	sample_i.dy = ((ay_msb << 8) | ay_lsb);
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <_ZN7sensors6BNO0557readIMUEv+0x258>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <_ZN7sensors6BNO0557readIMUEv+0x254>)
 8001ff6:	7812      	ldrb	r2, [r2, #0]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8002004:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	sample_i.dz = ((az_msb << 8) | az_lsb);
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <_ZN7sensors6BNO0557readIMUEv+0x260>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <_ZN7sensors6BNO0557readIMUEv+0x25c>)
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 800201e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	sample_i.dpsi = ((gx_msb << 8) | gx_lsb);
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <_ZN7sensors6BNO0557readIMUEv+0x268>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <_ZN7sensors6BNO0557readIMUEv+0x264>)
 800202a:	7812      	ldrb	r2, [r2, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8002038:	edc3 7a05 	vstr	s15, [r3, #20]
	sample_i.dtheta = ((gy_msb << 8) | gy_lsb);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <_ZN7sensors6BNO0557readIMUEv+0x270>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <_ZN7sensors6BNO0557readIMUEv+0x26c>)
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 8002052:	edc3 7a03 	vstr	s15, [r3, #12]
	sample_i.dphi = ((gz_msb << 8) | gz_lsb);
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <_ZN7sensors6BNO0557readIMUEv+0x278>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_ZN7sensors6BNO0557readIMUEv+0x274>)
 800205e:	7812      	ldrb	r2, [r2, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <_ZN7sensors6BNO0557readIMUEv+0x27c>)
 800206c:	edc3 7a01 	vstr	s15, [r3, #4]

	return sample_i;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <_ZN7sensors6BNO0557readIMUEv+0x27c>)

}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000587 	.word	0x20000587
 8002080:	200005c4 	.word	0x200005c4
 8002084:	20000588 	.word	0x20000588
 8002088:	20000589 	.word	0x20000589
 800208c:	2000058a 	.word	0x2000058a
 8002090:	2000058b 	.word	0x2000058b
 8002094:	2000058c 	.word	0x2000058c
 8002098:	2000058d 	.word	0x2000058d
 800209c:	2000058e 	.word	0x2000058e
 80020a0:	2000058f 	.word	0x2000058f
 80020a4:	20000590 	.word	0x20000590
 80020a8:	20000591 	.word	0x20000591
 80020ac:	20000592 	.word	0x20000592
 80020b0:	20000594 	.word	0x20000594

080020b4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv>:
//}


//FROM https://electronics.stackexchange.com/questions/351972/hal-i2c-hangs-cannot-be-solved-with-standard-routine-use-to-unlock-i2c/351977
void BNO055::I2C1_ClearBusyFlagErratum(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;
    int timeout =100;
 80020bc:	2364      	movs	r3, #100	; 0x64
 80020be:	623b      	str	r3, [r7, #32]
    int timeout_cnt=0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

    // 1. Clear PE bit.
    ((&(this->i2c)))->Instance->CR1 &= ~(0x0001);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    GPIO_InitStruct.Mode         = GPIO_MODE_OUTPUT_OD;
 80020d8:	2311      	movs	r3, #17
 80020da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate    = GPIO_AF4_I2C1;
 80020dc:	2304      	movs	r3, #4
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull         = GPIO_PULLUP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed        = GPIO_SPEED_FREQ_HIGH;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin          = I2C1_SCL_PIN;
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	4883      	ldr	r0, [pc, #524]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80020f4:	f000 fc3e 	bl	8002974 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2140      	movs	r1, #64	; 0x40
 80020fc:	4880      	ldr	r0, [pc, #512]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80020fe:	f000 fde5 	bl	8002ccc <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin          = I2C1_SDA_PIN;
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8002106:	f107 030c 	add.w	r3, r7, #12
 800210a:	4619      	mov	r1, r3
 800210c:	487c      	ldr	r0, [pc, #496]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800210e:	f000 fc31 	bl	8002974 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	487a      	ldr	r0, [pc, #488]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002118:	f000 fdd8 	bl	8002ccc <HAL_GPIO_WritePin>


    // 3. Check SCL and SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 800211c:	2140      	movs	r1, #64	; 0x40
 800211e:	4878      	ldr	r0, [pc, #480]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002120:	f000 fdbc 	bl	8002c9c <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b01      	cmp	r3, #1
 8002128:	bf14      	ite	ne
 800212a:	2301      	movne	r3, #1
 800212c:	2300      	moveq	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x92>
    {
        timeout_cnt++;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3301      	adds	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	429a      	cmp	r2, r3
 8002140:	f300 80cf 	bgt.w	80022e2 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x22e>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 8002144:	e7ea      	b.n	800211c <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x68>
            return;
    }

    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	486d      	ldr	r0, [pc, #436]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800214a:	f000 fda7 	bl	8002c9c <HAL_GPIO_ReadPin>
 800214e:	4603      	mov	r3, r0
 8002150:	2b01      	cmp	r3, #1
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d013      	beq.n	8002186 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0xd2>
    {
        //Move clock to release I2C
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	4867      	ldr	r0, [pc, #412]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002164:	f000 fdb2 	bl	8002ccc <HAL_GPIO_WritePin>
        asm("nop");
 8002168:	bf00      	nop
        HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	2140      	movs	r1, #64	; 0x40
 800216e:	4864      	ldr	r0, [pc, #400]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002170:	f000 fdac 	bl	8002ccc <HAL_GPIO_WritePin>

        timeout_cnt++;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	3301      	adds	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 800217a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	429a      	cmp	r2, r3
 8002180:	f300 80b1 	bgt.w	80022e6 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x232>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8002184:	e7df      	b.n	8002146 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x92>
            return;
    }

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	485d      	ldr	r0, [pc, #372]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800218c:	f000 fd9e 	bl	8002ccc <HAL_GPIO_WritePin>

    //  5. Check SDA Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	485b      	ldr	r0, [pc, #364]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002194:	f000 fd82 	bl	8002c9c <HAL_GPIO_ReadPin>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf14      	ite	ne
 800219e:	2301      	movne	r3, #1
 80021a0:	2300      	moveq	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x106>
    {
        timeout_cnt++;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	3301      	adds	r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 80021ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	f300 8099 	bgt.w	80022ea <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x236>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 80021b8:	e7ea      	b.n	8002190 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0xdc>
            return;
    }

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	4850      	ldr	r0, [pc, #320]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021c0:	f000 fd84 	bl	8002ccc <HAL_GPIO_WritePin>

    //  7. Check SCL Low level in GPIOx_IDR.
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80021c4:	2140      	movs	r1, #64	; 0x40
 80021c6:	484e      	ldr	r0, [pc, #312]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021c8:	f000 fd68 	bl	8002c9c <HAL_GPIO_ReadPin>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x13a>
    {
        timeout_cnt++;
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3301      	adds	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	f300 8081 	bgt.w	80022ee <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x23a>
    while (GPIO_PIN_RESET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80021ec:	e7ea      	b.n	80021c4 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x110>
            return;
    }

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 80021ee:	2201      	movs	r2, #1
 80021f0:	2140      	movs	r1, #64	; 0x40
 80021f2:	4843      	ldr	r0, [pc, #268]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021f4:	f000 fd6a 	bl	8002ccc <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 80021f8:	2140      	movs	r1, #64	; 0x40
 80021fa:	4841      	ldr	r0, [pc, #260]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 80021fc:	f000 fd4e 	bl	8002c9c <HAL_GPIO_ReadPin>
 8002200:	4603      	mov	r3, r0
 8002202:	2b01      	cmp	r3, #1
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x16c>
    {
        timeout_cnt++;
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	3301      	adds	r3, #1
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8002216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	429a      	cmp	r2, r3
 800221c:	dc69      	bgt.n	80022f2 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x23e>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SCL_PORT, I2C1_SCL_PIN))
 800221e:	e7eb      	b.n	80021f8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x144>
            return;
    }

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 8002220:	2201      	movs	r2, #1
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	4836      	ldr	r0, [pc, #216]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002226:	f000 fd51 	bl	8002ccc <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	4834      	ldr	r0, [pc, #208]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800222e:	f000 fd35 	bl	8002c9c <HAL_GPIO_ReadPin>
 8002232:	4603      	mov	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x19e>
    {
        timeout_cnt++;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
        if(timeout_cnt>timeout)
 8002248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	429a      	cmp	r2, r3
 800224e:	dc52      	bgt.n	80022f6 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x242>
    while (GPIO_PIN_SET != HAL_GPIO_ReadPin(I2C1_SDA_PORT, I2C1_SDA_PIN))
 8002250:	e7eb      	b.n	800222a <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x176>
            return;
    }

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002252:	2312      	movs	r3, #18
 8002254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225e:	2304      	movs	r3, #4
 8002260:	61fb      	str	r3, [r7, #28]

    GPIO_InitStruct.Pin = I2C1_SCL_PIN;
 8002262:	2340      	movs	r3, #64	; 0x40
 8002264:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SCL_PORT, &GPIO_InitStruct);
 8002266:	f107 030c 	add.w	r3, r7, #12
 800226a:	4619      	mov	r1, r3
 800226c:	4824      	ldr	r0, [pc, #144]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800226e:	f000 fb81 	bl	8002974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_PIN;
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(I2C1_SDA_PORT, &GPIO_InitStruct);
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	4619      	mov	r1, r3
 800227c:	4820      	ldr	r0, [pc, #128]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 800227e:	f000 fb79 	bl	8002974 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(I2C1_SCL_PORT, I2C1_SCL_PIN, GPIO_PIN_SET);
 8002282:	2201      	movs	r2, #1
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	481e      	ldr	r0, [pc, #120]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002288:	f000 fd20 	bl	8002ccc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SDA_PORT, I2C1_SDA_PIN, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	481b      	ldr	r0, [pc, #108]	; (8002300 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x24c>)
 8002292:	f000 fd1b 	bl	8002ccc <HAL_GPIO_WritePin>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    ((&(this->i2c)))->Instance->CR1 |= 0x8000;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022a8:	601a      	str	r2, [r3, #0]

    asm("nop");
 80022aa:	bf00      	nop

    // 14. Clear SWRST bit in I2Cx_CR1 register.
    ((&(this->i2c)))->Instance->CR1 &= ~0x8000;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]

    asm("nop");
 80022c0:	bf00      	nop

    // 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register
    ((&(this->i2c)))->Instance->CR1 |= 0x0001;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

    // Call initialization function.
    HAL_I2C_Init(((&(this->i2c))));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fd2a 	bl	8002d34 <HAL_I2C_Init>
 80022e0:	e00a      	b.n	80022f8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022e2:	bf00      	nop
 80022e4:	e008      	b.n	80022f8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022e6:	bf00      	nop
 80022e8:	e006      	b.n	80022f8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022ea:	bf00      	nop
 80022ec:	e004      	b.n	80022f8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022ee:	bf00      	nop
 80022f0:	e002      	b.n	80022f8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022f2:	bf00      	nop
 80022f4:	e000      	b.n	80022f8 <_ZN7sensors6BNO05525I2C1_ClearBusyFlagErratumEv+0x244>
            return;
 80022f6:	bf00      	nop
}
 80022f8:	3728      	adds	r7, #40	; 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40020400 	.word	0x40020400

08002304 <_ZN7threads14actuatorThreadEPv>:
#include "actuatorthread.hpp"

namespace threads{


void actuatorThread(void* pvParameters){
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b08d      	sub	sp, #52	; 0x34
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]


	state::QuadControlActions* globalOutputRef = ((actuatorThreadArgs*)pvParameters)->output;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
	actuators::BLHelis* motorsRef = ((actuatorThreadArgs*)pvParameters)->motors;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
	state::QuadControlActions localOutput;
	SemaphoreHandle_t xSharedOutputMutex = *(((actuatorThreadArgs*)pvParameters)->pxSharedOutputMutex);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
	SemaphoreHandle_t xInitializerMutex = *((actuatorThreadArgs*)pvParameters)->pxInitializerMutex;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	623b      	str	r3, [r7, #32]

	const TickType_t xFrequency = 1000; //scheduler is running at 1Khz, this thread will be able to run at that freq too
 8002328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232c:	61fb      	str	r3, [r7, #28]
	TickType_t xLastWakeTime;

	xSemaphoreTake(xInitializerMutex, (TickType_t)1000); //needs to get this mutex to continue exec
 800232e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002332:	6a38      	ldr	r0, [r7, #32]
 8002334:	f005 fa08 	bl	8007748 <xQueueSemaphoreTake>
													  //cannot grab this until initialization is done
	xSemaphoreGive(xInitializerMutex); //proceed into inf loop now that initialization is done
 8002338:	2300      	movs	r3, #0
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	6a38      	ldr	r0, [r7, #32]
 8002340:	f005 f904 	bl	800754c <xQueueGenericSend>

	while(1){

		xLastWakeTime = xTaskGetTickCount();
 8002344:	f005 ff7e 	bl	8008244 <xTaskGetTickCount>
 8002348:	4603      	mov	r3, r0
 800234a:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002354:	4618      	mov	r0, r3
 8002356:	f005 fdaf 	bl	8007eb8 <vTaskDelayUntil>

		//get measurement
		xSemaphoreTake(xSharedOutputMutex, (TickType_t)0);
 800235a:	2100      	movs	r1, #0
 800235c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800235e:	f005 f9f3 	bl	8007748 <xQueueSemaphoreTake>
		localOutput = *globalOutputRef; //copy the output into local var then release
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	f107 040c 	add.w	r4, r7, #12
 8002368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800236a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedOutputMutex);
 800236e:	2300      	movs	r3, #0
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002376:	f005 f8e9 	bl	800754c <xQueueGenericSend>

		motorsRef->actuateMotors(localOutput);
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	4619      	mov	r1, r3
 8002380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002382:	f7fe f9a5 	bl	80006d0 <_ZN9actuators7BLHelis13actuateMotorsERN5state18QuadControlActionsE>
		xLastWakeTime = xTaskGetTickCount();
 8002386:	e7dd      	b.n	8002344 <_ZN7threads14actuatorThreadEPv+0x40>

08002388 <_ZN7threads16controllerThreadEPv>:

#include "controllerthread.hpp"

namespace threads{

void controllerThread(void* pvParameters){
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b0aa      	sub	sp, #168	; 0xa8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]


	control::PI thrustController = control::PI(0, 0.1, 10, 2);
 8002390:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002394:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8002398:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800239c:	eddf 0a61 	vldr	s1, [pc, #388]	; 8002524 <_ZN7threads16controllerThreadEPv+0x19c>
 80023a0:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002528 <_ZN7threads16controllerThreadEPv+0x1a0>
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fc3c 	bl	8000c22 <_ZN7control2PIC1Effff>
	control::PI yawController = control::PI(0, 0.1, 10, 2);
 80023aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023ae:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80023b2:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80023b6:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8002524 <_ZN7threads16controllerThreadEPv+0x19c>
 80023ba:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8002528 <_ZN7threads16controllerThreadEPv+0x1a0>
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fc2f 	bl	8000c22 <_ZN7control2PIC1Effff>
	control::PI rollController = control::PI(0, 0.1, 10, 2);
 80023c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023c8:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80023cc:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80023d0:	eddf 0a54 	vldr	s1, [pc, #336]	; 8002524 <_ZN7threads16controllerThreadEPv+0x19c>
 80023d4:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8002528 <_ZN7threads16controllerThreadEPv+0x1a0>
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fc22 	bl	8000c22 <_ZN7control2PIC1Effff>
	control::PI pitchController = control::PI(0, 0.1, 10, 2);
 80023de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023e2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 80023e6:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80023ea:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8002524 <_ZN7threads16controllerThreadEPv+0x19c>
 80023ee:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8002528 <_ZN7threads16controllerThreadEPv+0x1a0>
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fc15 	bl	8000c22 <_ZN7control2PIC1Effff>
	state::QuadStateVector localState;
	state::QuadControlActions localOutput;
	state::QuadStateVector* globalStateRef = ((controllerThreadArgs*)pvParameters)->state;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	state::QuadControlActions* globalOutputRef = ((controllerThreadArgs*)pvParameters)->output;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	SemaphoreHandle_t xSharedStateMutex = *(((controllerThreadArgs*)pvParameters)->pxSharedStateMutex);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	SemaphoreHandle_t xSharedOutputMutex = *(((controllerThreadArgs*)pvParameters)->pxSharedOutputMutex);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	SemaphoreHandle_t xInitializerMutex = *(((controllerThreadArgs*)pvParameters)->pxInitializerMutex);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const TickType_t xFrequency = 1000;
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	TickType_t xLastWakeTime;


	xSemaphoreTake(xInitializerMutex, (TickType_t)1000); //needs to get this mutex to continue exec
 800242e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002432:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002436:	f005 f987 	bl	8007748 <xQueueSemaphoreTake>
														  //cannot grab this until initialization is done
	xSemaphoreGive(xInitializerMutex); //proceed into inf loop now that initialization is done
 800243a:	2300      	movs	r3, #0
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002444:	f005 f882 	bl	800754c <xQueueGenericSend>

	while(1){
		xLastWakeTime = xTaskGetTickCount();
 8002448:	f005 fefc 	bl	8008244 <xTaskGetTickCount>
 800244c:	4603      	mov	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks than instantly returns
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002458:	4618      	mov	r0, r3
 800245a:	f005 fd2d 	bl	8007eb8 <vTaskDelayUntil>

		xSemaphoreTake(xSharedStateMutex, (TickType_t) 0); //nonblocking
 800245e:	2100      	movs	r1, #0
 8002460:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002464:	f005 f970 	bl	8007748 <xQueueSemaphoreTake>
		localState = *globalStateRef;
 8002468:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800246c:	f107 0420 	add.w	r4, r7, #32
 8002470:	461d      	mov	r5, r3
 8002472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800247e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedStateMutex);
 8002482:	2300      	movs	r3, #0
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800248c:	f005 f85e 	bl	800754c <xQueueGenericSend>


		localOutput.u1 = thrustController.calcOutput(localState.z);
 8002490:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002494:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002498:	eeb0 0a67 	vmov.f32	s0, s15
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fbdf 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 80024a2:	eef0 7a40 	vmov.f32	s15, s0
 80024a6:	edc7 7a04 	vstr	s15, [r7, #16]
		localOutput.u2 = rollController.calcOutput(localState.psi);
 80024aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe fbd2 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 80024bc:	eef0 7a40 	vmov.f32	s15, s0
 80024c0:	edc7 7a05 	vstr	s15, [r7, #20]
		localOutput.u3 = pitchController.calcOutput(localState.theta);
 80024c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024cc:	eeb0 0a67 	vmov.f32	s0, s15
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fbc5 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 80024d6:	eef0 7a40 	vmov.f32	s15, s0
 80024da:	edc7 7a06 	vstr	s15, [r7, #24]
		localOutput.u4 = yawController.calcOutput(localState.phi);
 80024de:	edd7 7a08 	vldr	s15, [r7, #32]
 80024e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80024e6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fbb8 	bl	8000c60 <_ZN7control2PI10calcOutputEf>
 80024f0:	eef0 7a40 	vmov.f32	s15, s0
 80024f4:	edc7 7a07 	vstr	s15, [r7, #28]

		xSemaphoreTake(xSharedOutputMutex, (TickType_t) 0);
 80024f8:	2100      	movs	r1, #0
 80024fa:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80024fe:	f005 f923 	bl	8007748 <xQueueSemaphoreTake>
		*globalOutputRef = localOutput;
 8002502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002506:	461c      	mov	r4, r3
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedOutputMutex);
 8002512:	2300      	movs	r3, #0
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800251c:	f005 f816 	bl	800754c <xQueueGenericSend>
		xLastWakeTime = xTaskGetTickCount();
 8002520:	e792      	b.n	8002448 <_ZN7threads16controllerThreadEPv+0xc0>
 8002522:	bf00      	nop
 8002524:	3dcccccd 	.word	0x3dcccccd
 8002528:	00000000 	.word	0x00000000

0800252c <_ZN7threads17initializerThreadEPv>:
#include "initializerthread.hpp"

namespace threads{


void initializerThread(void* pvParameters){
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

	//disable preemption until this thread completes
	vTaskSuspendAll();
 8002534:	f005 fddc 	bl	80080f0 <vTaskSuspendAll>

	//system state variable
	enum System_State sys_state = INIT;
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//calibration flags
	bool imu_config_flag, imu_calib_flag = false;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	sensors::BNO055* localImuRef = ((initializerThreadArgs*)pvParameters)->pxIMU;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	623b      	str	r3, [r7, #32]
	actuators::BLHelis* localMotorsRef = ((initializerThreadArgs*)pvParameters)->pxMotors;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61fb      	str	r3, [r7, #28]
	communications::NRF24* localCommsRef = ((initializerThreadArgs*)pvParameters)->pxComms;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	61bb      	str	r3, [r7, #24]
	SemaphoreHandle_t xInitializerMutex = *((initializerThreadArgs*)pvParameters)->pxInitializerMutex;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60bb      	str	r3, [r7, #8]
	TaskHandle_t* localHandle = ((initializerThreadArgs*)pvParameters)->pxInitializerThreadHandle;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	617b      	str	r3, [r7, #20]

	auto retvar = xSemaphoreTake(xInitializerMutex, (TickType_t)0);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f005 f8ed 	bl	8007748 <xQueueSemaphoreTake>
 800256e:	6138      	str	r0, [r7, #16]

	//initializer thread is a state machine
	while(1){

		switch(sys_state){
 8002570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002574:	2b07      	cmp	r3, #7
 8002576:	d8fb      	bhi.n	8002570 <_ZN7threads17initializerThreadEPv+0x44>
 8002578:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <_ZN7threads17initializerThreadEPv+0x54>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	080025a1 	.word	0x080025a1
 8002584:	080025b9 	.word	0x080025b9
 8002588:	080025df 	.word	0x080025df
 800258c:	08002607 	.word	0x08002607
 8002590:	0800260f 	.word	0x0800260f
 8002594:	08002617 	.word	0x08002617
 8002598:	0800261f 	.word	0x0800261f
 800259c:	08002571 	.word	0x08002571

			  	  case INIT:
			  	  	  {
			  	  		  imu_config_flag = localImuRef->configSensor();
 80025a0:	6a38      	ldr	r0, [r7, #32]
 80025a2:	f7ff fab5 	bl	8001b10 <_ZN7sensors6BNO05512configSensorEv>
 80025a6:	4603      	mov	r3, r0
 80025a8:	73bb      	strb	r3, [r7, #14]

			  	  		  if(imu_config_flag){
 80025aa:	7bbb      	ldrb	r3, [r7, #14]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03a      	beq.n	8002626 <_ZN7threads17initializerThreadEPv+0xfa>
			  	  			  sys_state = IMU_CALIB_INIT;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  		  }
			  	  	  }
			  		  break;
 80025b6:	e036      	b.n	8002626 <_ZN7threads17initializerThreadEPv+0xfa>

			  	  case IMU_CALIB_INIT:
			  	  	  {
					  	  //CODE FOR CALIBRATING THE SENSOR
			  		  	  imu_calib_flag = localImuRef->Read_IMU_Calib_Status();
 80025b8:	6a38      	ldr	r0, [r7, #32]
 80025ba:	f7ff facd 	bl	8001b58 <_ZN7sensors6BNO05521Read_IMU_Calib_StatusEv>
 80025be:	4603      	mov	r3, r0
 80025c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  		  	  bool test = localImuRef->Read_Calib_Params();
 80025c4:	6a38      	ldr	r0, [r7, #32]
 80025c6:	f7ff faf7 	bl	8001bb8 <_ZN7sensors6BNO05517Read_Calib_ParamsEv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	73fb      	strb	r3, [r7, #15]

			  		  	  if(imu_calib_flag){
 80025ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d029      	beq.n	800262a <_ZN7threads17initializerThreadEPv+0xfe>
			  			  	  sys_state = IMU_CALIB_DONE;
 80025d6:	2302      	movs	r3, #2
 80025d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  		  	  }
			  	  	  }
			  		  break;
 80025dc:	e025      	b.n	800262a <_ZN7threads17initializerThreadEPv+0xfe>


			  	  case IMU_CALIB_DONE:
			  	  	  {
			  		  	  //blink an LED, transistion to RTOS
					  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80025de:	2120      	movs	r1, #32
 80025e0:	4813      	ldr	r0, [pc, #76]	; (8002630 <_ZN7threads17initializerThreadEPv+0x104>)
 80025e2:	f000 fb8c 	bl	8002cfe <HAL_GPIO_TogglePin>
					  	  vTaskDelay(1000);
 80025e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ea:	f005 fce3 	bl	8007fb4 <vTaskDelay>
					  	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80025ee:	2120      	movs	r1, #32
 80025f0:	480f      	ldr	r0, [pc, #60]	; (8002630 <_ZN7threads17initializerThreadEPv+0x104>)
 80025f2:	f000 fb84 	bl	8002cfe <HAL_GPIO_TogglePin>
					  	  vTaskDelay(1000);
 80025f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025fa:	f005 fcdb 	bl	8007fb4 <vTaskDelay>
					  	  sys_state = MOTOR_INIT;
 80025fe:	2303      	movs	r3, #3
 8002600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  		  break;
 8002604:	e012      	b.n	800262c <_ZN7threads17initializerThreadEPv+0x100>

			  	  case MOTOR_INIT:
			  	  	  {
			  	  		  sys_state = MOTOR_INIT_DONE;
 8002606:	2304      	movs	r3, #4
 8002608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  		  break;
 800260c:	e00e      	b.n	800262c <_ZN7threads17initializerThreadEPv+0x100>

			  	  case MOTOR_INIT_DONE:
			  	  	  {
			  		  	  sys_state = COMMS_INIT;
 800260e:	2305      	movs	r3, #5
 8002610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  	  	  break;
 8002614:	e00a      	b.n	800262c <_ZN7threads17initializerThreadEPv+0x100>

			  	  case COMMS_INIT:
			  	  	  {
			  	  		  sys_state = COMMS_INIT_DONE;
 8002616:	2306      	movs	r3, #6
 8002618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  	  	  break;
 800261c:	e006      	b.n	800262c <_ZN7threads17initializerThreadEPv+0x100>


			  	  case COMMS_INIT_DONE:
			  	  	  {
			  	  		  sys_state = RTOS;
 800261e:	2307      	movs	r3, #7
 8002620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  	  	  }
			  	  	  break;
 8002624:	e002      	b.n	800262c <_ZN7threads17initializerThreadEPv+0x100>
			  		  break;
 8002626:	bf00      	nop
 8002628:	e7a2      	b.n	8002570 <_ZN7threads17initializerThreadEPv+0x44>
			  		  break;
 800262a:	bf00      	nop
			  	  	  }
			  	  	  break;


		}
	}
 800262c:	e7a0      	b.n	8002570 <_ZN7threads17initializerThreadEPv+0x44>
 800262e:	bf00      	nop
 8002630:	40020000 	.word	0x40020000

08002634 <_ZN7threads12sensorThreadEPv>:
#include "FreeRTOS.h"

namespace threads{


void sensorThread(void* pvParameters){
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b096      	sub	sp, #88	; 0x58
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

	state::QuadStateVector localState;
	state::QuadStateVector* globalStateRef = ((sensorThreadArgs*)pvParameters)->state;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	657b      	str	r3, [r7, #84]	; 0x54
	sensors::BNO055* imuRef = ((sensorThreadArgs*)pvParameters)->imu;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	653b      	str	r3, [r7, #80]	; 0x50
	SemaphoreHandle_t xSharedStateMutex = *(((sensorThreadArgs*)pvParameters)->pxSharedStateMutex);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
	SemaphoreHandle_t xInitializerMutex = *(((sensorThreadArgs*)pvParameters)->pxInitializerMutex);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48

	const TickType_t xFrequency = 1000; //scheduler is running at 1Khz, this thread will be able to run at that freq too
 8002658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
	TickType_t xLastWakeTime;

	auto retvar = xSemaphoreTake(xInitializerMutex, (TickType_t)1000); //needs to get this mutex to continue exec
 800265e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002662:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002664:	f005 f870 	bl	8007748 <xQueueSemaphoreTake>
 8002668:	6438      	str	r0, [r7, #64]	; 0x40
															  //cannot grab this until initialization is done
	xSemaphoreGive(xInitializerMutex); //proceed into inf loop now that initialization is done
 800266a:	2300      	movs	r3, #0
 800266c:	2200      	movs	r2, #0
 800266e:	2100      	movs	r1, #0
 8002670:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002672:	f004 ff6b 	bl	800754c <xQueueGenericSend>


	while(1){

		xLastWakeTime = xTaskGetTickCount();
 8002676:	f005 fde5 	bl	8008244 <xTaskGetTickCount>
 800267a:	4603      	mov	r3, r0
 800267c:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xFrequency); //blocks
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002686:	4618      	mov	r0, r3
 8002688:	f005 fc16 	bl	8007eb8 <vTaskDelayUntil>


		localState = imuRef->readIMU();
 800268c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800268e:	f7ff fbd1 	bl	8001e34 <_ZN7sensors6BNO0557readIMUEv>
 8002692:	4603      	mov	r3, r0
 8002694:	f107 0410 	add.w	r4, r7, #16
 8002698:	461d      	mov	r5, r3
 800269a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800269c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800269e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		xSemaphoreTake(xSharedStateMutex, (TickType_t) 0);
 80026aa:	2100      	movs	r1, #0
 80026ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026ae:	f005 f84b 	bl	8007748 <xQueueSemaphoreTake>
		*globalStateRef = localState;
 80026b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b4:	461d      	mov	r5, r3
 80026b6:	f107 0410 	add.w	r4, r7, #16
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		xSemaphoreGive(xSharedStateMutex);
 80026ca:	2300      	movs	r3, #0
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80026d2:	f004 ff3b 	bl	800754c <xQueueGenericSend>
		xLastWakeTime = xTaskGetTickCount();
 80026d6:	e7ce      	b.n	8002676 <_ZN7threads12sensorThreadEPv+0x42>

080026d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026de:	e003      	b.n	80026e8 <LoopCopyDataInit>

080026e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026e6:	3104      	adds	r1, #4

080026e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026f0:	d3f6      	bcc.n	80026e0 <CopyDataInit>
  ldr  r2, =_sbss
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026f4:	e002      	b.n	80026fc <LoopFillZerobss>

080026f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026f8:	f842 3b04 	str.w	r3, [r2], #4

080026fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002700:	d3f9      	bcc.n	80026f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002702:	f7ff f9df 	bl	8001ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002706:	f006 fed9 	bl	80094bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270a:	f7fe fb2b 	bl	8000d64 <main>
  bx  lr    
 800270e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002710:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002714:	080097b0 	.word	0x080097b0
  ldr  r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800271c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002720:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8002724:	20004328 	.word	0x20004328

08002728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC_IRQHandler>
	...

0800272c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <HAL_Init+0x40>)
 8002736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_Init+0x40>)
 8002742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_Init+0x40>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002754:	2003      	movs	r0, #3
 8002756:	f000 f8d8 	bl	800290a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275a:	200f      	movs	r0, #15
 800275c:	f7ff f90c 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002760:	f7fe ff0a 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000014 	.word	0x20000014
 8002794:	200005c8 	.word	0x200005c8

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	200005c8 	.word	0x200005c8

080027b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027cc:	4013      	ands	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <__NVIC_SetPriorityGrouping+0x44>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000ed00 	.word	0xe000ed00

080027f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <__NVIC_GetPriorityGrouping+0x18>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0a1b      	lsrs	r3, r3, #8
 8002802:	f003 0307 	and.w	r3, r3, #7
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0b      	blt.n	800283e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	; (800284c <__NVIC_EnableIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	; (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff4c 	bl	80027b0 <__NVIC_SetPriorityGrouping>
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002932:	f7ff ff61 	bl	80027f8 <__NVIC_GetPriorityGrouping>
 8002936:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	6978      	ldr	r0, [r7, #20]
 800293e:	f7ff ffb1 	bl	80028a4 <NVIC_EncodePriority>
 8002942:	4602      	mov	r2, r0
 8002944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ff80 	bl	8002850 <__NVIC_SetPriority>
}
 8002950:	bf00      	nop
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ff54 	bl	8002814 <__NVIC_EnableIRQ>
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e165      	b.n	8002c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f040 8154 	bne.w	8002c56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d005      	beq.n	80029c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d130      	bne.n	8002a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029fc:	2201      	movs	r2, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 0201 	and.w	r2, r3, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d017      	beq.n	8002a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d123      	bne.n	8002ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3208      	adds	r2, #8
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80ae 	beq.w	8002c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_GPIO_Init+0x300>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4a5c      	ldr	r2, [pc, #368]	; (8002c74 <HAL_GPIO_Init+0x300>)
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b08:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0a:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_GPIO_Init+0x300>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b16:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_GPIO_Init+0x304>)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4f      	ldr	r2, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x308>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d025      	beq.n	8002b8e <HAL_GPIO_Init+0x21a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4e      	ldr	r2, [pc, #312]	; (8002c80 <HAL_GPIO_Init+0x30c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01f      	beq.n	8002b8a <HAL_GPIO_Init+0x216>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <HAL_GPIO_Init+0x310>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d019      	beq.n	8002b86 <HAL_GPIO_Init+0x212>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4c      	ldr	r2, [pc, #304]	; (8002c88 <HAL_GPIO_Init+0x314>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_GPIO_Init+0x20e>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4b      	ldr	r2, [pc, #300]	; (8002c8c <HAL_GPIO_Init+0x318>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00d      	beq.n	8002b7e <HAL_GPIO_Init+0x20a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4a      	ldr	r2, [pc, #296]	; (8002c90 <HAL_GPIO_Init+0x31c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_GPIO_Init+0x206>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <HAL_GPIO_Init+0x320>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_GPIO_Init+0x202>
 8002b72:	2306      	movs	r3, #6
 8002b74:	e00c      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b76:	2307      	movs	r3, #7
 8002b78:	e00a      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	e008      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e006      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b82:	2303      	movs	r3, #3
 8002b84:	e004      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e002      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_GPIO_Init+0x21c>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f002 0203 	and.w	r2, r2, #3
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	4093      	lsls	r3, r2
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba0:	4935      	ldr	r1, [pc, #212]	; (8002c78 <HAL_GPIO_Init+0x304>)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bae:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bd2:	4a31      	ldr	r2, [pc, #196]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c02:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c26:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c2c:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c50:	4a11      	ldr	r2, [pc, #68]	; (8002c98 <HAL_GPIO_Init+0x324>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	f67f ae96 	bls.w	8002990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40020800 	.word	0x40020800
 8002c88:	40020c00 	.word	0x40020c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40021400 	.word	0x40021400
 8002c94:	40021800 	.word	0x40021800
 8002c98:	40013c00 	.word	0x40013c00

08002c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e001      	b.n	8002cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4013      	ands	r3, r2
 8002d16:	041a      	lsls	r2, r3, #16
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	400b      	ands	r3, r1
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e12b      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe fc38 	bl	80015d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d98:	f001 f87e 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a81      	ldr	r2, [pc, #516]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d807      	bhi.n	8002db8 <HAL_I2C_Init+0x84>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a80      	ldr	r2, [pc, #512]	; (8002fac <HAL_I2C_Init+0x278>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e006      	b.n	8002dc6 <HAL_I2C_Init+0x92>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <HAL_I2C_Init+0x27c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0e7      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a78      	ldr	r2, [pc, #480]	; (8002fb4 <HAL_I2C_Init+0x280>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2C_Init+0xd4>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_I2C_Init+0xe8>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_I2C_Init+0x284>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	495c      	ldr	r1, [pc, #368]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	d819      	bhi.n	8002e70 <HAL_I2C_Init+0x13c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e50:	400b      	ands	r3, r1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_I2C_Init+0x138>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e59      	subs	r1, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6a:	e051      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e04f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_I2C_Init+0x168>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e012      	b.n	8002ec2 <HAL_I2C_Init+0x18e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	0099      	lsls	r1, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x196>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e022      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_I2C_Init+0x1bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e58      	subs	r0, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eee:	e00f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6809      	ldr	r1, [r1, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6911      	ldr	r1, [r2, #16]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68d2      	ldr	r2, [r2, #12]
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	000186a0 	.word	0x000186a0
 8002fac:	001e847f 	.word	0x001e847f
 8002fb0:	003d08ff 	.word	0x003d08ff
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	10624dd3 	.word	0x10624dd3

08002fbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	817b      	strh	r3, [r7, #10]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	813b      	strh	r3, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd6:	f7ff fbdf 	bl	8002798 <HAL_GetTick>
 8002fda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	f040 80d9 	bne.w	800319c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2319      	movs	r3, #25
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	496d      	ldr	r1, [pc, #436]	; (80031a8 <HAL_I2C_Mem_Write+0x1ec>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fc7f 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
 8003002:	e0cc      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Mem_Write+0x56>
 800300e:	2302      	movs	r3, #2
 8003010:	e0c5      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d007      	beq.n	8003038 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2221      	movs	r2, #33	; 0x21
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2240      	movs	r2, #64	; 0x40
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a4d      	ldr	r2, [pc, #308]	; (80031ac <HAL_I2C_Mem_Write+0x1f0>)
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800307a:	88f8      	ldrh	r0, [r7, #6]
 800307c:	893a      	ldrh	r2, [r7, #8]
 800307e:	8979      	ldrh	r1, [r7, #10]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4603      	mov	r3, r0
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fab6 	bl	80035fc <I2C_RequestMemoryWrite>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d052      	beq.n	800313c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e081      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fd00 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e06b      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d11b      	bne.n	800313c <HAL_I2C_Mem_Write+0x180>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d017      	beq.n	800313c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1aa      	bne.n	800309a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fcec 	bl	8003b26 <I2C_WaitOnBTFFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b04      	cmp	r3, #4
 800315a:	d107      	bne.n	800316c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e016      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	00100002 	.word	0x00100002
 80031ac:	ffff0000 	.word	0xffff0000

080031b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	460b      	mov	r3, r1
 80031c4:	813b      	strh	r3, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ca:	f7ff fae5 	bl	8002798 <HAL_GetTick>
 80031ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 8208 	bne.w	80035ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	2319      	movs	r3, #25
 80031e4:	2201      	movs	r2, #1
 80031e6:	497b      	ldr	r1, [pc, #492]	; (80033d4 <HAL_I2C_Mem_Read+0x224>)
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fb85 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	e1fb      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Mem_Read+0x56>
 8003202:	2302      	movs	r3, #2
 8003204:	e1f4      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d007      	beq.n	800322c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2222      	movs	r2, #34	; 0x22
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2240      	movs	r2, #64	; 0x40
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a5b      	ldr	r2, [pc, #364]	; (80033d8 <HAL_I2C_Mem_Read+0x228>)
 800326c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800326e:	88f8      	ldrh	r0, [r7, #6]
 8003270:	893a      	ldrh	r2, [r7, #8]
 8003272:	8979      	ldrh	r1, [r7, #10]
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4603      	mov	r3, r0
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 fa52 	bl	8003728 <I2C_RequestMemoryRead>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e1b0      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003292:	2b00      	cmp	r3, #0
 8003294:	d113      	bne.n	80032be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	623b      	str	r3, [r7, #32]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e184      	b.n	80035c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d11b      	bne.n	80032fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	61fb      	str	r3, [r7, #28]
 80032ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e164      	b.n	80035c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	2b02      	cmp	r3, #2
 8003304:	d11b      	bne.n	800333e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	61bb      	str	r3, [r7, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	e144      	b.n	80035c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003354:	e138      	b.n	80035c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	2b03      	cmp	r3, #3
 800335c:	f200 80f1 	bhi.w	8003542 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b01      	cmp	r3, #1
 8003366:	d123      	bne.n	80033b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 fc1b 	bl	8003ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e139      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ae:	e10b      	b.n	80035c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d14e      	bne.n	8003456 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	2200      	movs	r2, #0
 80033c0:	4906      	ldr	r1, [pc, #24]	; (80033dc <HAL_I2C_Mem_Read+0x22c>)
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fa98 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e10e      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
 80033d2:	bf00      	nop
 80033d4:	00100002 	.word	0x00100002
 80033d8:	ffff0000 	.word	0xffff0000
 80033dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003454:	e0b8      	b.n	80035c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	2200      	movs	r2, #0
 800345e:	4966      	ldr	r1, [pc, #408]	; (80035f8 <HAL_I2C_Mem_Read+0x448>)
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fa49 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0bf      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	2200      	movs	r2, #0
 80034ba:	494f      	ldr	r1, [pc, #316]	; (80035f8 <HAL_I2C_Mem_Read+0x448>)
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fa1b 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e091      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003540:	e042      	b.n	80035c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fb2e 	bl	8003ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e04c      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d118      	bne.n	80035c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f aec2 	bne.w	8003356 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	00010004 	.word	0x00010004

080035fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	2200      	movs	r2, #0
 800362e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f960 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d103      	bne.n	8003656 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e05f      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800365a:	897b      	ldrh	r3, [r7, #10]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	492d      	ldr	r1, [pc, #180]	; (8003724 <I2C_RequestMemoryWrite+0x128>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f998 	bl	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e04c      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	6a39      	ldr	r1, [r7, #32]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa02 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d107      	bne.n	80036be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e02b      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	e021      	b.n	8003718 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	b29b      	uxth	r3, r3
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f9dc 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e005      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	00010002 	.word	0x00010002

08003728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	461a      	mov	r2, r3
 8003736:	4603      	mov	r3, r0
 8003738:	817b      	strh	r3, [r7, #10]
 800373a:	460b      	mov	r3, r1
 800373c:	813b      	strh	r3, [r7, #8]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2200      	movs	r2, #0
 800376a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f8c2 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003788:	d103      	bne.n	8003792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e0aa      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	6a3a      	ldr	r2, [r7, #32]
 80037aa:	4952      	ldr	r1, [pc, #328]	; (80038f4 <I2C_RequestMemoryRead+0x1cc>)
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f8fa 	bl	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e097      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d4:	6a39      	ldr	r1, [r7, #32]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f964 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e076      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003804:	893b      	ldrh	r3, [r7, #8]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	e021      	b.n	8003854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003810:	893b      	ldrh	r3, [r7, #8]
 8003812:	0a1b      	lsrs	r3, r3, #8
 8003814:	b29b      	uxth	r3, r3
 8003816:	b2da      	uxtb	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f93e 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e050      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800384a:	893b      	ldrh	r3, [r7, #8]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003856:	6a39      	ldr	r1, [r7, #32]
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 f923 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00d      	beq.n	8003880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b04      	cmp	r3, #4
 800386a:	d107      	bne.n	800387c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e035      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	2200      	movs	r2, #0
 8003898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f82b 	bl	80038f8 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b6:	d103      	bne.n	80038c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e013      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038c4:	897b      	ldrh	r3, [r7, #10]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	6a3a      	ldr	r2, [r7, #32]
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <I2C_RequestMemoryRead+0x1cc>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f863 	bl	80039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	00010002 	.word	0x00010002

080038f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003908:	e025      	b.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d021      	beq.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe ff41 	bl	8002798 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d116      	bne.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0220 	orr.w	r2, r3, #32
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e023      	b.n	800399e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10d      	bne.n	800397c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	43da      	mvns	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	4013      	ands	r3, r2
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf0c      	ite	eq
 8003972:	2301      	moveq	r3, #1
 8003974:	2300      	movne	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	e00c      	b.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	429a      	cmp	r2, r3
 800399a:	d0b6      	beq.n	800390a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039b4:	e051      	b.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	d123      	bne.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e046      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d021      	beq.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fe febf 	bl	8002798 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e020      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10c      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e00b      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d18d      	bne.n	80039b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab0:	e02d      	b.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f8ce 	bl	8003c54 <I2C_IsAcknowledgeFailed>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e02d      	b.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d021      	beq.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7fe fe65 	bl	8002798 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d116      	bne.n	8003b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e007      	b.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d1ca      	bne.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b32:	e02d      	b.n	8003b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f88d 	bl	8003c54 <I2C_IsAcknowledgeFailed>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e02d      	b.n	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d021      	beq.n	8003b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4c:	f7fe fe24 	bl	8002798 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d302      	bcc.n	8003b62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d116      	bne.n	8003b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e007      	b.n	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d1ca      	bne.n	8003b34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb4:	e042      	b.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d119      	bne.n	8003bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e029      	b.n	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf8:	f7fe fdce 	bl	8002798 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d302      	bcc.n	8003c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d116      	bne.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e007      	b.n	8003c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d1b5      	bne.n	8003bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c6a:	d11b      	bne.n	8003ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0cc      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc8:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d90c      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd6:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b63      	ldr	r3, [pc, #396]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0b8      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d08:	4b59      	ldr	r3, [pc, #356]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a58      	ldr	r2, [pc, #352]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a52      	ldr	r2, [pc, #328]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d2c:	4b50      	ldr	r3, [pc, #320]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	494d      	ldr	r1, [pc, #308]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d044      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d119      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e07f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e06f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e067      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d92:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f023 0203 	bic.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4934      	ldr	r1, [pc, #208]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da4:	f7fe fcf8 	bl	8002798 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7fe fcf4 	bl	8002798 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e04f      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 020c 	and.w	r2, r3, #12
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d1eb      	bne.n	8003dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d20c      	bcs.n	8003dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e032      	b.n	8003e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4916      	ldr	r1, [pc, #88]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	490e      	ldr	r1, [pc, #56]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e3a:	f000 fbb1 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	490a      	ldr	r1, [pc, #40]	; (8003e74 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	5ccb      	ldrb	r3, [r1, r3]
 8003e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e52:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_ClockConfig+0x1c8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd fd8c 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023c00 	.word	0x40023c00
 8003e70:	40023800 	.word	0x40023800
 8003e74:	08009728 	.word	0x08009728
 8003e78:	20000008 	.word	0x20000008
 8003e7c:	20000010 	.word	0x20000010

08003e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e86:	681b      	ldr	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	20000008 	.word	0x20000008

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e9c:	f7ff fff0 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	08009738 	.word	0x08009738

08003ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ec4:	f7ff ffdc 	bl	8003e80 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0b5b      	lsrs	r3, r3, #13
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	08009738 	.word	0x08009738

08003ee8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ef8:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f04:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_RCC_GetClockConfig+0x5c>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_RCC_GetClockConfig+0x60>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	601a      	str	r2, [r3, #0]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40023c00 	.word	0x40023c00

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f84:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	496c      	ldr	r1, [pc, #432]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d010      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003fb2:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fb8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	4960      	ldr	r1, [pc, #384]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d017      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe0:	4b58      	ldr	r3, [pc, #352]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4955      	ldr	r1, [pc, #340]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ffe:	d101      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004000:	2301      	movs	r3, #1
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800400c:	2301      	movs	r3, #1
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d017      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800401c:	4b49      	ldr	r3, [pc, #292]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800401e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	4946      	ldr	r1, [pc, #280]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800403a:	d101      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004048:	2301      	movs	r3, #1
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 808a 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	4b39      	ldr	r3, [pc, #228]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	4a38      	ldr	r2, [pc, #224]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b36      	ldr	r3, [pc, #216]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004072:	60bb      	str	r3, [r7, #8]
 8004074:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004076:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a33      	ldr	r2, [pc, #204]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004082:	f7fe fb89 	bl	8002798 <HAL_GetTick>
 8004086:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800408a:	f7fe fb85 	bl	8002798 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e278      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800409c:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a8:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c0:	6a3a      	ldr	r2, [r7, #32]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d028      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040c6:	4b1f      	ldr	r3, [pc, #124]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ce:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040d0:	4b1e      	ldr	r3, [pc, #120]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040dc:	4a19      	ldr	r2, [pc, #100]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d114      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040ee:	f7fe fb53 	bl	8002798 <HAL_GetTick>
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	e00a      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f6:	f7fe fb4f 	bl	8002798 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e240      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410c:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ee      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004124:	d114      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413a:	4902      	ldr	r1, [pc, #8]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]
 8004140:	e00c      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000
 800414c:	42470e40 	.word	0x42470e40
 8004150:	4b4a      	ldr	r3, [pc, #296]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a49      	ldr	r2, [pc, #292]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004156:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800415a:	6093      	str	r3, [r2, #8]
 800415c:	4b47      	ldr	r3, [pc, #284]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800415e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	4944      	ldr	r1, [pc, #272]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800416a:	4313      	orrs	r3, r2
 800416c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004180:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004182:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004190:	4b3a      	ldr	r3, [pc, #232]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	4937      	ldr	r1, [pc, #220]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041b2:	4b32      	ldr	r3, [pc, #200]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c0:	492e      	ldr	r1, [pc, #184]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d011      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041d4:	4b29      	ldr	r3, [pc, #164]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	4926      	ldr	r1, [pc, #152]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f2:	d101      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80041f4:	2301      	movs	r3, #1
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004204:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	491a      	ldr	r1, [pc, #104]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	2b00      	cmp	r3, #0
 8004224:	d011      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800422c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	4911      	ldr	r1, [pc, #68]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004244:	d101      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004246:	2301      	movs	r3, #1
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d005      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004258:	f040 80ff 	bne.w	800445a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004262:	f7fe fa99 	bl	8002798 <HAL_GetTick>
 8004266:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004268:	e00e      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800426a:	f7fe fa95 	bl	8002798 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d907      	bls.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e188      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800427c:	40023800 	.word	0x40023800
 8004280:	424711e0 	.word	0x424711e0
 8004284:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004288:	4b7e      	ldr	r3, [pc, #504]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ea      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d028      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d124      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042bc:	4b71      	ldr	r3, [pc, #452]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	0c1b      	lsrs	r3, r3, #16
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	3301      	adds	r3, #1
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ce:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	431a      	orrs	r2, r3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	3b01      	subs	r3, #1
 80042ee:	041b      	lsls	r3, r3, #16
 80042f0:	431a      	orrs	r2, r3
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	071b      	lsls	r3, r3, #28
 80042fe:	4961      	ldr	r1, [pc, #388]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d004      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004324:	2b00      	cmp	r3, #0
 8004326:	d035      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d130      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004332:	4b54      	ldr	r3, [pc, #336]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004344:	4b4f      	ldr	r3, [pc, #316]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800434a:	0f1b      	lsrs	r3, r3, #28
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	019b      	lsls	r3, r3, #6
 800435c:	431a      	orrs	r2, r3
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	431a      	orrs	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	071b      	lsls	r3, r3, #28
 8004374:	4943      	ldr	r1, [pc, #268]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800437c:	4b41      	ldr	r3, [pc, #260]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004382:	f023 021f 	bic.w	r2, r3, #31
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	493d      	ldr	r1, [pc, #244]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800439c:	2b00      	cmp	r3, #0
 800439e:	d029      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043a8:	d124      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	0f1b      	lsrs	r3, r3, #28
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	019b      	lsls	r3, r3, #6
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	3b01      	subs	r3, #1
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	431a      	orrs	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	071b      	lsls	r3, r3, #28
 80043ec:	4925      	ldr	r1, [pc, #148]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	3b01      	subs	r3, #1
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	071b      	lsls	r3, r3, #28
 8004426:	4917      	ldr	r1, [pc, #92]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004434:	f7fe f9b0 	bl	8002798 <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800443c:	f7fe f9ac 	bl	8002798 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e09f      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	2b01      	cmp	r3, #1
 800445e:	f040 8095 	bne.w	800458c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004468:	f7fe f996 	bl	8002798 <HAL_GetTick>
 800446c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800446e:	e00f      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004470:	f7fe f992 	bl	8002798 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d908      	bls.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e085      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	42470068 	.word	0x42470068
 800448c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004490:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449c:	d0e8      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d02b      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d127      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80044c6:	4b34      	ldr	r3, [pc, #208]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	3301      	adds	r3, #1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	019b      	lsls	r3, r3, #6
 80044e2:	431a      	orrs	r2, r3
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	3b01      	subs	r3, #1
 80044ea:	041b      	lsls	r3, r3, #16
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	4928      	ldr	r1, [pc, #160]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004502:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	3b01      	subs	r3, #1
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	4922      	ldr	r1, [pc, #136]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01d      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800452a:	d118      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800452c:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	0e1b      	lsrs	r3, r3, #24
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	019b      	lsls	r3, r3, #6
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	3b01      	subs	r3, #1
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	4910      	ldr	r1, [pc, #64]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004564:	f7fe f918 	bl	8002798 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800456c:	f7fe f914 	bl	8002798 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e007      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800458a:	d1ef      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3730      	adds	r7, #48	; 0x30
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	42470070 	.word	0x42470070

080045a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a4:	b0ae      	sub	sp, #184	; 0xb8
 80045a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c6:	4bcb      	ldr	r3, [pc, #812]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
 80045ce:	2b0c      	cmp	r3, #12
 80045d0:	f200 8206 	bhi.w	80049e0 <HAL_RCC_GetSysClockFreq+0x440>
 80045d4:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80045d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045da:	bf00      	nop
 80045dc:	08004611 	.word	0x08004611
 80045e0:	080049e1 	.word	0x080049e1
 80045e4:	080049e1 	.word	0x080049e1
 80045e8:	080049e1 	.word	0x080049e1
 80045ec:	08004619 	.word	0x08004619
 80045f0:	080049e1 	.word	0x080049e1
 80045f4:	080049e1 	.word	0x080049e1
 80045f8:	080049e1 	.word	0x080049e1
 80045fc:	08004621 	.word	0x08004621
 8004600:	080049e1 	.word	0x080049e1
 8004604:	080049e1 	.word	0x080049e1
 8004608:	080049e1 	.word	0x080049e1
 800460c:	08004811 	.word	0x08004811
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4bb9      	ldr	r3, [pc, #740]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004616:	e1e7      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004618:	4bb8      	ldr	r3, [pc, #736]	; (80048fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800461a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800461e:	e1e3      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004620:	4bb4      	ldr	r3, [pc, #720]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800462c:	4bb1      	ldr	r3, [pc, #708]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d071      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004638:	4bae      	ldr	r3, [pc, #696]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004644:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800464c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004650:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004654:	2300      	movs	r3, #0
 8004656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800465a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800465e:	4622      	mov	r2, r4
 8004660:	462b      	mov	r3, r5
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	0159      	lsls	r1, r3, #5
 800466c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004670:	0150      	lsls	r0, r2, #5
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4621      	mov	r1, r4
 8004678:	1a51      	subs	r1, r2, r1
 800467a:	6439      	str	r1, [r7, #64]	; 0x40
 800467c:	4629      	mov	r1, r5
 800467e:	eb63 0301 	sbc.w	r3, r3, r1
 8004682:	647b      	str	r3, [r7, #68]	; 0x44
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004690:	4649      	mov	r1, r9
 8004692:	018b      	lsls	r3, r1, #6
 8004694:	4641      	mov	r1, r8
 8004696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800469a:	4641      	mov	r1, r8
 800469c:	018a      	lsls	r2, r1, #6
 800469e:	4641      	mov	r1, r8
 80046a0:	1a51      	subs	r1, r2, r1
 80046a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80046a4:	4649      	mov	r1, r9
 80046a6:	eb63 0301 	sbc.w	r3, r3, r1
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80046b8:	4649      	mov	r1, r9
 80046ba:	00cb      	lsls	r3, r1, #3
 80046bc:	4641      	mov	r1, r8
 80046be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c2:	4641      	mov	r1, r8
 80046c4:	00ca      	lsls	r2, r1, #3
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	4622      	mov	r2, r4
 80046ce:	189b      	adds	r3, r3, r2
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30
 80046d2:	462b      	mov	r3, r5
 80046d4:	460a      	mov	r2, r1
 80046d6:	eb42 0303 	adc.w	r3, r2, r3
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046e8:	4629      	mov	r1, r5
 80046ea:	024b      	lsls	r3, r1, #9
 80046ec:	4621      	mov	r1, r4
 80046ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046f2:	4621      	mov	r1, r4
 80046f4:	024a      	lsls	r2, r1, #9
 80046f6:	4610      	mov	r0, r2
 80046f8:	4619      	mov	r1, r3
 80046fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046fe:	2200      	movs	r2, #0
 8004700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004704:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004708:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800470c:	f7fb fd80 	bl	8000210 <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4613      	mov	r3, r2
 8004716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800471a:	e067      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471c:	4b75      	ldr	r3, [pc, #468]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004728:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800472c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004734:	67bb      	str	r3, [r7, #120]	; 0x78
 8004736:	2300      	movs	r3, #0
 8004738:	67fb      	str	r3, [r7, #124]	; 0x7c
 800473a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800473e:	4622      	mov	r2, r4
 8004740:	462b      	mov	r3, r5
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f04f 0100 	mov.w	r1, #0
 800474a:	0159      	lsls	r1, r3, #5
 800474c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004750:	0150      	lsls	r0, r2, #5
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4621      	mov	r1, r4
 8004758:	1a51      	subs	r1, r2, r1
 800475a:	62b9      	str	r1, [r7, #40]	; 0x28
 800475c:	4629      	mov	r1, r5
 800475e:	eb63 0301 	sbc.w	r3, r3, r1
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004770:	4649      	mov	r1, r9
 8004772:	018b      	lsls	r3, r1, #6
 8004774:	4641      	mov	r1, r8
 8004776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800477a:	4641      	mov	r1, r8
 800477c:	018a      	lsls	r2, r1, #6
 800477e:	4641      	mov	r1, r8
 8004780:	ebb2 0a01 	subs.w	sl, r2, r1
 8004784:	4649      	mov	r1, r9
 8004786:	eb63 0b01 	sbc.w	fp, r3, r1
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004796:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800479a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800479e:	4692      	mov	sl, r2
 80047a0:	469b      	mov	fp, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	eb1a 0303 	adds.w	r3, sl, r3
 80047a8:	623b      	str	r3, [r7, #32]
 80047aa:	462b      	mov	r3, r5
 80047ac:	eb4b 0303 	adc.w	r3, fp, r3
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047be:	4629      	mov	r1, r5
 80047c0:	028b      	lsls	r3, r1, #10
 80047c2:	4621      	mov	r1, r4
 80047c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047c8:	4621      	mov	r1, r4
 80047ca:	028a      	lsls	r2, r1, #10
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047d4:	2200      	movs	r2, #0
 80047d6:	673b      	str	r3, [r7, #112]	; 0x70
 80047d8:	677a      	str	r2, [r7, #116]	; 0x74
 80047da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80047de:	f7fb fd17 	bl	8000210 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4613      	mov	r3, r2
 80047e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047ec:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	3301      	adds	r3, #1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80047fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800480e:	e0eb      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004810:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481c:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d06b      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004828:	4b32      	ldr	r3, [pc, #200]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	2200      	movs	r2, #0
 8004830:	66bb      	str	r3, [r7, #104]	; 0x68
 8004832:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483a:	663b      	str	r3, [r7, #96]	; 0x60
 800483c:	2300      	movs	r3, #0
 800483e:	667b      	str	r3, [r7, #100]	; 0x64
 8004840:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004844:	4622      	mov	r2, r4
 8004846:	462b      	mov	r3, r5
 8004848:	f04f 0000 	mov.w	r0, #0
 800484c:	f04f 0100 	mov.w	r1, #0
 8004850:	0159      	lsls	r1, r3, #5
 8004852:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004856:	0150      	lsls	r0, r2, #5
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4621      	mov	r1, r4
 800485e:	1a51      	subs	r1, r2, r1
 8004860:	61b9      	str	r1, [r7, #24]
 8004862:	4629      	mov	r1, r5
 8004864:	eb63 0301 	sbc.w	r3, r3, r1
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004876:	4659      	mov	r1, fp
 8004878:	018b      	lsls	r3, r1, #6
 800487a:	4651      	mov	r1, sl
 800487c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004880:	4651      	mov	r1, sl
 8004882:	018a      	lsls	r2, r1, #6
 8004884:	4651      	mov	r1, sl
 8004886:	ebb2 0801 	subs.w	r8, r2, r1
 800488a:	4659      	mov	r1, fp
 800488c:	eb63 0901 	sbc.w	r9, r3, r1
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a4:	4690      	mov	r8, r2
 80048a6:	4699      	mov	r9, r3
 80048a8:	4623      	mov	r3, r4
 80048aa:	eb18 0303 	adds.w	r3, r8, r3
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	462b      	mov	r3, r5
 80048b2:	eb49 0303 	adc.w	r3, r9, r3
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048c4:	4629      	mov	r1, r5
 80048c6:	024b      	lsls	r3, r1, #9
 80048c8:	4621      	mov	r1, r4
 80048ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ce:	4621      	mov	r1, r4
 80048d0:	024a      	lsls	r2, r1, #9
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048da:	2200      	movs	r2, #0
 80048dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80048de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80048e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048e4:	f7fb fc94 	bl	8000210 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048f2:	e065      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x420>
 80048f4:	40023800 	.word	0x40023800
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004900:	4b3d      	ldr	r3, [pc, #244]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	099b      	lsrs	r3, r3, #6
 8004906:	2200      	movs	r2, #0
 8004908:	4618      	mov	r0, r3
 800490a:	4611      	mov	r1, r2
 800490c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004910:	653b      	str	r3, [r7, #80]	; 0x50
 8004912:	2300      	movs	r3, #0
 8004914:	657b      	str	r3, [r7, #84]	; 0x54
 8004916:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800491a:	4642      	mov	r2, r8
 800491c:	464b      	mov	r3, r9
 800491e:	f04f 0000 	mov.w	r0, #0
 8004922:	f04f 0100 	mov.w	r1, #0
 8004926:	0159      	lsls	r1, r3, #5
 8004928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492c:	0150      	lsls	r0, r2, #5
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4641      	mov	r1, r8
 8004934:	1a51      	subs	r1, r2, r1
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	4649      	mov	r1, r9
 800493a:	eb63 0301 	sbc.w	r3, r3, r1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800494c:	4659      	mov	r1, fp
 800494e:	018b      	lsls	r3, r1, #6
 8004950:	4651      	mov	r1, sl
 8004952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004956:	4651      	mov	r1, sl
 8004958:	018a      	lsls	r2, r1, #6
 800495a:	4651      	mov	r1, sl
 800495c:	1a54      	subs	r4, r2, r1
 800495e:	4659      	mov	r1, fp
 8004960:	eb63 0501 	sbc.w	r5, r3, r1
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	00eb      	lsls	r3, r5, #3
 800496e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004972:	00e2      	lsls	r2, r4, #3
 8004974:	4614      	mov	r4, r2
 8004976:	461d      	mov	r5, r3
 8004978:	4643      	mov	r3, r8
 800497a:	18e3      	adds	r3, r4, r3
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	464b      	mov	r3, r9
 8004980:	eb45 0303 	adc.w	r3, r5, r3
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004992:	4629      	mov	r1, r5
 8004994:	028b      	lsls	r3, r1, #10
 8004996:	4621      	mov	r1, r4
 8004998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800499c:	4621      	mov	r1, r4
 800499e:	028a      	lsls	r2, r1, #10
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049a8:	2200      	movs	r2, #0
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80049ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049b2:	f7fb fc2d 	bl	8000210 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	4613      	mov	r3, r2
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0f1b      	lsrs	r3, r3, #28
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80049ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049de:	e003      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80049e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80049e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	37b8      	adds	r7, #184	; 0xb8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	00f42400 	.word	0x00f42400

08004a00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b086      	sub	sp, #24
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e28d      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8083 	beq.w	8004b26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a20:	4b94      	ldr	r3, [pc, #592]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d019      	beq.n	8004a60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a2c:	4b91      	ldr	r3, [pc, #580]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d106      	bne.n	8004a46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a38:	4b8e      	ldr	r3, [pc, #568]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a44:	d00c      	beq.n	8004a60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a46:	4b8b      	ldr	r3, [pc, #556]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d112      	bne.n	8004a78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a52:	4b88      	ldr	r3, [pc, #544]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a5e:	d10b      	bne.n	8004a78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	4b84      	ldr	r3, [pc, #528]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d05b      	beq.n	8004b24 <HAL_RCC_OscConfig+0x124>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d157      	bne.n	8004b24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e25a      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_OscConfig+0x90>
 8004a82:	4b7c      	ldr	r3, [pc, #496]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a7b      	ldr	r2, [pc, #492]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e01d      	b.n	8004acc <HAL_RCC_OscConfig+0xcc>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0xb4>
 8004a9a:	4b76      	ldr	r3, [pc, #472]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a75      	ldr	r2, [pc, #468]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	4b73      	ldr	r3, [pc, #460]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a72      	ldr	r2, [pc, #456]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0xcc>
 8004ab4:	4b6f      	ldr	r3, [pc, #444]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a6e      	ldr	r2, [pc, #440]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	4b6c      	ldr	r3, [pc, #432]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a6b      	ldr	r2, [pc, #428]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d013      	beq.n	8004afc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd fe60 	bl	8002798 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fd fe5c 	bl	8002798 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e21f      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0xdc>
 8004afa:	e014      	b.n	8004b26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd fe4c 	bl	8002798 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fd fe48 	bl	8002798 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e20b      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b16:	4b57      	ldr	r3, [pc, #348]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x104>
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d06f      	beq.n	8004c12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b32:	4b50      	ldr	r3, [pc, #320]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d017      	beq.n	8004b6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b3e:	4b4d      	ldr	r3, [pc, #308]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d105      	bne.n	8004b56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b4a:	4b4a      	ldr	r3, [pc, #296]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d11c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b62:	4b44      	ldr	r3, [pc, #272]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d116      	bne.n	8004b9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6e:	4b41      	ldr	r3, [pc, #260]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_RCC_OscConfig+0x186>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e1d3      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	4b3b      	ldr	r3, [pc, #236]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4937      	ldr	r1, [pc, #220]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	e03a      	b.n	8004c12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba4:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCC_OscConfig+0x278>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fd fdf5 	bl	8002798 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fd fdf1 	bl	8002798 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1b4      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4925      	ldr	r1, [pc, #148]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]
 8004be4:	e015      	b.n	8004c12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <HAL_RCC_OscConfig+0x278>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fd fdd4 	bl	8002798 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bf4:	f7fd fdd0 	bl	8002798 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e193      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	4b1b      	ldr	r3, [pc, #108]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d036      	beq.n	8004c8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <HAL_RCC_OscConfig+0x27c>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fdb4 	bl	8002798 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c34:	f7fd fdb0 	bl	8002798 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e173      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_RCC_OscConfig+0x274>)
 8004c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x234>
 8004c52:	e01b      	b.n	8004c8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_OscConfig+0x27c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fd fd9d 	bl	8002798 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	e00e      	b.n	8004c80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c62:	f7fd fd99 	bl	8002798 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d907      	bls.n	8004c80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e15c      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
 8004c74:	40023800 	.word	0x40023800
 8004c78:	42470000 	.word	0x42470000
 8004c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	4b8a      	ldr	r3, [pc, #552]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ea      	bne.n	8004c62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8097 	beq.w	8004dc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b83      	ldr	r3, [pc, #524]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	4b7f      	ldr	r3, [pc, #508]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a7e      	ldr	r2, [pc, #504]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cba:	4b7c      	ldr	r3, [pc, #496]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b79      	ldr	r3, [pc, #484]	; (8004eb0 <HAL_RCC_OscConfig+0x4b0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d118      	bne.n	8004d08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd6:	4b76      	ldr	r3, [pc, #472]	; (8004eb0 <HAL_RCC_OscConfig+0x4b0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a75      	ldr	r2, [pc, #468]	; (8004eb0 <HAL_RCC_OscConfig+0x4b0>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fd59 	bl	8002798 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cea:	f7fd fd55 	bl	8002798 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e118      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <HAL_RCC_OscConfig+0x4b0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d106      	bne.n	8004d1e <HAL_RCC_OscConfig+0x31e>
 8004d10:	4b66      	ldr	r3, [pc, #408]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	4a65      	ldr	r2, [pc, #404]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d16:	f043 0301 	orr.w	r3, r3, #1
 8004d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1c:	e01c      	b.n	8004d58 <HAL_RCC_OscConfig+0x358>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x340>
 8004d26:	4b61      	ldr	r3, [pc, #388]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2a:	4a60      	ldr	r2, [pc, #384]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
 8004d30:	6713      	str	r3, [r2, #112]	; 0x70
 8004d32:	4b5e      	ldr	r3, [pc, #376]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a5d      	ldr	r2, [pc, #372]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0x358>
 8004d40:	4b5a      	ldr	r3, [pc, #360]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	4a59      	ldr	r2, [pc, #356]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4c:	4b57      	ldr	r3, [pc, #348]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	4a56      	ldr	r2, [pc, #344]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d52:	f023 0304 	bic.w	r3, r3, #4
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d015      	beq.n	8004d8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d60:	f7fd fd1a 	bl	8002798 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fd fd16 	bl	8002798 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e0d7      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b4b      	ldr	r3, [pc, #300]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCC_OscConfig+0x368>
 8004d8a:	e014      	b.n	8004db6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd fd04 	bl	8002798 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd fd00 	bl	8002798 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e0c1      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004daa:	4b40      	ldr	r3, [pc, #256]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1ee      	bne.n	8004d94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dbc:	4b3b      	ldr	r3, [pc, #236]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc0:	4a3a      	ldr	r2, [pc, #232]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80ad 	beq.w	8004f2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dd2:	4b36      	ldr	r3, [pc, #216]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d060      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d145      	bne.n	8004e72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de6:	4b33      	ldr	r3, [pc, #204]	; (8004eb4 <HAL_RCC_OscConfig+0x4b4>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fd fcd4 	bl	8002798 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fd fcd0 	bl	8002798 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e093      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	4b29      	ldr	r3, [pc, #164]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69da      	ldr	r2, [r3, #28]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	019b      	lsls	r3, r3, #6
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	071b      	lsls	r3, r3, #28
 8004e3e:	491b      	ldr	r1, [pc, #108]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e44:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <HAL_RCC_OscConfig+0x4b4>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4a:	f7fd fca5 	bl	8002798 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fd fca1 	bl	8002798 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e064      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e64:	4b11      	ldr	r3, [pc, #68]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x452>
 8004e70:	e05c      	b.n	8004f2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <HAL_RCC_OscConfig+0x4b4>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fd fc8e 	bl	8002798 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e80:	f7fd fc8a 	bl	8002798 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e04d      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <HAL_RCC_OscConfig+0x4ac>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f0      	bne.n	8004e80 <HAL_RCC_OscConfig+0x480>
 8004e9e:	e045      	b.n	8004f2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e040      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <HAL_RCC_OscConfig+0x538>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d030      	beq.n	8004f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d129      	bne.n	8004f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d122      	bne.n	8004f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ee8:	4013      	ands	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d119      	bne.n	8004f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	3b01      	subs	r3, #1
 8004f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d10f      	bne.n	8004f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d107      	bne.n	8004f28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d001      	beq.n	8004f2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023800 	.word	0x40023800

08004f3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e07b      	b.n	8005046 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d108      	bne.n	8004f68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5e:	d009      	beq.n	8004f74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	61da      	str	r2, [r3, #28]
 8004f66:	e005      	b.n	8004f74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc fb66 	bl	8001660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004faa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff8:	ea42 0103 	orr.w	r1, r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 0104 	and.w	r1, r3, #4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f003 0210 	and.w	r2, r3, #16
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69da      	ldr	r2, [r3, #28]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005034:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	4613      	mov	r3, r2
 800505c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_SPI_Transmit+0x22>
 800506c:	2302      	movs	r3, #2
 800506e:	e126      	b.n	80052be <HAL_SPI_Transmit+0x270>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005078:	f7fd fb8e 	bl	8002798 <HAL_GetTick>
 800507c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	d002      	beq.n	8005094 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800508e:	2302      	movs	r3, #2
 8005090:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005092:	e10b      	b.n	80052ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <HAL_SPI_Transmit+0x52>
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d102      	bne.n	80050a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050a4:	e102      	b.n	80052ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2203      	movs	r2, #3
 80050aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ec:	d10f      	bne.n	800510e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d007      	beq.n	800512c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800512a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005134:	d14b      	bne.n	80051ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <HAL_SPI_Transmit+0xf6>
 800513e:	8afb      	ldrh	r3, [r7, #22]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d13e      	bne.n	80051c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005148:	881a      	ldrh	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005154:	1c9a      	adds	r2, r3, #2
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005168:	e02b      	b.n	80051c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d112      	bne.n	800519e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	881a      	ldrh	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	1c9a      	adds	r2, r3, #2
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	86da      	strh	r2, [r3, #54]	; 0x36
 800519c:	e011      	b.n	80051c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800519e:	f7fd fafb 	bl	8002798 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d803      	bhi.n	80051b6 <HAL_SPI_Transmit+0x168>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d102      	bne.n	80051bc <HAL_SPI_Transmit+0x16e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051c0:	e074      	b.n	80052ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1ce      	bne.n	800516a <HAL_SPI_Transmit+0x11c>
 80051cc:	e04c      	b.n	8005268 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_SPI_Transmit+0x18e>
 80051d6:	8afb      	ldrh	r3, [r7, #22]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d140      	bne.n	800525e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	7812      	ldrb	r2, [r2, #0]
 80051e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005202:	e02c      	b.n	800525e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b02      	cmp	r3, #2
 8005210:	d113      	bne.n	800523a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	86da      	strh	r2, [r3, #54]	; 0x36
 8005238:	e011      	b.n	800525e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523a:	f7fd faad 	bl	8002798 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	429a      	cmp	r2, r3
 8005248:	d803      	bhi.n	8005252 <HAL_SPI_Transmit+0x204>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d102      	bne.n	8005258 <HAL_SPI_Transmit+0x20a>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800525c:	e026      	b.n	80052ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1cd      	bne.n	8005204 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fbcb 	bl	8005a08 <SPI_EndRxTxTransaction>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005286:	2300      	movs	r3, #0
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	77fb      	strb	r3, [r7, #31]
 80052a8:	e000      	b.n	80052ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80052aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3720      	adds	r7, #32
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b088      	sub	sp, #32
 80052ca:	af02      	add	r7, sp, #8
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e2:	d112      	bne.n	800530a <HAL_SPI_Receive+0x44>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d10e      	bne.n	800530a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2204      	movs	r2, #4
 80052f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052f4:	88fa      	ldrh	r2, [r7, #6]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	4613      	mov	r3, r2
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f8f1 	bl	80054e8 <HAL_SPI_TransmitReceive>
 8005306:	4603      	mov	r3, r0
 8005308:	e0ea      	b.n	80054e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <HAL_SPI_Receive+0x52>
 8005314:	2302      	movs	r3, #2
 8005316:	e0e3      	b.n	80054e0 <HAL_SPI_Receive+0x21a>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005320:	f7fd fa3a 	bl	8002798 <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	d002      	beq.n	8005338 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005332:	2302      	movs	r3, #2
 8005334:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005336:	e0ca      	b.n	80054ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <HAL_SPI_Receive+0x7e>
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d102      	bne.n	800534a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005348:	e0c1      	b.n	80054ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2204      	movs	r2, #4
 800534e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005390:	d10f      	bne.n	80053b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d007      	beq.n	80053d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d162      	bne.n	800549e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053d8:	e02e      	b.n	8005438 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d115      	bne.n	8005414 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f103 020c 	add.w	r2, r3, #12
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	7812      	ldrb	r2, [r2, #0]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005412:	e011      	b.n	8005438 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005414:	f7fd f9c0 	bl	8002798 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d803      	bhi.n	800542c <HAL_SPI_Receive+0x166>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d102      	bne.n	8005432 <HAL_SPI_Receive+0x16c>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005436:	e04a      	b.n	80054ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1cb      	bne.n	80053da <HAL_SPI_Receive+0x114>
 8005442:	e031      	b.n	80054a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d113      	bne.n	800547a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545c:	b292      	uxth	r2, r2
 800545e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005478:	e011      	b.n	800549e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547a:	f7fd f98d 	bl	8002798 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d803      	bhi.n	8005492 <HAL_SPI_Receive+0x1cc>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d102      	bne.n	8005498 <HAL_SPI_Receive+0x1d2>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800549c:	e017      	b.n	80054ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1cd      	bne.n	8005444 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	6839      	ldr	r1, [r7, #0]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fa45 	bl	800593c <SPI_EndRxTransaction>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
 80054ca:	e000      	b.n	80054ce <HAL_SPI_Receive+0x208>
  }

error :
 80054cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054de:	7dfb      	ldrb	r3, [r7, #23]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	; 0x30
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054f6:	2301      	movs	r3, #1
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_SPI_TransmitReceive+0x26>
 800550a:	2302      	movs	r3, #2
 800550c:	e18a      	b.n	8005824 <HAL_SPI_TransmitReceive+0x33c>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005516:	f7fd f93f 	bl	8002798 <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800552c:	887b      	ldrh	r3, [r7, #2]
 800552e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005534:	2b01      	cmp	r3, #1
 8005536:	d00f      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x70>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553e:	d107      	bne.n	8005550 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d103      	bne.n	8005550 <HAL_SPI_TransmitReceive+0x68>
 8005548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800554c:	2b04      	cmp	r3, #4
 800554e:	d003      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005550:	2302      	movs	r3, #2
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005556:	e15b      	b.n	8005810 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <HAL_SPI_TransmitReceive+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_SPI_TransmitReceive+0x82>
 8005564:	887b      	ldrh	r3, [r7, #2]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d103      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005570:	e14e      	b.n	8005810 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2205      	movs	r2, #5
 8005582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	887a      	ldrh	r2, [r7, #2]
 8005596:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	887a      	ldrh	r2, [r7, #2]
 80055ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d007      	beq.n	80055da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055e2:	d178      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x10a>
 80055ec:	8b7b      	ldrh	r3, [r7, #26]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d166      	bne.n	80056c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	881a      	ldrh	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	1c9a      	adds	r2, r3, #2
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005616:	e053      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b02      	cmp	r3, #2
 8005624:	d11b      	bne.n	800565e <HAL_SPI_TransmitReceive+0x176>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d016      	beq.n	800565e <HAL_SPI_TransmitReceive+0x176>
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d113      	bne.n	800565e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	1c9a      	adds	r2, r3, #2
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	d119      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x1b8>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d014      	beq.n	80056a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	b292      	uxth	r2, r2
 8005682:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800569c:	2301      	movs	r3, #1
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056a0:	f7fd f87a 	bl	8002798 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d807      	bhi.n	80056c0 <HAL_SPI_TransmitReceive+0x1d8>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d003      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056be:	e0a7      	b.n	8005810 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1a6      	bne.n	8005618 <HAL_SPI_TransmitReceive+0x130>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1a1      	bne.n	8005618 <HAL_SPI_TransmitReceive+0x130>
 80056d4:	e07c      	b.n	80057d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_SPI_TransmitReceive+0x1fc>
 80056de:	8b7b      	ldrh	r3, [r7, #26]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d16b      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	330c      	adds	r3, #12
 80056ee:	7812      	ldrb	r2, [r2, #0]
 80056f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800570a:	e057      	b.n	80057bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b02      	cmp	r3, #2
 8005718:	d11c      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x26c>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_SPI_TransmitReceive+0x26c>
 8005724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d114      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d119      	bne.n	8005796 <HAL_SPI_TransmitReceive+0x2ae>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d014      	beq.n	8005796 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005792:	2301      	movs	r3, #1
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005796:	f7fc ffff 	bl	8002798 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d803      	bhi.n	80057ae <HAL_SPI_TransmitReceive+0x2c6>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d102      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x2cc>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057ba:	e029      	b.n	8005810 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1a2      	bne.n	800570c <HAL_SPI_TransmitReceive+0x224>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d19d      	bne.n	800570c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f917 	bl	8005a08 <SPI_EndRxTxTransaction>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057ec:	e010      	b.n	8005810 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	e000      	b.n	8005810 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800580e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005820:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005824:	4618      	mov	r0, r3
 8005826:	3730      	adds	r7, #48	; 0x30
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800583c:	f7fc ffac 	bl	8002798 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	4413      	add	r3, r2
 800584a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800584c:	f7fc ffa4 	bl	8002798 <HAL_GetTick>
 8005850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005852:	4b39      	ldr	r3, [pc, #228]	; (8005938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	015b      	lsls	r3, r3, #5
 8005858:	0d1b      	lsrs	r3, r3, #20
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005862:	e054      	b.n	800590e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d050      	beq.n	800590e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800586c:	f7fc ff94 	bl	8002798 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	429a      	cmp	r2, r3
 800587a:	d902      	bls.n	8005882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d13d      	bne.n	80058fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800589a:	d111      	bne.n	80058c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a4:	d004      	beq.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ae:	d107      	bne.n	80058c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c8:	d10f      	bne.n	80058ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e017      	b.n	800592e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3b01      	subs	r3, #1
 800590c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4013      	ands	r3, r2
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	bf0c      	ite	eq
 800591e:	2301      	moveq	r3, #1
 8005920:	2300      	movne	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	429a      	cmp	r2, r3
 800592a:	d19b      	bne.n	8005864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000008 	.word	0x20000008

0800593c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005950:	d111      	bne.n	8005976 <SPI_EndRxTransaction+0x3a>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800595a:	d004      	beq.n	8005966 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005964:	d107      	bne.n	8005976 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005974:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597e:	d12a      	bne.n	80059d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005988:	d012      	beq.n	80059b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2200      	movs	r2, #0
 8005992:	2180      	movs	r1, #128	; 0x80
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff ff49 	bl	800582c <SPI_WaitFlagStateUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d02d      	beq.n	80059fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	f043 0220 	orr.w	r2, r3, #32
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e026      	b.n	80059fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2200      	movs	r2, #0
 80059b8:	2101      	movs	r1, #1
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff ff36 	bl	800582c <SPI_WaitFlagStateUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01a      	beq.n	80059fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	f043 0220 	orr.w	r2, r3, #32
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e013      	b.n	80059fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	2101      	movs	r1, #1
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f7ff ff23 	bl	800582c <SPI_WaitFlagStateUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e000      	b.n	80059fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a14:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <SPI_EndRxTxTransaction+0x7c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1b      	ldr	r2, [pc, #108]	; (8005a88 <SPI_EndRxTxTransaction+0x80>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	0d5b      	lsrs	r3, r3, #21
 8005a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a32:	d112      	bne.n	8005a5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff fef4 	bl	800582c <SPI_WaitFlagStateUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d016      	beq.n	8005a78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	f043 0220 	orr.w	r2, r3, #32
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e00f      	b.n	8005a7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	2b80      	cmp	r3, #128	; 0x80
 8005a72:	d0f2      	beq.n	8005a5a <SPI_EndRxTxTransaction+0x52>
 8005a74:	e000      	b.n	8005a78 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a76:	bf00      	nop
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000008 	.word	0x20000008
 8005a88:	165e9f81 	.word	0x165e9f81

08005a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e041      	b.n	8005b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fb fe4c 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f000 fce2 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d001      	beq.n	8005b44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e046      	b.n	8005bd2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <HAL_TIM_Base_Start+0xb4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d022      	beq.n	8005b9c <HAL_TIM_Base_Start+0x70>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5e:	d01d      	beq.n	8005b9c <HAL_TIM_Base_Start+0x70>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1f      	ldr	r2, [pc, #124]	; (8005be4 <HAL_TIM_Base_Start+0xb8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d018      	beq.n	8005b9c <HAL_TIM_Base_Start+0x70>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1e      	ldr	r2, [pc, #120]	; (8005be8 <HAL_TIM_Base_Start+0xbc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <HAL_TIM_Base_Start+0x70>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1c      	ldr	r2, [pc, #112]	; (8005bec <HAL_TIM_Base_Start+0xc0>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00e      	beq.n	8005b9c <HAL_TIM_Base_Start+0x70>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <HAL_TIM_Base_Start+0xc4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_TIM_Base_Start+0x70>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <HAL_TIM_Base_Start+0xc8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_TIM_Base_Start+0x70>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_TIM_Base_Start+0xcc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d111      	bne.n	8005bc0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b06      	cmp	r3, #6
 8005bac:	d010      	beq.n	8005bd0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bbe:	e007      	b.n	8005bd0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40001800 	.word	0x40001800

08005bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d001      	beq.n	8005c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e04e      	b.n	8005cb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a23      	ldr	r2, [pc, #140]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d022      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x80>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d01d      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x80>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1f      	ldr	r2, [pc, #124]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x80>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x80>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <HAL_TIM_Base_Start_IT+0xd0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x80>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x80>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a19      	ldr	r2, [pc, #100]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0x80>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a18      	ldr	r2, [pc, #96]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d111      	bne.n	8005ca0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b06      	cmp	r3, #6
 8005c8c:	d010      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c9e:	e007      	b.n	8005cb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	40010400 	.word	0x40010400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40001800 	.word	0x40001800

08005cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e041      	b.n	8005d72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f839 	bl	8005d7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 fbba 	bl	8006494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <HAL_TIM_PWM_Start+0x24>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	e022      	b.n	8005dfa <HAL_TIM_PWM_Start+0x6a>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d109      	bne.n	8005dce <HAL_TIM_PWM_Start+0x3e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	bf14      	ite	ne
 8005dc6:	2301      	movne	r3, #1
 8005dc8:	2300      	moveq	r3, #0
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	e015      	b.n	8005dfa <HAL_TIM_PWM_Start+0x6a>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d109      	bne.n	8005de8 <HAL_TIM_PWM_Start+0x58>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	bf14      	ite	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	2300      	moveq	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	e008      	b.n	8005dfa <HAL_TIM_PWM_Start+0x6a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	bf14      	ite	ne
 8005df4:	2301      	movne	r3, #1
 8005df6:	2300      	moveq	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e07c      	b.n	8005efc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d104      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x82>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	e013      	b.n	8005e3a <HAL_TIM_PWM_Start+0xaa>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d104      	bne.n	8005e22 <HAL_TIM_PWM_Start+0x92>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e20:	e00b      	b.n	8005e3a <HAL_TIM_PWM_Start+0xaa>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d104      	bne.n	8005e32 <HAL_TIM_PWM_Start+0xa2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e30:	e003      	b.n	8005e3a <HAL_TIM_PWM_Start+0xaa>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fe10 	bl	8006a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a2d      	ldr	r2, [pc, #180]	; (8005f04 <HAL_TIM_PWM_Start+0x174>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_TIM_PWM_Start+0xcc>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a2c      	ldr	r2, [pc, #176]	; (8005f08 <HAL_TIM_PWM_Start+0x178>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d101      	bne.n	8005e60 <HAL_TIM_PWM_Start+0xd0>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_TIM_PWM_Start+0xd2>
 8005e60:	2300      	movs	r3, #0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a22      	ldr	r2, [pc, #136]	; (8005f04 <HAL_TIM_PWM_Start+0x174>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d022      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x136>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e88:	d01d      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x136>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1f      	ldr	r2, [pc, #124]	; (8005f0c <HAL_TIM_PWM_Start+0x17c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d018      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x136>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <HAL_TIM_PWM_Start+0x180>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d013      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x136>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <HAL_TIM_PWM_Start+0x184>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x136>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <HAL_TIM_PWM_Start+0x178>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x136>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <HAL_TIM_PWM_Start+0x188>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIM_PWM_Start+0x136>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <HAL_TIM_PWM_Start+0x18c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d111      	bne.n	8005eea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b06      	cmp	r3, #6
 8005ed6:	d010      	beq.n	8005efa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	e007      	b.n	8005efa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40010000 	.word	0x40010000
 8005f08:	40010400 	.word	0x40010400
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40001800 	.word	0x40001800

08005f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d122      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d11b      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0202 	mvn.w	r2, #2
 8005f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699b      	ldr	r3, [r3, #24]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa77 	bl	8006456 <HAL_TIM_IC_CaptureCallback>
 8005f68:	e005      	b.n	8005f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa69 	bl	8006442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fa7a 	bl	800646a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d122      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d11b      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0204 	mvn.w	r2, #4
 8005fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa4d 	bl	8006456 <HAL_TIM_IC_CaptureCallback>
 8005fbc:	e005      	b.n	8005fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa3f 	bl	8006442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fa50 	bl	800646a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d122      	bne.n	8006024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0308 	and.w	r3, r3, #8
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d11b      	bne.n	8006024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0208 	mvn.w	r2, #8
 8005ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fa23 	bl	8006456 <HAL_TIM_IC_CaptureCallback>
 8006010:	e005      	b.n	800601e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fa15 	bl	8006442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fa26 	bl	800646a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b10      	cmp	r3, #16
 8006030:	d122      	bne.n	8006078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b10      	cmp	r3, #16
 800603e:	d11b      	bne.n	8006078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0210 	mvn.w	r2, #16
 8006048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2208      	movs	r2, #8
 800604e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f9f9 	bl	8006456 <HAL_TIM_IC_CaptureCallback>
 8006064:	e005      	b.n	8006072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f9eb 	bl	8006442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f9fc 	bl	800646a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10e      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b01      	cmp	r3, #1
 8006092:	d107      	bne.n	80060a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0201 	mvn.w	r2, #1
 800609c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fb fa44 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ae:	2b80      	cmp	r3, #128	; 0x80
 80060b0:	d10e      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d107      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fdca 	bl	8006c64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	d10e      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d107      	bne.n	80060fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9c1 	bl	800647e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b20      	cmp	r3, #32
 8006108:	d10e      	bne.n	8006128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b20      	cmp	r3, #32
 8006116:	d107      	bne.n	8006128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f06f 0220 	mvn.w	r2, #32
 8006120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fd94 	bl	8006c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800614a:	2302      	movs	r3, #2
 800614c:	e0ae      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b0c      	cmp	r3, #12
 800615a:	f200 809f 	bhi.w	800629c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006199 	.word	0x08006199
 8006168:	0800629d 	.word	0x0800629d
 800616c:	0800629d 	.word	0x0800629d
 8006170:	0800629d 	.word	0x0800629d
 8006174:	080061d9 	.word	0x080061d9
 8006178:	0800629d 	.word	0x0800629d
 800617c:	0800629d 	.word	0x0800629d
 8006180:	0800629d 	.word	0x0800629d
 8006184:	0800621b 	.word	0x0800621b
 8006188:	0800629d 	.word	0x0800629d
 800618c:	0800629d 	.word	0x0800629d
 8006190:	0800629d 	.word	0x0800629d
 8006194:	0800625b 	.word	0x0800625b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 fa18 	bl	80065d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0208 	orr.w	r2, r2, #8
 80061b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0204 	bic.w	r2, r2, #4
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	619a      	str	r2, [r3, #24]
      break;
 80061d6:	e064      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fa68 	bl	80066b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6999      	ldr	r1, [r3, #24]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	619a      	str	r2, [r3, #24]
      break;
 8006218:	e043      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fabd 	bl	80067a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69da      	ldr	r2, [r3, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0208 	orr.w	r2, r2, #8
 8006234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0204 	bic.w	r2, r2, #4
 8006244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69d9      	ldr	r1, [r3, #28]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	61da      	str	r2, [r3, #28]
      break;
 8006258:	e023      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68b9      	ldr	r1, [r7, #8]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 fb11 	bl	8006888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	69d9      	ldr	r1, [r3, #28]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	021a      	lsls	r2, r3, #8
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	61da      	str	r2, [r3, #28]
      break;
 800629a:	e002      	b.n	80062a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	75fb      	strb	r3, [r7, #23]
      break;
 80062a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_TIM_ConfigClockSource+0x1c>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0b4      	b.n	800643a <HAL_TIM_ConfigClockSource+0x186>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006308:	d03e      	beq.n	8006388 <HAL_TIM_ConfigClockSource+0xd4>
 800630a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630e:	f200 8087 	bhi.w	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	f000 8086 	beq.w	8006426 <HAL_TIM_ConfigClockSource+0x172>
 800631a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631e:	d87f      	bhi.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006320:	2b70      	cmp	r3, #112	; 0x70
 8006322:	d01a      	beq.n	800635a <HAL_TIM_ConfigClockSource+0xa6>
 8006324:	2b70      	cmp	r3, #112	; 0x70
 8006326:	d87b      	bhi.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006328:	2b60      	cmp	r3, #96	; 0x60
 800632a:	d050      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x11a>
 800632c:	2b60      	cmp	r3, #96	; 0x60
 800632e:	d877      	bhi.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006330:	2b50      	cmp	r3, #80	; 0x50
 8006332:	d03c      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0xfa>
 8006334:	2b50      	cmp	r3, #80	; 0x50
 8006336:	d873      	bhi.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d058      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x13a>
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	d86f      	bhi.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006340:	2b30      	cmp	r3, #48	; 0x30
 8006342:	d064      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x15a>
 8006344:	2b30      	cmp	r3, #48	; 0x30
 8006346:	d86b      	bhi.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b20      	cmp	r3, #32
 800634a:	d060      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x15a>
 800634c:	2b20      	cmp	r3, #32
 800634e:	d867      	bhi.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d05c      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x15a>
 8006354:	2b10      	cmp	r3, #16
 8006356:	d05a      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x15a>
 8006358:	e062      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6899      	ldr	r1, [r3, #8]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f000 fb5d 	bl	8006a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800637c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	609a      	str	r2, [r3, #8]
      break;
 8006386:	e04f      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6818      	ldr	r0, [r3, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	6899      	ldr	r1, [r3, #8]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f000 fb46 	bl	8006a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063aa:	609a      	str	r2, [r3, #8]
      break;
 80063ac:	e03c      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6859      	ldr	r1, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	461a      	mov	r2, r3
 80063bc:	f000 faba 	bl	8006934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2150      	movs	r1, #80	; 0x50
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fb13 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 80063cc:	e02c      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6859      	ldr	r1, [r3, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	461a      	mov	r2, r3
 80063dc:	f000 fad9 	bl	8006992 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2160      	movs	r1, #96	; 0x60
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fb03 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 80063ec:	e01c      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6859      	ldr	r1, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	461a      	mov	r2, r3
 80063fc:	f000 fa9a 	bl	8006934 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2140      	movs	r1, #64	; 0x40
 8006406:	4618      	mov	r0, r3
 8006408:	f000 faf3 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 800640c:	e00c      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f000 faea 	bl	80069f2 <TIM_ITRx_SetConfig>
      break;
 800641e:	e003      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
      break;
 8006424:	e000      	b.n	8006428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800645e:	bf00      	nop
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a40      	ldr	r2, [pc, #256]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d013      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d00f      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3d      	ldr	r2, [pc, #244]	; (80065ac <TIM_Base_SetConfig+0x118>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3c      	ldr	r2, [pc, #240]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3b      	ldr	r2, [pc, #236]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a3a      	ldr	r2, [pc, #232]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d108      	bne.n	80064e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d02b      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d027      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2c      	ldr	r2, [pc, #176]	; (80065ac <TIM_Base_SetConfig+0x118>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d023      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <TIM_Base_SetConfig+0x11c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01f      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <TIM_Base_SetConfig+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01b      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d017      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <TIM_Base_SetConfig+0x128>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <TIM_Base_SetConfig+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a26      	ldr	r2, [pc, #152]	; (80065c4 <TIM_Base_SetConfig+0x130>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00b      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a25      	ldr	r2, [pc, #148]	; (80065c8 <TIM_Base_SetConfig+0x134>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a24      	ldr	r2, [pc, #144]	; (80065cc <TIM_Base_SetConfig+0x138>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <TIM_Base_SetConfig+0x13c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <TIM_Base_SetConfig+0x114>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0xf8>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <TIM_Base_SetConfig+0x124>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d103      	bne.n	8006594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	615a      	str	r2, [r3, #20]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40000c00 	.word	0x40000c00
 80065b8:	40010400 	.word	0x40010400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800
 80065c8:	40001800 	.word	0x40001800
 80065cc:	40001c00 	.word	0x40001c00
 80065d0:	40002000 	.word	0x40002000

080065d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f023 0201 	bic.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 0302 	bic.w	r3, r3, #2
 800661c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a20      	ldr	r2, [pc, #128]	; (80066ac <TIM_OC1_SetConfig+0xd8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d003      	beq.n	8006638 <TIM_OC1_SetConfig+0x64>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <TIM_OC1_SetConfig+0xdc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d10c      	bne.n	8006652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0308 	bic.w	r3, r3, #8
 800663e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 0304 	bic.w	r3, r3, #4
 8006650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a15      	ldr	r2, [pc, #84]	; (80066ac <TIM_OC1_SetConfig+0xd8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <TIM_OC1_SetConfig+0x8e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a14      	ldr	r2, [pc, #80]	; (80066b0 <TIM_OC1_SetConfig+0xdc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d111      	bne.n	8006686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	621a      	str	r2, [r3, #32]
}
 80066a0:	bf00      	nop
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40010400 	.word	0x40010400

080066b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f023 0210 	bic.w	r2, r3, #16
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0320 	bic.w	r3, r3, #32
 80066fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a22      	ldr	r2, [pc, #136]	; (8006798 <TIM_OC2_SetConfig+0xe4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_OC2_SetConfig+0x68>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <TIM_OC2_SetConfig+0xe8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d10d      	bne.n	8006738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a17      	ldr	r2, [pc, #92]	; (8006798 <TIM_OC2_SetConfig+0xe4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC2_SetConfig+0x94>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <TIM_OC2_SetConfig+0xe8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d113      	bne.n	8006770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800674e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40010400 	.word	0x40010400

080067a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	021b      	lsls	r3, r3, #8
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a21      	ldr	r2, [pc, #132]	; (8006880 <TIM_OC3_SetConfig+0xe0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_OC3_SetConfig+0x66>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a20      	ldr	r2, [pc, #128]	; (8006884 <TIM_OC3_SetConfig+0xe4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d10d      	bne.n	8006822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a16      	ldr	r2, [pc, #88]	; (8006880 <TIM_OC3_SetConfig+0xe0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC3_SetConfig+0x92>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <TIM_OC3_SetConfig+0xe4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d113      	bne.n	800685a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	621a      	str	r2, [r3, #32]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	40010000 	.word	0x40010000
 8006884:	40010400 	.word	0x40010400

08006888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	031b      	lsls	r3, r3, #12
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a12      	ldr	r2, [pc, #72]	; (800692c <TIM_OC4_SetConfig+0xa4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_OC4_SetConfig+0x68>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a11      	ldr	r2, [pc, #68]	; (8006930 <TIM_OC4_SetConfig+0xa8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d109      	bne.n	8006904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	019b      	lsls	r3, r3, #6
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4313      	orrs	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	621a      	str	r2, [r3, #32]
}
 800691e:	bf00      	nop
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010000 	.word	0x40010000
 8006930:	40010400 	.word	0x40010400

08006934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800695e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 030a 	bic.w	r3, r3, #10
 8006970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006992:	b480      	push	{r7}
 8006994:	b087      	sub	sp, #28
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	f023 0210 	bic.w	r2, r3, #16
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	031b      	lsls	r3, r3, #12
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b085      	sub	sp, #20
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f043 0307 	orr.w	r3, r3, #7
 8006a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	609a      	str	r2, [r3, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	021a      	lsls	r2, r3, #8
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	371c      	adds	r7, #28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	401a      	ands	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1a      	ldr	r2, [r3, #32]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 031f 	and.w	r3, r3, #31
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e05a      	b.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a21      	ldr	r2, [pc, #132]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d022      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b18:	d01d      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1d      	ldr	r2, [pc, #116]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d018      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a1b      	ldr	r2, [pc, #108]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d013      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1a      	ldr	r2, [pc, #104]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d009      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10c      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40010400 	.word	0x40010400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40001800 	.word	0x40001800

08006bac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e03d      	b.n	8006c44 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e03f      	b.n	8006d0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fa fdce 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2224      	movs	r2, #36	; 0x24
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f829 	bl	8006d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ce0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d18:	b0c0      	sub	sp, #256	; 0x100
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	ea40 0301 	orr.w	r3, r0, r1
 8006d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d6c:	f021 010c 	bic.w	r1, r1, #12
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8e:	6999      	ldr	r1, [r3, #24]
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	ea40 0301 	orr.w	r3, r0, r1
 8006d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	4b8f      	ldr	r3, [pc, #572]	; (8006fe0 <UART_SetConfig+0x2cc>)
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d005      	beq.n	8006db4 <UART_SetConfig+0xa0>
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b8d      	ldr	r3, [pc, #564]	; (8006fe4 <UART_SetConfig+0x2d0>)
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d104      	bne.n	8006dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006db4:	f7fd f884 	bl	8003ec0 <HAL_RCC_GetPCLK2Freq>
 8006db8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006dbc:	e003      	b.n	8006dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dbe:	f7fd f86b 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8006dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd0:	f040 810c 	bne.w	8006fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	1891      	adds	r1, r2, r2
 8006dec:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dee:	415b      	adcs	r3, r3
 8006df0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006df6:	4621      	mov	r1, r4
 8006df8:	eb12 0801 	adds.w	r8, r2, r1
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	eb43 0901 	adc.w	r9, r3, r1
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e16:	4690      	mov	r8, r2
 8006e18:	4699      	mov	r9, r3
 8006e1a:	4623      	mov	r3, r4
 8006e1c:	eb18 0303 	adds.w	r3, r8, r3
 8006e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e24:	462b      	mov	r3, r5
 8006e26:	eb49 0303 	adc.w	r3, r9, r3
 8006e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e42:	460b      	mov	r3, r1
 8006e44:	18db      	adds	r3, r3, r3
 8006e46:	653b      	str	r3, [r7, #80]	; 0x50
 8006e48:	4613      	mov	r3, r2
 8006e4a:	eb42 0303 	adc.w	r3, r2, r3
 8006e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e58:	f7f9 f9da 	bl	8000210 <__aeabi_uldivmod>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <UART_SetConfig+0x2d4>)
 8006e62:	fba3 2302 	umull	r2, r3, r3, r2
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	011c      	lsls	r4, r3, #4
 8006e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	464b      	mov	r3, r9
 8006e80:	1891      	adds	r1, r2, r2
 8006e82:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e84:	415b      	adcs	r3, r3
 8006e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e8c:	4641      	mov	r1, r8
 8006e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e92:	4649      	mov	r1, r9
 8006e94:	eb43 0b01 	adc.w	fp, r3, r1
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eac:	4692      	mov	sl, r2
 8006eae:	469b      	mov	fp, r3
 8006eb0:	4643      	mov	r3, r8
 8006eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8006eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eba:	464b      	mov	r3, r9
 8006ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ed8:	460b      	mov	r3, r1
 8006eda:	18db      	adds	r3, r3, r3
 8006edc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ede:	4613      	mov	r3, r2
 8006ee0:	eb42 0303 	adc.w	r3, r2, r3
 8006ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006eee:	f7f9 f98f 	bl	8000210 <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4b3b      	ldr	r3, [pc, #236]	; (8006fe8 <UART_SetConfig+0x2d4>)
 8006efa:	fba3 2301 	umull	r2, r3, r3, r1
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	2264      	movs	r2, #100	; 0x64
 8006f02:	fb02 f303 	mul.w	r3, r2, r3
 8006f06:	1acb      	subs	r3, r1, r3
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f0e:	4b36      	ldr	r3, [pc, #216]	; (8006fe8 <UART_SetConfig+0x2d4>)
 8006f10:	fba3 2302 	umull	r2, r3, r3, r2
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	005b      	lsls	r3, r3, #1
 8006f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f1c:	441c      	add	r4, r3
 8006f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f30:	4642      	mov	r2, r8
 8006f32:	464b      	mov	r3, r9
 8006f34:	1891      	adds	r1, r2, r2
 8006f36:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f38:	415b      	adcs	r3, r3
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f40:	4641      	mov	r1, r8
 8006f42:	1851      	adds	r1, r2, r1
 8006f44:	6339      	str	r1, [r7, #48]	; 0x30
 8006f46:	4649      	mov	r1, r9
 8006f48:	414b      	adcs	r3, r1
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	f04f 0300 	mov.w	r3, #0
 8006f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f58:	4659      	mov	r1, fp
 8006f5a:	00cb      	lsls	r3, r1, #3
 8006f5c:	4651      	mov	r1, sl
 8006f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f62:	4651      	mov	r1, sl
 8006f64:	00ca      	lsls	r2, r1, #3
 8006f66:	4610      	mov	r0, r2
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	189b      	adds	r3, r3, r2
 8006f70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f74:	464b      	mov	r3, r9
 8006f76:	460a      	mov	r2, r1
 8006f78:	eb42 0303 	adc.w	r3, r2, r3
 8006f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f94:	460b      	mov	r3, r1
 8006f96:	18db      	adds	r3, r3, r3
 8006f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	eb42 0303 	adc.w	r3, r2, r3
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006faa:	f7f9 f931 	bl	8000210 <__aeabi_uldivmod>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <UART_SetConfig+0x2d4>)
 8006fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	2164      	movs	r1, #100	; 0x64
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	3332      	adds	r3, #50	; 0x32
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <UART_SetConfig+0x2d4>)
 8006fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	f003 0207 	and.w	r2, r3, #7
 8006fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4422      	add	r2, r4
 8006fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fdc:	e105      	b.n	80071ea <UART_SetConfig+0x4d6>
 8006fde:	bf00      	nop
 8006fe0:	40011000 	.word	0x40011000
 8006fe4:	40011400 	.word	0x40011400
 8006fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ffe:	4642      	mov	r2, r8
 8007000:	464b      	mov	r3, r9
 8007002:	1891      	adds	r1, r2, r2
 8007004:	6239      	str	r1, [r7, #32]
 8007006:	415b      	adcs	r3, r3
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
 800700a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800700e:	4641      	mov	r1, r8
 8007010:	1854      	adds	r4, r2, r1
 8007012:	4649      	mov	r1, r9
 8007014:	eb43 0501 	adc.w	r5, r3, r1
 8007018:	f04f 0200 	mov.w	r2, #0
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	00eb      	lsls	r3, r5, #3
 8007022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007026:	00e2      	lsls	r2, r4, #3
 8007028:	4614      	mov	r4, r2
 800702a:	461d      	mov	r5, r3
 800702c:	4643      	mov	r3, r8
 800702e:	18e3      	adds	r3, r4, r3
 8007030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007034:	464b      	mov	r3, r9
 8007036:	eb45 0303 	adc.w	r3, r5, r3
 800703a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800704a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800704e:	f04f 0200 	mov.w	r2, #0
 8007052:	f04f 0300 	mov.w	r3, #0
 8007056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800705a:	4629      	mov	r1, r5
 800705c:	008b      	lsls	r3, r1, #2
 800705e:	4621      	mov	r1, r4
 8007060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007064:	4621      	mov	r1, r4
 8007066:	008a      	lsls	r2, r1, #2
 8007068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800706c:	f7f9 f8d0 	bl	8000210 <__aeabi_uldivmod>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4b60      	ldr	r3, [pc, #384]	; (80071f8 <UART_SetConfig+0x4e4>)
 8007076:	fba3 2302 	umull	r2, r3, r3, r2
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	011c      	lsls	r4, r3, #4
 800707e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007082:	2200      	movs	r2, #0
 8007084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007088:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800708c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	1891      	adds	r1, r2, r2
 8007096:	61b9      	str	r1, [r7, #24]
 8007098:	415b      	adcs	r3, r3
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070a0:	4641      	mov	r1, r8
 80070a2:	1851      	adds	r1, r2, r1
 80070a4:	6139      	str	r1, [r7, #16]
 80070a6:	4649      	mov	r1, r9
 80070a8:	414b      	adcs	r3, r1
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070b8:	4659      	mov	r1, fp
 80070ba:	00cb      	lsls	r3, r1, #3
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c2:	4651      	mov	r1, sl
 80070c4:	00ca      	lsls	r2, r1, #3
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	4642      	mov	r2, r8
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070d4:	464b      	mov	r3, r9
 80070d6:	460a      	mov	r2, r1
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070f8:	4649      	mov	r1, r9
 80070fa:	008b      	lsls	r3, r1, #2
 80070fc:	4641      	mov	r1, r8
 80070fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007102:	4641      	mov	r1, r8
 8007104:	008a      	lsls	r2, r1, #2
 8007106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800710a:	f7f9 f881 	bl	8000210 <__aeabi_uldivmod>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4b39      	ldr	r3, [pc, #228]	; (80071f8 <UART_SetConfig+0x4e4>)
 8007114:	fba3 1302 	umull	r1, r3, r3, r2
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	2164      	movs	r1, #100	; 0x64
 800711c:	fb01 f303 	mul.w	r3, r1, r3
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	3332      	adds	r3, #50	; 0x32
 8007126:	4a34      	ldr	r2, [pc, #208]	; (80071f8 <UART_SetConfig+0x4e4>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007132:	441c      	add	r4, r3
 8007134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007138:	2200      	movs	r2, #0
 800713a:	673b      	str	r3, [r7, #112]	; 0x70
 800713c:	677a      	str	r2, [r7, #116]	; 0x74
 800713e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007142:	4642      	mov	r2, r8
 8007144:	464b      	mov	r3, r9
 8007146:	1891      	adds	r1, r2, r2
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	415b      	adcs	r3, r3
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007152:	4641      	mov	r1, r8
 8007154:	1851      	adds	r1, r2, r1
 8007156:	6039      	str	r1, [r7, #0]
 8007158:	4649      	mov	r1, r9
 800715a:	414b      	adcs	r3, r1
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	f04f 0200 	mov.w	r2, #0
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800716a:	4659      	mov	r1, fp
 800716c:	00cb      	lsls	r3, r1, #3
 800716e:	4651      	mov	r1, sl
 8007170:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007174:	4651      	mov	r1, sl
 8007176:	00ca      	lsls	r2, r1, #3
 8007178:	4610      	mov	r0, r2
 800717a:	4619      	mov	r1, r3
 800717c:	4603      	mov	r3, r0
 800717e:	4642      	mov	r2, r8
 8007180:	189b      	adds	r3, r3, r2
 8007182:	66bb      	str	r3, [r7, #104]	; 0x68
 8007184:	464b      	mov	r3, r9
 8007186:	460a      	mov	r2, r1
 8007188:	eb42 0303 	adc.w	r3, r2, r3
 800718c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	663b      	str	r3, [r7, #96]	; 0x60
 8007198:	667a      	str	r2, [r7, #100]	; 0x64
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071a6:	4649      	mov	r1, r9
 80071a8:	008b      	lsls	r3, r1, #2
 80071aa:	4641      	mov	r1, r8
 80071ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071b0:	4641      	mov	r1, r8
 80071b2:	008a      	lsls	r2, r1, #2
 80071b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071b8:	f7f9 f82a 	bl	8000210 <__aeabi_uldivmod>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4b0d      	ldr	r3, [pc, #52]	; (80071f8 <UART_SetConfig+0x4e4>)
 80071c2:	fba3 1302 	umull	r1, r3, r3, r2
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	2164      	movs	r1, #100	; 0x64
 80071ca:	fb01 f303 	mul.w	r3, r1, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	3332      	adds	r3, #50	; 0x32
 80071d4:	4a08      	ldr	r2, [pc, #32]	; (80071f8 <UART_SetConfig+0x4e4>)
 80071d6:	fba2 2303 	umull	r2, r3, r2, r3
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	f003 020f 	and.w	r2, r3, #15
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4422      	add	r2, r4
 80071e8:	609a      	str	r2, [r3, #8]
}
 80071ea:	bf00      	nop
 80071ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071f0:	46bd      	mov	sp, r7
 80071f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071f6:	bf00      	nop
 80071f8:	51eb851f 	.word	0x51eb851f

080071fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f103 0208 	add.w	r2, r3, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f04f 32ff 	mov.w	r2, #4294967295
 8007214:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f103 0208 	add.w	r2, r3, #8
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f103 0208 	add.w	r2, r3, #8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	601a      	str	r2, [r3, #0]
}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d103      	bne.n	80072be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e00c      	b.n	80072d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3308      	adds	r3, #8
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e002      	b.n	80072cc <vListInsert+0x2e>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d2f6      	bcs.n	80072c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
}
 8007304:	bf00      	nop
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6892      	ldr	r2, [r2, #8]
 8007326:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6852      	ldr	r2, [r2, #4]
 8007330:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	d103      	bne.n	8007344 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	1e5a      	subs	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800738e:	f001 fdc9 	bl	8008f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	441a      	add	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073be:	3b01      	subs	r3, #1
 80073c0:	68f9      	ldr	r1, [r7, #12]
 80073c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	441a      	add	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	22ff      	movs	r2, #255	; 0xff
 80073d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	22ff      	movs	r2, #255	; 0xff
 80073da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d114      	bne.n	800740e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d01a      	beq.n	8007422 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3310      	adds	r3, #16
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 f885 	bl	8008500 <xTaskRemoveFromEventList>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d012      	beq.n	8007422 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073fc:	4b0c      	ldr	r3, [pc, #48]	; (8007430 <xQueueGenericReset+0xcc>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	e009      	b.n	8007422 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3310      	adds	r3, #16
 8007412:	4618      	mov	r0, r3
 8007414:	f7ff fef2 	bl	80071fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3324      	adds	r3, #36	; 0x24
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff feed 	bl	80071fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007422:	f001 fdaf 	bl	8008f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007426:	2301      	movs	r3, #1
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	e000ed04 	.word	0xe000ed04

08007434 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4613      	mov	r3, r2
 8007440:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	613b      	str	r3, [r7, #16]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	fb02 f303 	mul.w	r3, r2, r3
 8007466:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	3348      	adds	r3, #72	; 0x48
 800746c:	4618      	mov	r0, r3
 800746e:	f001 fe3b 	bl	80090e8 <pvPortMalloc>
 8007472:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d011      	beq.n	800749e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	3348      	adds	r3, #72	; 0x48
 8007482:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800748c:	79fa      	ldrb	r2, [r7, #7]
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	4613      	mov	r3, r2
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f805 	bl	80074a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800749e:	69bb      	ldr	r3, [r7, #24]
	}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e002      	b.n	80074ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074d6:	2101      	movs	r1, #1
 80074d8:	69b8      	ldr	r0, [r7, #24]
 80074da:	f7ff ff43 	bl	8007364 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00e      	beq.n	8007512 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007506:	2300      	movs	r3, #0
 8007508:	2200      	movs	r2, #0
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f81d 	bl	800754c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800751a:	b580      	push	{r7, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	4603      	mov	r3, r0
 8007522:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007524:	2301      	movs	r3, #1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	2300      	movs	r3, #0
 800752a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	461a      	mov	r2, r3
 8007530:	6939      	ldr	r1, [r7, #16]
 8007532:	6978      	ldr	r0, [r7, #20]
 8007534:	f7ff ff7e 	bl	8007434 <xQueueGenericCreate>
 8007538:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff ffd3 	bl	80074e6 <prvInitialiseMutex>

		return xNewQueue;
 8007540:	68fb      	ldr	r3, [r7, #12]
	}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08e      	sub	sp, #56	; 0x38
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800755a:	2300      	movs	r3, #0
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueGenericSend+0x32>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <xQueueGenericSend+0x40>
 8007584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <xQueueGenericSend+0x44>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <xQueueGenericSend+0x46>
 8007590:	2300      	movs	r3, #0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10a      	bne.n	80075ac <xQueueGenericSend+0x60>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x6e>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <xQueueGenericSend+0x72>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <xQueueGenericSend+0x74>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <xQueueGenericSend+0x8e>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	623b      	str	r3, [r7, #32]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075da:	f001 f951 	bl	8008880 <xTaskGetSchedulerState>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <xQueueGenericSend+0x9e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <xQueueGenericSend+0xa2>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xQueueGenericSend+0xa4>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xQueueGenericSend+0xbe>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	61fb      	str	r3, [r7, #28]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800760a:	f001 fc8b 	bl	8008f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <xQueueGenericSend+0xd4>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d129      	bne.n	8007674 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007626:	f000 f9b3 	bl	8007990 <prvCopyDataToQueue>
 800762a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d010      	beq.n	8007656 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	3324      	adds	r3, #36	; 0x24
 8007638:	4618      	mov	r0, r3
 800763a:	f000 ff61 	bl	8008500 <xTaskRemoveFromEventList>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d013      	beq.n	800766c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007644:	4b3f      	ldr	r3, [pc, #252]	; (8007744 <xQueueGenericSend+0x1f8>)
 8007646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	e00a      	b.n	800766c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800765c:	4b39      	ldr	r3, [pc, #228]	; (8007744 <xQueueGenericSend+0x1f8>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800766c:	f001 fc8a 	bl	8008f84 <vPortExitCritical>
				return pdPASS;
 8007670:	2301      	movs	r3, #1
 8007672:	e063      	b.n	800773c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800767a:	f001 fc83 	bl	8008f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800767e:	2300      	movs	r3, #0
 8007680:	e05c      	b.n	800773c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	2b00      	cmp	r3, #0
 8007686:	d106      	bne.n	8007696 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007688:	f107 0314 	add.w	r3, r7, #20
 800768c:	4618      	mov	r0, r3
 800768e:	f000 ff99 	bl	80085c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007692:	2301      	movs	r3, #1
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007696:	f001 fc75 	bl	8008f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800769a:	f000 fd29 	bl	80080f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800769e:	f001 fc41 	bl	8008f24 <vPortEnterCritical>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d103      	bne.n	80076b8 <xQueueGenericSend+0x16c>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076be:	b25b      	sxtb	r3, r3
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d103      	bne.n	80076ce <xQueueGenericSend+0x182>
 80076c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076ce:	f001 fc59 	bl	8008f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d2:	1d3a      	adds	r2, r7, #4
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	4611      	mov	r1, r2
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 ff88 	bl	80085f0 <xTaskCheckForTimeOut>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d124      	bne.n	8007730 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076e8:	f000 fa24 	bl	8007b34 <prvIsQueueFull>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d018      	beq.n	8007724 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	3310      	adds	r3, #16
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fedc 	bl	80084b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007702:	f000 f9af 	bl	8007a64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007706:	f000 fd01 	bl	800810c <xTaskResumeAll>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	f47f af7c 	bne.w	800760a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007712:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <xQueueGenericSend+0x1f8>)
 8007714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	e772      	b.n	800760a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007726:	f000 f99d 	bl	8007a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800772a:	f000 fcef 	bl	800810c <xTaskResumeAll>
 800772e:	e76c      	b.n	800760a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007732:	f000 f997 	bl	8007a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007736:	f000 fce9 	bl	800810c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800773a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800773c:	4618      	mov	r0, r3
 800773e:	3738      	adds	r7, #56	; 0x38
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08e      	sub	sp, #56	; 0x38
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800775a:	2300      	movs	r3, #0
 800775c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	623b      	str	r3, [r7, #32]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800777a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	61fb      	str	r3, [r7, #28]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007798:	f001 f872 	bl	8008880 <xTaskGetSchedulerState>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <xQueueSemaphoreTake+0x60>
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <xQueueSemaphoreTake+0x64>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <xQueueSemaphoreTake+0x66>
 80077ac:	2300      	movs	r3, #0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	61bb      	str	r3, [r7, #24]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077c8:	f001 fbac 	bl	8008f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d024      	beq.n	8007822 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	1e5a      	subs	r2, r3, #1
 80077dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077e8:	f001 f9f2 	bl	8008bd0 <pvTaskIncrementMutexHeldCount>
 80077ec:	4602      	mov	r2, r0
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00f      	beq.n	800781a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	3310      	adds	r3, #16
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fe7e 	bl	8008500 <xTaskRemoveFromEventList>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800780a:	4b54      	ldr	r3, [pc, #336]	; (800795c <xQueueSemaphoreTake+0x214>)
 800780c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800781a:	f001 fbb3 	bl	8008f84 <vPortExitCritical>
				return pdPASS;
 800781e:	2301      	movs	r3, #1
 8007820:	e097      	b.n	8007952 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d111      	bne.n	800784c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007844:	f001 fb9e 	bl	8008f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007848:	2300      	movs	r3, #0
 800784a:	e082      	b.n	8007952 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800784c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4618      	mov	r0, r3
 8007858:	f000 feb4 	bl	80085c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800785c:	2301      	movs	r3, #1
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007860:	f001 fb90 	bl	8008f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007864:	f000 fc44 	bl	80080f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007868:	f001 fb5c 	bl	8008f24 <vPortEnterCritical>
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007872:	b25b      	sxtb	r3, r3
 8007874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007878:	d103      	bne.n	8007882 <xQueueSemaphoreTake+0x13a>
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007888:	b25b      	sxtb	r3, r3
 800788a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788e:	d103      	bne.n	8007898 <xQueueSemaphoreTake+0x150>
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007898:	f001 fb74 	bl	8008f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800789c:	463a      	mov	r2, r7
 800789e:	f107 030c 	add.w	r3, r7, #12
 80078a2:	4611      	mov	r1, r2
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fea3 	bl	80085f0 <xTaskCheckForTimeOut>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d132      	bne.n	8007916 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078b2:	f000 f929 	bl	8007b08 <prvIsQueueEmpty>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d026      	beq.n	800790a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80078c4:	f001 fb2e 	bl	8008f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fff5 	bl	80088bc <xTaskPriorityInherit>
 80078d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078d4:	f001 fb56 	bl	8008f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078da:	3324      	adds	r3, #36	; 0x24
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	4611      	mov	r1, r2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fde9 	bl	80084b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078e8:	f000 f8bc 	bl	8007a64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078ec:	f000 fc0e 	bl	800810c <xTaskResumeAll>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f47f af68 	bne.w	80077c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80078f8:	4b18      	ldr	r3, [pc, #96]	; (800795c <xQueueSemaphoreTake+0x214>)
 80078fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	e75e      	b.n	80077c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800790a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800790c:	f000 f8aa 	bl	8007a64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007910:	f000 fbfc 	bl	800810c <xTaskResumeAll>
 8007914:	e758      	b.n	80077c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007918:	f000 f8a4 	bl	8007a64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791c:	f000 fbf6 	bl	800810c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007922:	f000 f8f1 	bl	8007b08 <prvIsQueueEmpty>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	f43f af4d 	beq.w	80077c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00d      	beq.n	8007950 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007934:	f001 faf6 	bl	8008f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007938:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800793a:	f000 f811 	bl	8007960 <prvGetDisinheritPriorityAfterTimeout>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f001 f8b4 	bl	8008ab4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800794c:	f001 fb1a 	bl	8008f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007950:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007952:	4618      	mov	r0, r3
 8007954:	3738      	adds	r7, #56	; 0x38
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f1c3 0307 	rsb	r3, r3, #7
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	e001      	b.n	8007982 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007982:	68fb      	ldr	r3, [r7, #12]
	}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10d      	bne.n	80079ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d14d      	bne.n	8007a52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fff4 	bl	80089a8 <xTaskPriorityDisinherit>
 80079c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	609a      	str	r2, [r3, #8]
 80079c8:	e043      	b.n	8007a52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d119      	bne.n	8007a04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6858      	ldr	r0, [r3, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	461a      	mov	r2, r3
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	f001 fd94 	bl	8009508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	441a      	add	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d32b      	bcc.n	8007a52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	e026      	b.n	8007a52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68d8      	ldr	r0, [r3, #12]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	f001 fd7a 	bl	8009508 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	425b      	negs	r3, r3
 8007a1e:	441a      	add	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d207      	bcs.n	8007a40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689a      	ldr	r2, [r3, #8]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a38:	425b      	negs	r3, r3
 8007a3a:	441a      	add	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d105      	bne.n	8007a52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a5a:	697b      	ldr	r3, [r7, #20]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a6c:	f001 fa5a 	bl	8008f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a78:	e011      	b.n	8007a9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d012      	beq.n	8007aa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3324      	adds	r3, #36	; 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fd3a 	bl	8008500 <xTaskRemoveFromEventList>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a92:	f000 fe0f 	bl	80086b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	dce9      	bgt.n	8007a7a <prvUnlockQueue+0x16>
 8007aa6:	e000      	b.n	8007aaa <prvUnlockQueue+0x46>
					break;
 8007aa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ab2:	f001 fa67 	bl	8008f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ab6:	f001 fa35 	bl	8008f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ac2:	e011      	b.n	8007ae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d012      	beq.n	8007af2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3310      	adds	r3, #16
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fd15 	bl	8008500 <xTaskRemoveFromEventList>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007adc:	f000 fdea 	bl	80086b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	dce9      	bgt.n	8007ac4 <prvUnlockQueue+0x60>
 8007af0:	e000      	b.n	8007af4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007af2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	22ff      	movs	r2, #255	; 0xff
 8007af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007afc:	f001 fa42 	bl	8008f84 <vPortExitCritical>
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b10:	f001 fa08 	bl	8008f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e001      	b.n	8007b26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b26:	f001 fa2d 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b3c:	f001 f9f2 	bl	8008f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d102      	bne.n	8007b52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	e001      	b.n	8007b56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b56:	f001 fa15 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08e      	sub	sp, #56	; 0x38
 8007b68:	af04      	add	r7, sp, #16
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	623b      	str	r3, [r7, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xTaskCreateStatic+0x46>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	61fb      	str	r3, [r7, #28]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007baa:	23b4      	movs	r3, #180	; 0xb4
 8007bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2bb4      	cmp	r3, #180	; 0xb4
 8007bb2:	d00a      	beq.n	8007bca <xTaskCreateStatic+0x66>
	__asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	61bb      	str	r3, [r7, #24]
}
 8007bc6:	bf00      	nop
 8007bc8:	e7fe      	b.n	8007bc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01e      	beq.n	8007c10 <xTaskCreateStatic+0xac>
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01b      	beq.n	8007c10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	2202      	movs	r2, #2
 8007be6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bea:	2300      	movs	r3, #0
 8007bec:	9303      	str	r3, [sp, #12]
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	9302      	str	r3, [sp, #8]
 8007bf2:	f107 0314 	add.w	r3, r7, #20
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 f850 	bl	8007ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c0a:	f000 f8eb 	bl	8007de4 <prvAddNewTaskToReadyList>
 8007c0e:	e001      	b.n	8007c14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c14:	697b      	ldr	r3, [r7, #20]
	}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3728      	adds	r7, #40	; 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b08c      	sub	sp, #48	; 0x30
 8007c22:	af04      	add	r7, sp, #16
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fa58 	bl	80090e8 <pvPortMalloc>
 8007c38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00e      	beq.n	8007c5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c40:	20b4      	movs	r0, #180	; 0xb4
 8007c42:	f001 fa51 	bl	80090e8 <pvPortMalloc>
 8007c46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
 8007c54:	e005      	b.n	8007c62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c56:	6978      	ldr	r0, [r7, #20]
 8007c58:	f001 fb12 	bl	8009280 <vPortFree>
 8007c5c:	e001      	b.n	8007c62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d017      	beq.n	8007c98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c70:	88fa      	ldrh	r2, [r7, #6]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	9302      	str	r3, [sp, #8]
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f80e 	bl	8007ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c8c:	69f8      	ldr	r0, [r7, #28]
 8007c8e:	f000 f8a9 	bl	8007de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c92:	2301      	movs	r3, #1
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	e002      	b.n	8007c9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c98:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	f003 0307 	and.w	r3, r3, #7
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	617b      	str	r3, [r7, #20]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01f      	beq.n	8007d36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
 8007cfa:	e012      	b.n	8007d22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	4413      	add	r3, r2
 8007d02:	7819      	ldrb	r1, [r3, #0]
 8007d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	3334      	adds	r3, #52	; 0x34
 8007d0c:	460a      	mov	r2, r1
 8007d0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d006      	beq.n	8007d2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	61fb      	str	r3, [r7, #28]
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	2b0f      	cmp	r3, #15
 8007d26:	d9e9      	bls.n	8007cfc <prvInitialiseNewTask+0x54>
 8007d28:	e000      	b.n	8007d2c <prvInitialiseNewTask+0x84>
			{
				break;
 8007d2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d34:	e003      	b.n	8007d3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	2b06      	cmp	r3, #6
 8007d42:	d901      	bls.n	8007d48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d44:	2306      	movs	r3, #6
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d56:	2200      	movs	r2, #0
 8007d58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fa6c 	bl	800723c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	3318      	adds	r3, #24
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7ff fa67 	bl	800723c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	f1c3 0207 	rsb	r2, r3, #7
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	334c      	adds	r3, #76	; 0x4c
 8007d98:	2260      	movs	r2, #96	; 0x60
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f001 fbc1 	bl	8009524 <memset>
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <prvInitialiseNewTask+0x130>)
 8007da6:	651a      	str	r2, [r3, #80]	; 0x50
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	4a0c      	ldr	r2, [pc, #48]	; (8007ddc <prvInitialiseNewTask+0x134>)
 8007dac:	655a      	str	r2, [r3, #84]	; 0x54
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	4a0b      	ldr	r2, [pc, #44]	; (8007de0 <prvInitialiseNewTask+0x138>)
 8007db2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	68f9      	ldr	r1, [r7, #12]
 8007db8:	69b8      	ldr	r0, [r7, #24]
 8007dba:	f000 ff83 	bl	8008cc4 <pxPortInitialiseStack>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dd0:	bf00      	nop
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	08009760 	.word	0x08009760
 8007ddc:	08009780 	.word	0x08009780
 8007de0:	08009740 	.word	0x08009740

08007de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dec:	f001 f89a 	bl	8008f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007df0:	4b2a      	ldr	r3, [pc, #168]	; (8007e9c <prvAddNewTaskToReadyList+0xb8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	4a29      	ldr	r2, [pc, #164]	; (8007e9c <prvAddNewTaskToReadyList+0xb8>)
 8007df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dfa:	4b29      	ldr	r3, [pc, #164]	; (8007ea0 <prvAddNewTaskToReadyList+0xbc>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d109      	bne.n	8007e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e02:	4a27      	ldr	r2, [pc, #156]	; (8007ea0 <prvAddNewTaskToReadyList+0xbc>)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e08:	4b24      	ldr	r3, [pc, #144]	; (8007e9c <prvAddNewTaskToReadyList+0xb8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d110      	bne.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e10:	f000 fc74 	bl	80086fc <prvInitialiseTaskLists>
 8007e14:	e00d      	b.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e16:	4b23      	ldr	r3, [pc, #140]	; (8007ea4 <prvAddNewTaskToReadyList+0xc0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e1e:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <prvAddNewTaskToReadyList+0xbc>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d802      	bhi.n	8007e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e2c:	4a1c      	ldr	r2, [pc, #112]	; (8007ea0 <prvAddNewTaskToReadyList+0xbc>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e32:	4b1d      	ldr	r3, [pc, #116]	; (8007ea8 <prvAddNewTaskToReadyList+0xc4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3301      	adds	r3, #1
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <prvAddNewTaskToReadyList+0xc4>)
 8007e3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	2201      	movs	r2, #1
 8007e42:	409a      	lsls	r2, r3
 8007e44:	4b19      	ldr	r3, [pc, #100]	; (8007eac <prvAddNewTaskToReadyList+0xc8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	4a18      	ldr	r2, [pc, #96]	; (8007eac <prvAddNewTaskToReadyList+0xc8>)
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <prvAddNewTaskToReadyList+0xcc>)
 8007e5c:	441a      	add	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7ff f9f6 	bl	8007256 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e6a:	f001 f88b 	bl	8008f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <prvAddNewTaskToReadyList+0xc0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00e      	beq.n	8007e94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <prvAddNewTaskToReadyList+0xbc>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d207      	bcs.n	8007e94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e84:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <prvAddNewTaskToReadyList+0xd0>)
 8007e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	200006cc 	.word	0x200006cc
 8007ea0:	200005cc 	.word	0x200005cc
 8007ea4:	200006d8 	.word	0x200006d8
 8007ea8:	200006e8 	.word	0x200006e8
 8007eac:	200006d4 	.word	0x200006d4
 8007eb0:	200005d0 	.word	0x200005d0
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	; 0x28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	617b      	str	r3, [r7, #20]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <vTaskDelayUntil+0x46>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	613b      	str	r3, [r7, #16]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007efe:	4b2a      	ldr	r3, [pc, #168]	; (8007fa8 <vTaskDelayUntil+0xf0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <vTaskDelayUntil+0x64>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60fb      	str	r3, [r7, #12]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007f1c:	f000 f8e8 	bl	80080f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f20:	4b22      	ldr	r3, [pc, #136]	; (8007fac <vTaskDelayUntil+0xf4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a3a      	ldr	r2, [r7, #32]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d20b      	bcs.n	8007f52 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d211      	bcs.n	8007f68 <vTaskDelayUntil+0xb0>
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d90d      	bls.n	8007f68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f50:	e00a      	b.n	8007f68 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d303      	bcc.n	8007f64 <vTaskDelayUntil+0xac>
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d901      	bls.n	8007f68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fe3b 	bl	8008bf8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f82:	f000 f8c3 	bl	800810c <xTaskResumeAll>
 8007f86:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d107      	bne.n	8007f9e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <vTaskDelayUntil+0xf8>)
 8007f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f9e:	bf00      	nop
 8007fa0:	3728      	adds	r7, #40	; 0x28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	200006f4 	.word	0x200006f4
 8007fac:	200006d0 	.word	0x200006d0
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d017      	beq.n	8007ff6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fc6:	4b13      	ldr	r3, [pc, #76]	; (8008014 <vTaskDelay+0x60>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <vTaskDelay+0x30>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60bb      	str	r3, [r7, #8]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007fe4:	f000 f884 	bl	80080f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fe04 	bl	8008bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ff0:	f000 f88c 	bl	800810c <xTaskResumeAll>
 8007ff4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d107      	bne.n	800800c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007ffc:	4b06      	ldr	r3, [pc, #24]	; (8008018 <vTaskDelay+0x64>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	200006f4 	.word	0x200006f4
 8008018:	e000ed04 	.word	0xe000ed04

0800801c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800802a:	463a      	mov	r2, r7
 800802c:	1d39      	adds	r1, r7, #4
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	4618      	mov	r0, r3
 8008034:	f7f8 fe7c 	bl	8000d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	9202      	str	r2, [sp, #8]
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	2300      	movs	r3, #0
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	2300      	movs	r3, #0
 8008048:	460a      	mov	r2, r1
 800804a:	4921      	ldr	r1, [pc, #132]	; (80080d0 <vTaskStartScheduler+0xb4>)
 800804c:	4821      	ldr	r0, [pc, #132]	; (80080d4 <vTaskStartScheduler+0xb8>)
 800804e:	f7ff fd89 	bl	8007b64 <xTaskCreateStatic>
 8008052:	4603      	mov	r3, r0
 8008054:	4a20      	ldr	r2, [pc, #128]	; (80080d8 <vTaskStartScheduler+0xbc>)
 8008056:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008058:	4b1f      	ldr	r3, [pc, #124]	; (80080d8 <vTaskStartScheduler+0xbc>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008060:	2301      	movs	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	e001      	b.n	800806a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008066:	2300      	movs	r3, #0
 8008068:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d11b      	bne.n	80080a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	613b      	str	r3, [r7, #16]
}
 8008082:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008084:	4b15      	ldr	r3, [pc, #84]	; (80080dc <vTaskStartScheduler+0xc0>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	334c      	adds	r3, #76	; 0x4c
 800808a:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <vTaskStartScheduler+0xc4>)
 800808c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800808e:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <vTaskStartScheduler+0xc8>)
 8008090:	f04f 32ff 	mov.w	r2, #4294967295
 8008094:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008096:	4b14      	ldr	r3, [pc, #80]	; (80080e8 <vTaskStartScheduler+0xcc>)
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800809c:	4b13      	ldr	r3, [pc, #76]	; (80080ec <vTaskStartScheduler+0xd0>)
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080a2:	f000 fe9d 	bl	8008de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080a6:	e00e      	b.n	80080c6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d10a      	bne.n	80080c6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60fb      	str	r3, [r7, #12]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <vTaskStartScheduler+0xa8>
}
 80080c6:	bf00      	nop
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	08009720 	.word	0x08009720
 80080d4:	080086cd 	.word	0x080086cd
 80080d8:	200006f0 	.word	0x200006f0
 80080dc:	200005cc 	.word	0x200005cc
 80080e0:	2000001c 	.word	0x2000001c
 80080e4:	200006ec 	.word	0x200006ec
 80080e8:	200006d8 	.word	0x200006d8
 80080ec:	200006d0 	.word	0x200006d0

080080f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080f4:	4b04      	ldr	r3, [pc, #16]	; (8008108 <vTaskSuspendAll+0x18>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	4a03      	ldr	r2, [pc, #12]	; (8008108 <vTaskSuspendAll+0x18>)
 80080fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080fe:	bf00      	nop
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	200006f4 	.word	0x200006f4

0800810c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008116:	2300      	movs	r3, #0
 8008118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800811a:	4b41      	ldr	r3, [pc, #260]	; (8008220 <xTaskResumeAll+0x114>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <xTaskResumeAll+0x2c>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	603b      	str	r3, [r7, #0]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008138:	f000 fef4 	bl	8008f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800813c:	4b38      	ldr	r3, [pc, #224]	; (8008220 <xTaskResumeAll+0x114>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3b01      	subs	r3, #1
 8008142:	4a37      	ldr	r2, [pc, #220]	; (8008220 <xTaskResumeAll+0x114>)
 8008144:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008146:	4b36      	ldr	r3, [pc, #216]	; (8008220 <xTaskResumeAll+0x114>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d161      	bne.n	8008212 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800814e:	4b35      	ldr	r3, [pc, #212]	; (8008224 <xTaskResumeAll+0x118>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d05d      	beq.n	8008212 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008156:	e02e      	b.n	80081b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008158:	4b33      	ldr	r3, [pc, #204]	; (8008228 <xTaskResumeAll+0x11c>)
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3318      	adds	r3, #24
 8008164:	4618      	mov	r0, r3
 8008166:	f7ff f8d3 	bl	8007310 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3304      	adds	r3, #4
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff f8ce 	bl	8007310 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	2201      	movs	r2, #1
 800817a:	409a      	lsls	r2, r3
 800817c:	4b2b      	ldr	r3, [pc, #172]	; (800822c <xTaskResumeAll+0x120>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4313      	orrs	r3, r2
 8008182:	4a2a      	ldr	r2, [pc, #168]	; (800822c <xTaskResumeAll+0x120>)
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4a27      	ldr	r2, [pc, #156]	; (8008230 <xTaskResumeAll+0x124>)
 8008194:	441a      	add	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3304      	adds	r3, #4
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f7ff f85a 	bl	8007256 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a6:	4b23      	ldr	r3, [pc, #140]	; (8008234 <xTaskResumeAll+0x128>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d302      	bcc.n	80081b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80081b0:	4b21      	ldr	r3, [pc, #132]	; (8008238 <xTaskResumeAll+0x12c>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081b6:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <xTaskResumeAll+0x11c>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1cc      	bne.n	8008158 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081c4:	f000 fb3c 	bl	8008840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081c8:	4b1c      	ldr	r3, [pc, #112]	; (800823c <xTaskResumeAll+0x130>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d010      	beq.n	80081f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081d4:	f000 f846 	bl	8008264 <xTaskIncrementTick>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d002      	beq.n	80081e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <xTaskResumeAll+0x12c>)
 80081e0:	2201      	movs	r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f1      	bne.n	80081d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80081f0:	4b12      	ldr	r3, [pc, #72]	; (800823c <xTaskResumeAll+0x130>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081f6:	4b10      	ldr	r3, [pc, #64]	; (8008238 <xTaskResumeAll+0x12c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d009      	beq.n	8008212 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081fe:	2301      	movs	r3, #1
 8008200:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008202:	4b0f      	ldr	r3, [pc, #60]	; (8008240 <xTaskResumeAll+0x134>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008212:	f000 feb7 	bl	8008f84 <vPortExitCritical>

	return xAlreadyYielded;
 8008216:	68bb      	ldr	r3, [r7, #8]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	200006f4 	.word	0x200006f4
 8008224:	200006cc 	.word	0x200006cc
 8008228:	2000068c 	.word	0x2000068c
 800822c:	200006d4 	.word	0x200006d4
 8008230:	200005d0 	.word	0x200005d0
 8008234:	200005cc 	.word	0x200005cc
 8008238:	200006e0 	.word	0x200006e0
 800823c:	200006dc 	.word	0x200006dc
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <xTaskGetTickCount+0x1c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008250:	687b      	ldr	r3, [r7, #4]
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	200006d0 	.word	0x200006d0

08008264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800826a:	2300      	movs	r3, #0
 800826c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800826e:	4b4e      	ldr	r3, [pc, #312]	; (80083a8 <xTaskIncrementTick+0x144>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f040 808e 	bne.w	8008394 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008278:	4b4c      	ldr	r3, [pc, #304]	; (80083ac <xTaskIncrementTick+0x148>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3301      	adds	r3, #1
 800827e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008280:	4a4a      	ldr	r2, [pc, #296]	; (80083ac <xTaskIncrementTick+0x148>)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d120      	bne.n	80082ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800828c:	4b48      	ldr	r3, [pc, #288]	; (80083b0 <xTaskIncrementTick+0x14c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <xTaskIncrementTick+0x48>
	__asm volatile
 8008296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	603b      	str	r3, [r7, #0]
}
 80082a8:	bf00      	nop
 80082aa:	e7fe      	b.n	80082aa <xTaskIncrementTick+0x46>
 80082ac:	4b40      	ldr	r3, [pc, #256]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	4b40      	ldr	r3, [pc, #256]	; (80083b4 <xTaskIncrementTick+0x150>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a3e      	ldr	r2, [pc, #248]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	4a3e      	ldr	r2, [pc, #248]	; (80083b4 <xTaskIncrementTick+0x150>)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	4b3d      	ldr	r3, [pc, #244]	; (80083b8 <xTaskIncrementTick+0x154>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	4a3c      	ldr	r2, [pc, #240]	; (80083b8 <xTaskIncrementTick+0x154>)
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	f000 fab9 	bl	8008840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082ce:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <xTaskIncrementTick+0x158>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d348      	bcc.n	800836a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d8:	4b35      	ldr	r3, [pc, #212]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d104      	bne.n	80082ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <xTaskIncrementTick+0x158>)
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295
 80082e8:	601a      	str	r2, [r3, #0]
					break;
 80082ea:	e03e      	b.n	800836a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ec:	4b30      	ldr	r3, [pc, #192]	; (80083b0 <xTaskIncrementTick+0x14c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d203      	bcs.n	800830c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008304:	4a2d      	ldr	r2, [pc, #180]	; (80083bc <xTaskIncrementTick+0x158>)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800830a:	e02e      	b.n	800836a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	3304      	adds	r3, #4
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe fffd 	bl	8007310 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	3318      	adds	r3, #24
 8008322:	4618      	mov	r0, r3
 8008324:	f7fe fff4 	bl	8007310 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	2201      	movs	r2, #1
 800832e:	409a      	lsls	r2, r3
 8008330:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <xTaskIncrementTick+0x15c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4313      	orrs	r3, r2
 8008336:	4a22      	ldr	r2, [pc, #136]	; (80083c0 <xTaskIncrementTick+0x15c>)
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4a1f      	ldr	r2, [pc, #124]	; (80083c4 <xTaskIncrementTick+0x160>)
 8008348:	441a      	add	r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fe ff80 	bl	8007256 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835a:	4b1b      	ldr	r3, [pc, #108]	; (80083c8 <xTaskIncrementTick+0x164>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008360:	429a      	cmp	r2, r3
 8008362:	d3b9      	bcc.n	80082d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008368:	e7b6      	b.n	80082d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800836a:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <xTaskIncrementTick+0x164>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008370:	4914      	ldr	r1, [pc, #80]	; (80083c4 <xTaskIncrementTick+0x160>)
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d901      	bls.n	8008386 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008382:	2301      	movs	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008386:	4b11      	ldr	r3, [pc, #68]	; (80083cc <xTaskIncrementTick+0x168>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800838e:	2301      	movs	r3, #1
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	e004      	b.n	800839e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <xTaskIncrementTick+0x16c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3301      	adds	r3, #1
 800839a:	4a0d      	ldr	r2, [pc, #52]	; (80083d0 <xTaskIncrementTick+0x16c>)
 800839c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800839e:	697b      	ldr	r3, [r7, #20]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200006f4 	.word	0x200006f4
 80083ac:	200006d0 	.word	0x200006d0
 80083b0:	20000684 	.word	0x20000684
 80083b4:	20000688 	.word	0x20000688
 80083b8:	200006e4 	.word	0x200006e4
 80083bc:	200006ec 	.word	0x200006ec
 80083c0:	200006d4 	.word	0x200006d4
 80083c4:	200005d0 	.word	0x200005d0
 80083c8:	200005cc 	.word	0x200005cc
 80083cc:	200006e0 	.word	0x200006e0
 80083d0:	200006dc 	.word	0x200006dc

080083d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083da:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <vTaskSwitchContext+0xcc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083e2:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <vTaskSwitchContext+0xd0>)
 80083e4:	2201      	movs	r2, #1
 80083e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083e8:	e055      	b.n	8008496 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80083ea:	4b2e      	ldr	r3, [pc, #184]	; (80084a4 <vTaskSwitchContext+0xd0>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80083f0:	4b2d      	ldr	r3, [pc, #180]	; (80084a8 <vTaskSwitchContext+0xd4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4b2c      	ldr	r3, [pc, #176]	; (80084a8 <vTaskSwitchContext+0xd4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d808      	bhi.n	8008412 <vTaskSwitchContext+0x3e>
 8008400:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <vTaskSwitchContext+0xd4>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	4b28      	ldr	r3, [pc, #160]	; (80084a8 <vTaskSwitchContext+0xd4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3334      	adds	r3, #52	; 0x34
 800840a:	4619      	mov	r1, r3
 800840c:	4610      	mov	r0, r2
 800840e:	f7f8 fc83 	bl	8000d18 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008412:	4b26      	ldr	r3, [pc, #152]	; (80084ac <vTaskSwitchContext+0xd8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	fab3 f383 	clz	r3, r3
 800841e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	f1c3 031f 	rsb	r3, r3, #31
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	4921      	ldr	r1, [pc, #132]	; (80084b0 <vTaskSwitchContext+0xdc>)
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10a      	bne.n	8008452 <vTaskSwitchContext+0x7e>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	607b      	str	r3, [r7, #4]
}
 800844e:	bf00      	nop
 8008450:	e7fe      	b.n	8008450 <vTaskSwitchContext+0x7c>
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4613      	mov	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4a14      	ldr	r2, [pc, #80]	; (80084b0 <vTaskSwitchContext+0xdc>)
 800845e:	4413      	add	r3, r2
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	605a      	str	r2, [r3, #4]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	3308      	adds	r3, #8
 8008474:	429a      	cmp	r2, r3
 8008476:	d104      	bne.n	8008482 <vTaskSwitchContext+0xae>
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <vTaskSwitchContext+0xd4>)
 800848a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <vTaskSwitchContext+0xd4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	334c      	adds	r3, #76	; 0x4c
 8008492:	4a08      	ldr	r2, [pc, #32]	; (80084b4 <vTaskSwitchContext+0xe0>)
 8008494:	6013      	str	r3, [r2, #0]
}
 8008496:	bf00      	nop
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	200006f4 	.word	0x200006f4
 80084a4:	200006e0 	.word	0x200006e0
 80084a8:	200005cc 	.word	0x200005cc
 80084ac:	200006d4 	.word	0x200006d4
 80084b0:	200005d0 	.word	0x200005d0
 80084b4:	2000001c 	.word	0x2000001c

080084b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	60fb      	str	r3, [r7, #12]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084de:	4b07      	ldr	r3, [pc, #28]	; (80084fc <vTaskPlaceOnEventList+0x44>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3318      	adds	r3, #24
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7fe fed9 	bl	800729e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084ec:	2101      	movs	r1, #1
 80084ee:	6838      	ldr	r0, [r7, #0]
 80084f0:	f000 fb82 	bl	8008bf8 <prvAddCurrentTaskToDelayedList>
}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	200005cc 	.word	0x200005cc

08008500 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	60fb      	str	r3, [r7, #12]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3318      	adds	r3, #24
 8008530:	4618      	mov	r0, r3
 8008532:	f7fe feed 	bl	8007310 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008536:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <xTaskRemoveFromEventList+0xac>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d11c      	bne.n	8008578 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	3304      	adds	r3, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fee4 	bl	8007310 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	2201      	movs	r2, #1
 800854e:	409a      	lsls	r2, r3
 8008550:	4b17      	ldr	r3, [pc, #92]	; (80085b0 <xTaskRemoveFromEventList+0xb0>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4313      	orrs	r3, r2
 8008556:	4a16      	ldr	r2, [pc, #88]	; (80085b0 <xTaskRemoveFromEventList+0xb0>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4a13      	ldr	r2, [pc, #76]	; (80085b4 <xTaskRemoveFromEventList+0xb4>)
 8008568:	441a      	add	r2, r3
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3304      	adds	r3, #4
 800856e:	4619      	mov	r1, r3
 8008570:	4610      	mov	r0, r2
 8008572:	f7fe fe70 	bl	8007256 <vListInsertEnd>
 8008576:	e005      	b.n	8008584 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3318      	adds	r3, #24
 800857c:	4619      	mov	r1, r3
 800857e:	480e      	ldr	r0, [pc, #56]	; (80085b8 <xTaskRemoveFromEventList+0xb8>)
 8008580:	f7fe fe69 	bl	8007256 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <xTaskRemoveFromEventList+0xbc>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	429a      	cmp	r2, r3
 8008590:	d905      	bls.n	800859e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008592:	2301      	movs	r3, #1
 8008594:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <xTaskRemoveFromEventList+0xc0>)
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e001      	b.n	80085a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800859e:	2300      	movs	r3, #0
 80085a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085a2:	697b      	ldr	r3, [r7, #20]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	200006f4 	.word	0x200006f4
 80085b0:	200006d4 	.word	0x200006d4
 80085b4:	200005d0 	.word	0x200005d0
 80085b8:	2000068c 	.word	0x2000068c
 80085bc:	200005cc 	.word	0x200005cc
 80085c0:	200006e0 	.word	0x200006e0

080085c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <vTaskInternalSetTimeOutState+0x24>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085d4:	4b05      	ldr	r3, [pc, #20]	; (80085ec <vTaskInternalSetTimeOutState+0x28>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	605a      	str	r2, [r3, #4]
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	200006e4 	.word	0x200006e4
 80085ec:	200006d0 	.word	0x200006d0

080085f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008632:	f000 fc77 	bl	8008f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008636:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <xTaskCheckForTimeOut+0xbc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864e:	d102      	bne.n	8008656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	e023      	b.n	800869e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <xTaskCheckForTimeOut+0xc0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d007      	beq.n	8008672 <xTaskCheckForTimeOut+0x82>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	61fb      	str	r3, [r7, #28]
 8008670:	e015      	b.n	800869e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	429a      	cmp	r2, r3
 800867a:	d20b      	bcs.n	8008694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff9b 	bl	80085c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	e004      	b.n	800869e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800869a:	2301      	movs	r3, #1
 800869c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800869e:	f000 fc71 	bl	8008f84 <vPortExitCritical>

	return xReturn;
 80086a2:	69fb      	ldr	r3, [r7, #28]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	200006d0 	.word	0x200006d0
 80086b0:	200006e4 	.word	0x200006e4

080086b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086b8:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <vTaskMissedYield+0x14>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
}
 80086be:	bf00      	nop
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	200006e0 	.word	0x200006e0

080086cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086d4:	f000 f852 	bl	800877c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086d8:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <prvIdleTask+0x28>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d9f9      	bls.n	80086d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <prvIdleTask+0x2c>)
 80086e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086f0:	e7f0      	b.n	80086d4 <prvIdleTask+0x8>
 80086f2:	bf00      	nop
 80086f4:	200005d0 	.word	0x200005d0
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008702:	2300      	movs	r3, #0
 8008704:	607b      	str	r3, [r7, #4]
 8008706:	e00c      	b.n	8008722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4a12      	ldr	r2, [pc, #72]	; (800875c <prvInitialiseTaskLists+0x60>)
 8008714:	4413      	add	r3, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fd70 	bl	80071fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3301      	adds	r3, #1
 8008720:	607b      	str	r3, [r7, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b06      	cmp	r3, #6
 8008726:	d9ef      	bls.n	8008708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008728:	480d      	ldr	r0, [pc, #52]	; (8008760 <prvInitialiseTaskLists+0x64>)
 800872a:	f7fe fd67 	bl	80071fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800872e:	480d      	ldr	r0, [pc, #52]	; (8008764 <prvInitialiseTaskLists+0x68>)
 8008730:	f7fe fd64 	bl	80071fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008734:	480c      	ldr	r0, [pc, #48]	; (8008768 <prvInitialiseTaskLists+0x6c>)
 8008736:	f7fe fd61 	bl	80071fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800873a:	480c      	ldr	r0, [pc, #48]	; (800876c <prvInitialiseTaskLists+0x70>)
 800873c:	f7fe fd5e 	bl	80071fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008740:	480b      	ldr	r0, [pc, #44]	; (8008770 <prvInitialiseTaskLists+0x74>)
 8008742:	f7fe fd5b 	bl	80071fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <prvInitialiseTaskLists+0x78>)
 8008748:	4a05      	ldr	r2, [pc, #20]	; (8008760 <prvInitialiseTaskLists+0x64>)
 800874a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <prvInitialiseTaskLists+0x7c>)
 800874e:	4a05      	ldr	r2, [pc, #20]	; (8008764 <prvInitialiseTaskLists+0x68>)
 8008750:	601a      	str	r2, [r3, #0]
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200005d0 	.word	0x200005d0
 8008760:	2000065c 	.word	0x2000065c
 8008764:	20000670 	.word	0x20000670
 8008768:	2000068c 	.word	0x2000068c
 800876c:	200006a0 	.word	0x200006a0
 8008770:	200006b8 	.word	0x200006b8
 8008774:	20000684 	.word	0x20000684
 8008778:	20000688 	.word	0x20000688

0800877c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008782:	e019      	b.n	80087b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008784:	f000 fbce 	bl	8008f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008788:	4b10      	ldr	r3, [pc, #64]	; (80087cc <prvCheckTasksWaitingTermination+0x50>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fdbb 	bl	8007310 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800879a:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <prvCheckTasksWaitingTermination+0x54>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3b01      	subs	r3, #1
 80087a0:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <prvCheckTasksWaitingTermination+0x54>)
 80087a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087a4:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <prvCheckTasksWaitingTermination+0x58>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <prvCheckTasksWaitingTermination+0x58>)
 80087ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087ae:	f000 fbe9 	bl	8008f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f810 	bl	80087d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <prvCheckTasksWaitingTermination+0x58>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e1      	bne.n	8008784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	200006a0 	.word	0x200006a0
 80087d0:	200006cc 	.word	0x200006cc
 80087d4:	200006b4 	.word	0x200006b4

080087d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	334c      	adds	r3, #76	; 0x4c
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 feff 	bl	80095e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d108      	bne.n	8008806 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fd41 	bl	8009280 <vPortFree>
				vPortFree( pxTCB );
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fd3e 	bl	8009280 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008804:	e018      	b.n	8008838 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800880c:	2b01      	cmp	r3, #1
 800880e:	d103      	bne.n	8008818 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fd35 	bl	8009280 <vPortFree>
	}
 8008816:	e00f      	b.n	8008838 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800881e:	2b02      	cmp	r3, #2
 8008820:	d00a      	beq.n	8008838 <prvDeleteTCB+0x60>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60fb      	str	r3, [r7, #12]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <prvDeleteTCB+0x5e>
	}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvResetNextTaskUnblockTime+0x38>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008850:	4b0a      	ldr	r3, [pc, #40]	; (800887c <prvResetNextTaskUnblockTime+0x3c>)
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008858:	e008      	b.n	800886c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885a:	4b07      	ldr	r3, [pc, #28]	; (8008878 <prvResetNextTaskUnblockTime+0x38>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a04      	ldr	r2, [pc, #16]	; (800887c <prvResetNextTaskUnblockTime+0x3c>)
 800886a:	6013      	str	r3, [r2, #0]
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20000684 	.word	0x20000684
 800887c:	200006ec 	.word	0x200006ec

08008880 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <xTaskGetSchedulerState+0x34>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800888e:	2301      	movs	r3, #1
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	e008      	b.n	80088a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008894:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <xTaskGetSchedulerState+0x38>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d102      	bne.n	80088a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800889c:	2302      	movs	r3, #2
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	e001      	b.n	80088a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088a2:	2300      	movs	r3, #0
 80088a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088a6:	687b      	ldr	r3, [r7, #4]
	}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	200006d8 	.word	0x200006d8
 80088b8:	200006f4 	.word	0x200006f4

080088bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088c8:	2300      	movs	r3, #0
 80088ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d05e      	beq.n	8008990 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d6:	4b31      	ldr	r3, [pc, #196]	; (800899c <xTaskPriorityInherit+0xe0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	429a      	cmp	r2, r3
 80088de:	d24e      	bcs.n	800897e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	db06      	blt.n	80088f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e8:	4b2c      	ldr	r3, [pc, #176]	; (800899c <xTaskPriorityInherit+0xe0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	f1c3 0207 	rsb	r2, r3, #7
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	6959      	ldr	r1, [r3, #20]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <xTaskPriorityInherit+0xe4>)
 8008908:	4413      	add	r3, r2
 800890a:	4299      	cmp	r1, r3
 800890c:	d12f      	bne.n	800896e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	3304      	adds	r3, #4
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe fcfc 	bl	8007310 <uxListRemove>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	2201      	movs	r2, #1
 8008924:	fa02 f303 	lsl.w	r3, r2, r3
 8008928:	43da      	mvns	r2, r3
 800892a:	4b1e      	ldr	r3, [pc, #120]	; (80089a4 <xTaskPriorityInherit+0xe8>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4013      	ands	r3, r2
 8008930:	4a1c      	ldr	r2, [pc, #112]	; (80089a4 <xTaskPriorityInherit+0xe8>)
 8008932:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008934:	4b19      	ldr	r3, [pc, #100]	; (800899c <xTaskPriorityInherit+0xe0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	2201      	movs	r2, #1
 8008944:	409a      	lsls	r2, r3
 8008946:	4b17      	ldr	r3, [pc, #92]	; (80089a4 <xTaskPriorityInherit+0xe8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4313      	orrs	r3, r2
 800894c:	4a15      	ldr	r2, [pc, #84]	; (80089a4 <xTaskPriorityInherit+0xe8>)
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4a10      	ldr	r2, [pc, #64]	; (80089a0 <xTaskPriorityInherit+0xe4>)
 800895e:	441a      	add	r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3304      	adds	r3, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7fe fc75 	bl	8007256 <vListInsertEnd>
 800896c:	e004      	b.n	8008978 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800896e:	4b0b      	ldr	r3, [pc, #44]	; (800899c <xTaskPriorityInherit+0xe0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e008      	b.n	8008990 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <xTaskPriorityInherit+0xe0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	429a      	cmp	r2, r3
 800898a:	d201      	bcs.n	8008990 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800898c:	2301      	movs	r3, #1
 800898e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008990:	68fb      	ldr	r3, [r7, #12]
	}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	200005cc 	.word	0x200005cc
 80089a0:	200005d0 	.word	0x200005d0
 80089a4:	200006d4 	.word	0x200006d4

080089a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d06e      	beq.n	8008a9c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089be:	4b3a      	ldr	r3, [pc, #232]	; (8008aa8 <xTaskPriorityDisinherit+0x100>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d00a      	beq.n	80089de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	60fb      	str	r3, [r7, #12]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	60bb      	str	r3, [r7, #8]
}
 80089f8:	bf00      	nop
 80089fa:	e7fe      	b.n	80089fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a00:	1e5a      	subs	r2, r3, #1
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d044      	beq.n	8008a9c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d140      	bne.n	8008a9c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fc76 	bl	8007310 <uxListRemove>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d115      	bne.n	8008a56 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2e:	491f      	ldr	r1, [pc, #124]	; (8008aac <xTaskPriorityDisinherit+0x104>)
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <xTaskPriorityDisinherit+0xae>
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	2201      	movs	r2, #1
 8008a46:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4a:	43da      	mvns	r2, r3
 8008a4c:	4b18      	ldr	r3, [pc, #96]	; (8008ab0 <xTaskPriorityDisinherit+0x108>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4013      	ands	r3, r2
 8008a52:	4a17      	ldr	r2, [pc, #92]	; (8008ab0 <xTaskPriorityDisinherit+0x108>)
 8008a54:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	f1c3 0207 	rsb	r2, r3, #7
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	2201      	movs	r2, #1
 8008a70:	409a      	lsls	r2, r3
 8008a72:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <xTaskPriorityDisinherit+0x108>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	4a0d      	ldr	r2, [pc, #52]	; (8008ab0 <xTaskPriorityDisinherit+0x108>)
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a80:	4613      	mov	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4a08      	ldr	r2, [pc, #32]	; (8008aac <xTaskPriorityDisinherit+0x104>)
 8008a8a:	441a      	add	r2, r3
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7fe fbdf 	bl	8007256 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a9c:	697b      	ldr	r3, [r7, #20]
	}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200005cc 	.word	0x200005cc
 8008aac:	200005d0 	.word	0x200005d0
 8008ab0:	200006d4 	.word	0x200006d4

08008ab4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d077      	beq.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	60fb      	str	r3, [r7, #12]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d902      	bls.n	8008afa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	61fb      	str	r3, [r7, #28]
 8008af8:	e002      	b.n	8008b00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d058      	beq.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d153      	bne.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008b14:	4b2b      	ldr	r3, [pc, #172]	; (8008bc4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d10a      	bne.n	8008b34 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	60bb      	str	r3, [r7, #8]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	69fa      	ldr	r2, [r7, #28]
 8008b3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	db04      	blt.n	8008b52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f1c3 0207 	rsb	r2, r3, #7
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	6959      	ldr	r1, [r3, #20]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4a19      	ldr	r2, [pc, #100]	; (8008bc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008b62:	4413      	add	r3, r2
 8008b64:	4299      	cmp	r1, r3
 8008b66:	d129      	bne.n	8008bbc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fbcf 	bl	8007310 <uxListRemove>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	43da      	mvns	r2, r3
 8008b84:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4013      	ands	r3, r2
 8008b8a:	4a10      	ldr	r2, [pc, #64]	; (8008bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b8c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	2201      	movs	r2, #1
 8008b94:	409a      	lsls	r2, r3
 8008b96:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	4a0b      	ldr	r2, [pc, #44]	; (8008bcc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4a06      	ldr	r2, [pc, #24]	; (8008bc8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008bae:	441a      	add	r2, r3
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fe fb4d 	bl	8007256 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bbc:	bf00      	nop
 8008bbe:	3720      	adds	r7, #32
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	200005cc 	.word	0x200005cc
 8008bc8:	200005d0 	.word	0x200005d0
 8008bcc:	200006d4 	.word	0x200006d4

08008bd0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008bd4:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d004      	beq.n	8008be6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008bdc:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008be2:	3201      	adds	r2, #1
 8008be4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008be6:	4b03      	ldr	r3, [pc, #12]	; (8008bf4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008be8:	681b      	ldr	r3, [r3, #0]
	}
 8008bea:	4618      	mov	r0, r3
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	200005cc 	.word	0x200005cc

08008bf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c02:	4b29      	ldr	r3, [pc, #164]	; (8008ca8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c08:	4b28      	ldr	r3, [pc, #160]	; (8008cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe fb7e 	bl	8007310 <uxListRemove>
 8008c14:	4603      	mov	r3, r0
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	2201      	movs	r2, #1
 8008c22:	fa02 f303 	lsl.w	r3, r2, r3
 8008c26:	43da      	mvns	r2, r3
 8008c28:	4b21      	ldr	r3, [pc, #132]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	4a20      	ldr	r2, [pc, #128]	; (8008cb0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c30:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c38:	d10a      	bne.n	8008c50 <prvAddCurrentTaskToDelayedList+0x58>
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c40:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4619      	mov	r1, r3
 8008c48:	481a      	ldr	r0, [pc, #104]	; (8008cb4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c4a:	f7fe fb04 	bl	8007256 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c4e:	e026      	b.n	8008c9e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4413      	add	r3, r2
 8008c56:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c58:	4b14      	ldr	r3, [pc, #80]	; (8008cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d209      	bcs.n	8008c7c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	4b0f      	ldr	r3, [pc, #60]	; (8008cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3304      	adds	r3, #4
 8008c72:	4619      	mov	r1, r3
 8008c74:	4610      	mov	r0, r2
 8008c76:	f7fe fb12 	bl	800729e <vListInsert>
}
 8008c7a:	e010      	b.n	8008c9e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c7c:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f7fe fb08 	bl	800729e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	; (8008cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d202      	bcs.n	8008c9e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c98:	4a09      	ldr	r2, [pc, #36]	; (8008cc0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	6013      	str	r3, [r2, #0]
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	200006d0 	.word	0x200006d0
 8008cac:	200005cc 	.word	0x200005cc
 8008cb0:	200006d4 	.word	0x200006d4
 8008cb4:	200006b8 	.word	0x200006b8
 8008cb8:	20000688 	.word	0x20000688
 8008cbc:	20000684 	.word	0x20000684
 8008cc0:	200006ec 	.word	0x200006ec

08008cc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3b04      	subs	r3, #4
 8008cd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f023 0201 	bic.w	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3b04      	subs	r3, #4
 8008cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cf4:	4a0c      	ldr	r2, [pc, #48]	; (8008d28 <pxPortInitialiseStack+0x64>)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3b14      	subs	r3, #20
 8008cfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3b04      	subs	r3, #4
 8008d0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f06f 0202 	mvn.w	r2, #2
 8008d12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3b20      	subs	r3, #32
 8008d18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	08008d2d 	.word	0x08008d2d

08008d2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d36:	4b12      	ldr	r3, [pc, #72]	; (8008d80 <prvTaskExitError+0x54>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d00a      	beq.n	8008d56 <prvTaskExitError+0x2a>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <prvTaskExitError+0x28>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60bb      	str	r3, [r7, #8]
}
 8008d68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d6a:	bf00      	nop
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d0fc      	beq.n	8008d6c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	20000018 	.word	0x20000018
	...

08008d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <pxCurrentTCBConst2>)
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	6808      	ldr	r0, [r1, #0]
 8008d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	f380 8809 	msr	PSP, r0
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	4770      	bx	lr
 8008dac:	f3af 8000 	nop.w

08008db0 <pxCurrentTCBConst2>:
 8008db0:	200005cc 	.word	0x200005cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop

08008db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008db8:	4808      	ldr	r0, [pc, #32]	; (8008ddc <prvPortStartFirstTask+0x24>)
 8008dba:	6800      	ldr	r0, [r0, #0]
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	f380 8808 	msr	MSP, r0
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8814 	msr	CONTROL, r0
 8008dca:	b662      	cpsie	i
 8008dcc:	b661      	cpsie	f
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	df00      	svc	0
 8008dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dda:	bf00      	nop
 8008ddc:	e000ed08 	.word	0xe000ed08

08008de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008de6:	4b46      	ldr	r3, [pc, #280]	; (8008f00 <xPortStartScheduler+0x120>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a46      	ldr	r2, [pc, #280]	; (8008f04 <xPortStartScheduler+0x124>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d10a      	bne.n	8008e06 <xPortStartScheduler+0x26>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	613b      	str	r3, [r7, #16]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e06:	4b3e      	ldr	r3, [pc, #248]	; (8008f00 <xPortStartScheduler+0x120>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a3f      	ldr	r2, [pc, #252]	; (8008f08 <xPortStartScheduler+0x128>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d10a      	bne.n	8008e26 <xPortStartScheduler+0x46>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	60fb      	str	r3, [r7, #12]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e26:	4b39      	ldr	r3, [pc, #228]	; (8008f0c <xPortStartScheduler+0x12c>)
 8008e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	22ff      	movs	r2, #255	; 0xff
 8008e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	4b31      	ldr	r3, [pc, #196]	; (8008f10 <xPortStartScheduler+0x130>)
 8008e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e4e:	4b31      	ldr	r3, [pc, #196]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e50:	2207      	movs	r2, #7
 8008e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e54:	e009      	b.n	8008e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008e56:	4b2f      	ldr	r3, [pc, #188]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	4a2d      	ldr	r2, [pc, #180]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e72:	2b80      	cmp	r3, #128	; 0x80
 8008e74:	d0ef      	beq.n	8008e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e76:	4b27      	ldr	r3, [pc, #156]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1c3 0307 	rsb	r3, r3, #7
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d00a      	beq.n	8008e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	60bb      	str	r3, [r7, #8]
}
 8008e94:	bf00      	nop
 8008e96:	e7fe      	b.n	8008e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e98:	4b1e      	ldr	r3, [pc, #120]	; (8008f14 <xPortStartScheduler+0x134>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <xPortStartScheduler+0x134>)
 8008ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ea2:	4b1c      	ldr	r3, [pc, #112]	; (8008f14 <xPortStartScheduler+0x134>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008eaa:	4a1a      	ldr	r2, [pc, #104]	; (8008f14 <xPortStartScheduler+0x134>)
 8008eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008eb6:	4b18      	ldr	r3, [pc, #96]	; (8008f18 <xPortStartScheduler+0x138>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a17      	ldr	r2, [pc, #92]	; (8008f18 <xPortStartScheduler+0x138>)
 8008ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <xPortStartScheduler+0x138>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a14      	ldr	r2, [pc, #80]	; (8008f18 <xPortStartScheduler+0x138>)
 8008ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ece:	f000 f8dd 	bl	800908c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ed2:	4b12      	ldr	r3, [pc, #72]	; (8008f1c <xPortStartScheduler+0x13c>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ed8:	f000 f8fc 	bl	80090d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008edc:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <xPortStartScheduler+0x140>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0f      	ldr	r2, [pc, #60]	; (8008f20 <xPortStartScheduler+0x140>)
 8008ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ee8:	f7ff ff66 	bl	8008db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008eec:	f7ff fa72 	bl	80083d4 <vTaskSwitchContext>
	prvTaskExitError();
 8008ef0:	f7ff ff1c 	bl	8008d2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	e000ed00 	.word	0xe000ed00
 8008f04:	410fc271 	.word	0x410fc271
 8008f08:	410fc270 	.word	0x410fc270
 8008f0c:	e000e400 	.word	0xe000e400
 8008f10:	200006f8 	.word	0x200006f8
 8008f14:	200006fc 	.word	0x200006fc
 8008f18:	e000ed20 	.word	0xe000ed20
 8008f1c:	20000018 	.word	0x20000018
 8008f20:	e000ef34 	.word	0xe000ef34

08008f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	607b      	str	r3, [r7, #4]
}
 8008f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <vPortEnterCritical+0x58>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	4a0d      	ldr	r2, [pc, #52]	; (8008f7c <vPortEnterCritical+0x58>)
 8008f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f48:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <vPortEnterCritical+0x58>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d10f      	bne.n	8008f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f50:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <vPortEnterCritical+0x5c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00a      	beq.n	8008f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	603b      	str	r3, [r7, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <vPortEnterCritical+0x4a>
	}
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	20000018 	.word	0x20000018
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f8a:	4b12      	ldr	r3, [pc, #72]	; (8008fd4 <vPortExitCritical+0x50>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10a      	bne.n	8008fa8 <vPortExitCritical+0x24>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	607b      	str	r3, [r7, #4]
}
 8008fa4:	bf00      	nop
 8008fa6:	e7fe      	b.n	8008fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <vPortExitCritical+0x50>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	4a09      	ldr	r2, [pc, #36]	; (8008fd4 <vPortExitCritical+0x50>)
 8008fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fb2:	4b08      	ldr	r3, [pc, #32]	; (8008fd4 <vPortExitCritical+0x50>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d105      	bne.n	8008fc6 <vPortExitCritical+0x42>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fc6:	bf00      	nop
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20000018 	.word	0x20000018
	...

08008fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fe0:	f3ef 8009 	mrs	r0, PSP
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	4b15      	ldr	r3, [pc, #84]	; (8009040 <pxCurrentTCBConst>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	f01e 0f10 	tst.w	lr, #16
 8008ff0:	bf08      	it	eq
 8008ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffa:	6010      	str	r0, [r2, #0]
 8008ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009004:	f380 8811 	msr	BASEPRI, r0
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f7ff f9e0 	bl	80083d4 <vTaskSwitchContext>
 8009014:	f04f 0000 	mov.w	r0, #0
 8009018:	f380 8811 	msr	BASEPRI, r0
 800901c:	bc09      	pop	{r0, r3}
 800901e:	6819      	ldr	r1, [r3, #0]
 8009020:	6808      	ldr	r0, [r1, #0]
 8009022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009026:	f01e 0f10 	tst.w	lr, #16
 800902a:	bf08      	it	eq
 800902c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009030:	f380 8809 	msr	PSP, r0
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	f3af 8000 	nop.w

08009040 <pxCurrentTCBConst>:
 8009040:	200005cc 	.word	0x200005cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009062:	f7ff f8ff 	bl	8008264 <xTaskIncrementTick>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <SysTick_Handler+0x40>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	2300      	movs	r3, #0
 8009076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f383 8811 	msr	BASEPRI, r3
}
 800907e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009090:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <vPortSetupTimerInterrupt+0x34>)
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009096:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <vPortSetupTimerInterrupt+0x38>)
 8009098:	2200      	movs	r2, #0
 800909a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800909c:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <vPortSetupTimerInterrupt+0x3c>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <vPortSetupTimerInterrupt+0x40>)
 80090a2:	fba2 2303 	umull	r2, r3, r2, r3
 80090a6:	099b      	lsrs	r3, r3, #6
 80090a8:	4a09      	ldr	r2, [pc, #36]	; (80090d0 <vPortSetupTimerInterrupt+0x44>)
 80090aa:	3b01      	subs	r3, #1
 80090ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ae:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <vPortSetupTimerInterrupt+0x34>)
 80090b0:	2207      	movs	r2, #7
 80090b2:	601a      	str	r2, [r3, #0]
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	e000e010 	.word	0xe000e010
 80090c4:	e000e018 	.word	0xe000e018
 80090c8:	20000008 	.word	0x20000008
 80090cc:	10624dd3 	.word	0x10624dd3
 80090d0:	e000e014 	.word	0xe000e014

080090d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80090e4 <vPortEnableVFP+0x10>
 80090d8:	6801      	ldr	r1, [r0, #0]
 80090da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80090de:	6001      	str	r1, [r0, #0]
 80090e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090e2:	bf00      	nop
 80090e4:	e000ed88 	.word	0xe000ed88

080090e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090f4:	f7fe fffc 	bl	80080f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090f8:	4b5b      	ldr	r3, [pc, #364]	; (8009268 <pvPortMalloc+0x180>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009100:	f000 f920 	bl	8009344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009104:	4b59      	ldr	r3, [pc, #356]	; (800926c <pvPortMalloc+0x184>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4013      	ands	r3, r2
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 8093 	bne.w	8009238 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01d      	beq.n	8009154 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009118:	2208      	movs	r2, #8
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d014      	beq.n	8009154 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f023 0307 	bic.w	r3, r3, #7
 8009130:	3308      	adds	r3, #8
 8009132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <pvPortMalloc+0x6c>
	__asm volatile
 800913e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009142:	f383 8811 	msr	BASEPRI, r3
 8009146:	f3bf 8f6f 	isb	sy
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	617b      	str	r3, [r7, #20]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d06e      	beq.n	8009238 <pvPortMalloc+0x150>
 800915a:	4b45      	ldr	r3, [pc, #276]	; (8009270 <pvPortMalloc+0x188>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d869      	bhi.n	8009238 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009164:	4b43      	ldr	r3, [pc, #268]	; (8009274 <pvPortMalloc+0x18c>)
 8009166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009168:	4b42      	ldr	r3, [pc, #264]	; (8009274 <pvPortMalloc+0x18c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800916e:	e004      	b.n	800917a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	429a      	cmp	r2, r3
 8009182:	d903      	bls.n	800918c <pvPortMalloc+0xa4>
 8009184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1f1      	bne.n	8009170 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800918c:	4b36      	ldr	r3, [pc, #216]	; (8009268 <pvPortMalloc+0x180>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009192:	429a      	cmp	r2, r3
 8009194:	d050      	beq.n	8009238 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009196:	6a3b      	ldr	r3, [r7, #32]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2208      	movs	r2, #8
 800919c:	4413      	add	r3, r2
 800919e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	1ad2      	subs	r2, r2, r3
 80091b0:	2308      	movs	r3, #8
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d91f      	bls.n	80091f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4413      	add	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <pvPortMalloc+0xf8>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	613b      	str	r3, [r7, #16]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	1ad2      	subs	r2, r2, r3
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091f2:	69b8      	ldr	r0, [r7, #24]
 80091f4:	f000 f908 	bl	8009408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091f8:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <pvPortMalloc+0x188>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	4a1b      	ldr	r2, [pc, #108]	; (8009270 <pvPortMalloc+0x188>)
 8009204:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009206:	4b1a      	ldr	r3, [pc, #104]	; (8009270 <pvPortMalloc+0x188>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <pvPortMalloc+0x190>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	d203      	bcs.n	800921a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009212:	4b17      	ldr	r3, [pc, #92]	; (8009270 <pvPortMalloc+0x188>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a18      	ldr	r2, [pc, #96]	; (8009278 <pvPortMalloc+0x190>)
 8009218:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <pvPortMalloc+0x184>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	431a      	orrs	r2, r3
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800922e:	4b13      	ldr	r3, [pc, #76]	; (800927c <pvPortMalloc+0x194>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	4a11      	ldr	r2, [pc, #68]	; (800927c <pvPortMalloc+0x194>)
 8009236:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009238:	f7fe ff68 	bl	800810c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	f003 0307 	and.w	r3, r3, #7
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <pvPortMalloc+0x174>
	__asm volatile
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	60fb      	str	r3, [r7, #12]
}
 8009258:	bf00      	nop
 800925a:	e7fe      	b.n	800925a <pvPortMalloc+0x172>
	return pvReturn;
 800925c:	69fb      	ldr	r3, [r7, #28]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3728      	adds	r7, #40	; 0x28
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	20004308 	.word	0x20004308
 800926c:	2000431c 	.word	0x2000431c
 8009270:	2000430c 	.word	0x2000430c
 8009274:	20004300 	.word	0x20004300
 8009278:	20004310 	.word	0x20004310
 800927c:	20004314 	.word	0x20004314

08009280 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d04d      	beq.n	800932e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009292:	2308      	movs	r3, #8
 8009294:	425b      	negs	r3, r3
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	4413      	add	r3, r2
 800929a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	4b24      	ldr	r3, [pc, #144]	; (8009338 <vPortFree+0xb8>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4013      	ands	r3, r2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <vPortFree+0x44>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	60fb      	str	r3, [r7, #12]
}
 80092c0:	bf00      	nop
 80092c2:	e7fe      	b.n	80092c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00a      	beq.n	80092e2 <vPortFree+0x62>
	__asm volatile
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	60bb      	str	r3, [r7, #8]
}
 80092de:	bf00      	nop
 80092e0:	e7fe      	b.n	80092e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	4b14      	ldr	r3, [pc, #80]	; (8009338 <vPortFree+0xb8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4013      	ands	r3, r2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01e      	beq.n	800932e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d11a      	bne.n	800932e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <vPortFree+0xb8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	43db      	mvns	r3, r3
 8009302:	401a      	ands	r2, r3
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009308:	f7fe fef2 	bl	80080f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <vPortFree+0xbc>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4413      	add	r3, r2
 8009316:	4a09      	ldr	r2, [pc, #36]	; (800933c <vPortFree+0xbc>)
 8009318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800931a:	6938      	ldr	r0, [r7, #16]
 800931c:	f000 f874 	bl	8009408 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <vPortFree+0xc0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3301      	adds	r3, #1
 8009326:	4a06      	ldr	r2, [pc, #24]	; (8009340 <vPortFree+0xc0>)
 8009328:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800932a:	f7fe feef 	bl	800810c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800932e:	bf00      	nop
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	2000431c 	.word	0x2000431c
 800933c:	2000430c 	.word	0x2000430c
 8009340:	20004318 	.word	0x20004318

08009344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800934a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800934e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009350:	4b27      	ldr	r3, [pc, #156]	; (80093f0 <prvHeapInit+0xac>)
 8009352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3307      	adds	r3, #7
 8009362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	4a1f      	ldr	r2, [pc, #124]	; (80093f0 <prvHeapInit+0xac>)
 8009374:	4413      	add	r3, r2
 8009376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800937c:	4a1d      	ldr	r2, [pc, #116]	; (80093f4 <prvHeapInit+0xb0>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009382:	4b1c      	ldr	r3, [pc, #112]	; (80093f4 <prvHeapInit+0xb0>)
 8009384:	2200      	movs	r2, #0
 8009386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009390:	2208      	movs	r2, #8
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a15      	ldr	r2, [pc, #84]	; (80093f8 <prvHeapInit+0xb4>)
 80093a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093a6:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <prvHeapInit+0xb4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ae:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <prvHeapInit+0xb4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093c4:	4b0c      	ldr	r3, [pc, #48]	; (80093f8 <prvHeapInit+0xb4>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	4a0a      	ldr	r2, [pc, #40]	; (80093fc <prvHeapInit+0xb8>)
 80093d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4a09      	ldr	r2, [pc, #36]	; (8009400 <prvHeapInit+0xbc>)
 80093da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093dc:	4b09      	ldr	r3, [pc, #36]	; (8009404 <prvHeapInit+0xc0>)
 80093de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093e2:	601a      	str	r2, [r3, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20000700 	.word	0x20000700
 80093f4:	20004300 	.word	0x20004300
 80093f8:	20004308 	.word	0x20004308
 80093fc:	20004310 	.word	0x20004310
 8009400:	2000430c 	.word	0x2000430c
 8009404:	2000431c 	.word	0x2000431c

08009408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009410:	4b28      	ldr	r3, [pc, #160]	; (80094b4 <prvInsertBlockIntoFreeList+0xac>)
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e002      	b.n	800941c <prvInsertBlockIntoFreeList+0x14>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d8f7      	bhi.n	8009416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d108      	bne.n	800944a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	441a      	add	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d118      	bne.n	8009490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	4b15      	ldr	r3, [pc, #84]	; (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d00d      	beq.n	8009486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e008      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009486:	4b0c      	ldr	r3, [pc, #48]	; (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e003      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d002      	beq.n	80094a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20004300 	.word	0x20004300
 80094b8:	20004308 	.word	0x20004308

080094bc <__libc_init_array>:
 80094bc:	b570      	push	{r4, r5, r6, lr}
 80094be:	4d0d      	ldr	r5, [pc, #52]	; (80094f4 <__libc_init_array+0x38>)
 80094c0:	4c0d      	ldr	r4, [pc, #52]	; (80094f8 <__libc_init_array+0x3c>)
 80094c2:	1b64      	subs	r4, r4, r5
 80094c4:	10a4      	asrs	r4, r4, #2
 80094c6:	2600      	movs	r6, #0
 80094c8:	42a6      	cmp	r6, r4
 80094ca:	d109      	bne.n	80094e0 <__libc_init_array+0x24>
 80094cc:	4d0b      	ldr	r5, [pc, #44]	; (80094fc <__libc_init_array+0x40>)
 80094ce:	4c0c      	ldr	r4, [pc, #48]	; (8009500 <__libc_init_array+0x44>)
 80094d0:	f000 f8f2 	bl	80096b8 <_init>
 80094d4:	1b64      	subs	r4, r4, r5
 80094d6:	10a4      	asrs	r4, r4, #2
 80094d8:	2600      	movs	r6, #0
 80094da:	42a6      	cmp	r6, r4
 80094dc:	d105      	bne.n	80094ea <__libc_init_array+0x2e>
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e4:	4798      	blx	r3
 80094e6:	3601      	adds	r6, #1
 80094e8:	e7ee      	b.n	80094c8 <__libc_init_array+0xc>
 80094ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ee:	4798      	blx	r3
 80094f0:	3601      	adds	r6, #1
 80094f2:	e7f2      	b.n	80094da <__libc_init_array+0x1e>
 80094f4:	080097a8 	.word	0x080097a8
 80094f8:	080097a8 	.word	0x080097a8
 80094fc:	080097a8 	.word	0x080097a8
 8009500:	080097ac 	.word	0x080097ac

08009504 <__retarget_lock_acquire_recursive>:
 8009504:	4770      	bx	lr

08009506 <__retarget_lock_release_recursive>:
 8009506:	4770      	bx	lr

08009508 <memcpy>:
 8009508:	440a      	add	r2, r1
 800950a:	4291      	cmp	r1, r2
 800950c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009510:	d100      	bne.n	8009514 <memcpy+0xc>
 8009512:	4770      	bx	lr
 8009514:	b510      	push	{r4, lr}
 8009516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800951e:	4291      	cmp	r1, r2
 8009520:	d1f9      	bne.n	8009516 <memcpy+0xe>
 8009522:	bd10      	pop	{r4, pc}

08009524 <memset>:
 8009524:	4402      	add	r2, r0
 8009526:	4603      	mov	r3, r0
 8009528:	4293      	cmp	r3, r2
 800952a:	d100      	bne.n	800952e <memset+0xa>
 800952c:	4770      	bx	lr
 800952e:	f803 1b01 	strb.w	r1, [r3], #1
 8009532:	e7f9      	b.n	8009528 <memset+0x4>

08009534 <_free_r>:
 8009534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009536:	2900      	cmp	r1, #0
 8009538:	d044      	beq.n	80095c4 <_free_r+0x90>
 800953a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953e:	9001      	str	r0, [sp, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f1a1 0404 	sub.w	r4, r1, #4
 8009546:	bfb8      	it	lt
 8009548:	18e4      	addlt	r4, r4, r3
 800954a:	f000 f8a9 	bl	80096a0 <__malloc_lock>
 800954e:	4a1e      	ldr	r2, [pc, #120]	; (80095c8 <_free_r+0x94>)
 8009550:	9801      	ldr	r0, [sp, #4]
 8009552:	6813      	ldr	r3, [r2, #0]
 8009554:	b933      	cbnz	r3, 8009564 <_free_r+0x30>
 8009556:	6063      	str	r3, [r4, #4]
 8009558:	6014      	str	r4, [r2, #0]
 800955a:	b003      	add	sp, #12
 800955c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009560:	f000 b8a4 	b.w	80096ac <__malloc_unlock>
 8009564:	42a3      	cmp	r3, r4
 8009566:	d908      	bls.n	800957a <_free_r+0x46>
 8009568:	6825      	ldr	r5, [r4, #0]
 800956a:	1961      	adds	r1, r4, r5
 800956c:	428b      	cmp	r3, r1
 800956e:	bf01      	itttt	eq
 8009570:	6819      	ldreq	r1, [r3, #0]
 8009572:	685b      	ldreq	r3, [r3, #4]
 8009574:	1949      	addeq	r1, r1, r5
 8009576:	6021      	streq	r1, [r4, #0]
 8009578:	e7ed      	b.n	8009556 <_free_r+0x22>
 800957a:	461a      	mov	r2, r3
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	b10b      	cbz	r3, 8009584 <_free_r+0x50>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d9fa      	bls.n	800957a <_free_r+0x46>
 8009584:	6811      	ldr	r1, [r2, #0]
 8009586:	1855      	adds	r5, r2, r1
 8009588:	42a5      	cmp	r5, r4
 800958a:	d10b      	bne.n	80095a4 <_free_r+0x70>
 800958c:	6824      	ldr	r4, [r4, #0]
 800958e:	4421      	add	r1, r4
 8009590:	1854      	adds	r4, r2, r1
 8009592:	42a3      	cmp	r3, r4
 8009594:	6011      	str	r1, [r2, #0]
 8009596:	d1e0      	bne.n	800955a <_free_r+0x26>
 8009598:	681c      	ldr	r4, [r3, #0]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	6053      	str	r3, [r2, #4]
 800959e:	4421      	add	r1, r4
 80095a0:	6011      	str	r1, [r2, #0]
 80095a2:	e7da      	b.n	800955a <_free_r+0x26>
 80095a4:	d902      	bls.n	80095ac <_free_r+0x78>
 80095a6:	230c      	movs	r3, #12
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	e7d6      	b.n	800955a <_free_r+0x26>
 80095ac:	6825      	ldr	r5, [r4, #0]
 80095ae:	1961      	adds	r1, r4, r5
 80095b0:	428b      	cmp	r3, r1
 80095b2:	bf04      	itt	eq
 80095b4:	6819      	ldreq	r1, [r3, #0]
 80095b6:	685b      	ldreq	r3, [r3, #4]
 80095b8:	6063      	str	r3, [r4, #4]
 80095ba:	bf04      	itt	eq
 80095bc:	1949      	addeq	r1, r1, r5
 80095be:	6021      	streq	r1, [r4, #0]
 80095c0:	6054      	str	r4, [r2, #4]
 80095c2:	e7ca      	b.n	800955a <_free_r+0x26>
 80095c4:	b003      	add	sp, #12
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	20004324 	.word	0x20004324

080095cc <cleanup_glue>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	460c      	mov	r4, r1
 80095d0:	6809      	ldr	r1, [r1, #0]
 80095d2:	4605      	mov	r5, r0
 80095d4:	b109      	cbz	r1, 80095da <cleanup_glue+0xe>
 80095d6:	f7ff fff9 	bl	80095cc <cleanup_glue>
 80095da:	4621      	mov	r1, r4
 80095dc:	4628      	mov	r0, r5
 80095de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e2:	f7ff bfa7 	b.w	8009534 <_free_r>
	...

080095e8 <_reclaim_reent>:
 80095e8:	4b2c      	ldr	r3, [pc, #176]	; (800969c <_reclaim_reent+0xb4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4283      	cmp	r3, r0
 80095ee:	b570      	push	{r4, r5, r6, lr}
 80095f0:	4604      	mov	r4, r0
 80095f2:	d051      	beq.n	8009698 <_reclaim_reent+0xb0>
 80095f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80095f6:	b143      	cbz	r3, 800960a <_reclaim_reent+0x22>
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d14a      	bne.n	8009694 <_reclaim_reent+0xac>
 80095fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009600:	6819      	ldr	r1, [r3, #0]
 8009602:	b111      	cbz	r1, 800960a <_reclaim_reent+0x22>
 8009604:	4620      	mov	r0, r4
 8009606:	f7ff ff95 	bl	8009534 <_free_r>
 800960a:	6961      	ldr	r1, [r4, #20]
 800960c:	b111      	cbz	r1, 8009614 <_reclaim_reent+0x2c>
 800960e:	4620      	mov	r0, r4
 8009610:	f7ff ff90 	bl	8009534 <_free_r>
 8009614:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009616:	b111      	cbz	r1, 800961e <_reclaim_reent+0x36>
 8009618:	4620      	mov	r0, r4
 800961a:	f7ff ff8b 	bl	8009534 <_free_r>
 800961e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009620:	b111      	cbz	r1, 8009628 <_reclaim_reent+0x40>
 8009622:	4620      	mov	r0, r4
 8009624:	f7ff ff86 	bl	8009534 <_free_r>
 8009628:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800962a:	b111      	cbz	r1, 8009632 <_reclaim_reent+0x4a>
 800962c:	4620      	mov	r0, r4
 800962e:	f7ff ff81 	bl	8009534 <_free_r>
 8009632:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009634:	b111      	cbz	r1, 800963c <_reclaim_reent+0x54>
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff ff7c 	bl	8009534 <_free_r>
 800963c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800963e:	b111      	cbz	r1, 8009646 <_reclaim_reent+0x5e>
 8009640:	4620      	mov	r0, r4
 8009642:	f7ff ff77 	bl	8009534 <_free_r>
 8009646:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009648:	b111      	cbz	r1, 8009650 <_reclaim_reent+0x68>
 800964a:	4620      	mov	r0, r4
 800964c:	f7ff ff72 	bl	8009534 <_free_r>
 8009650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009652:	b111      	cbz	r1, 800965a <_reclaim_reent+0x72>
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff ff6d 	bl	8009534 <_free_r>
 800965a:	69a3      	ldr	r3, [r4, #24]
 800965c:	b1e3      	cbz	r3, 8009698 <_reclaim_reent+0xb0>
 800965e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009660:	4620      	mov	r0, r4
 8009662:	4798      	blx	r3
 8009664:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009666:	b1b9      	cbz	r1, 8009698 <_reclaim_reent+0xb0>
 8009668:	4620      	mov	r0, r4
 800966a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800966e:	f7ff bfad 	b.w	80095cc <cleanup_glue>
 8009672:	5949      	ldr	r1, [r1, r5]
 8009674:	b941      	cbnz	r1, 8009688 <_reclaim_reent+0xa0>
 8009676:	3504      	adds	r5, #4
 8009678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967a:	2d80      	cmp	r5, #128	; 0x80
 800967c:	68d9      	ldr	r1, [r3, #12]
 800967e:	d1f8      	bne.n	8009672 <_reclaim_reent+0x8a>
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff ff57 	bl	8009534 <_free_r>
 8009686:	e7ba      	b.n	80095fe <_reclaim_reent+0x16>
 8009688:	680e      	ldr	r6, [r1, #0]
 800968a:	4620      	mov	r0, r4
 800968c:	f7ff ff52 	bl	8009534 <_free_r>
 8009690:	4631      	mov	r1, r6
 8009692:	e7ef      	b.n	8009674 <_reclaim_reent+0x8c>
 8009694:	2500      	movs	r5, #0
 8009696:	e7ef      	b.n	8009678 <_reclaim_reent+0x90>
 8009698:	bd70      	pop	{r4, r5, r6, pc}
 800969a:	bf00      	nop
 800969c:	2000001c 	.word	0x2000001c

080096a0 <__malloc_lock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_lock+0x8>)
 80096a2:	f7ff bf2f 	b.w	8009504 <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	20004320 	.word	0x20004320

080096ac <__malloc_unlock>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__malloc_unlock+0x8>)
 80096ae:	f7ff bf2a 	b.w	8009506 <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	20004320 	.word	0x20004320

080096b8 <_init>:
 80096b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ba:	bf00      	nop
 80096bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096be:	bc08      	pop	{r3}
 80096c0:	469e      	mov	lr, r3
 80096c2:	4770      	bx	lr

080096c4 <_fini>:
 80096c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c6:	bf00      	nop
 80096c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ca:	bc08      	pop	{r3}
 80096cc:	469e      	mov	lr, r3
 80096ce:	4770      	bx	lr
